/* The following code was generated by JFlex 1.7.0 */

/*
* Autor: Jose Ramon
* Fecha: 02/11
*/

package Lex;                         // PAQUETE AL QUE PERTENECE
import java_cup.runtime.Symbol;      // CLASE SYMBOL PARA LOS TOKENS DE CUP
import Sin.ParserSym;
import Lex.Tokens.*;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.io.FileWriter;
import java.util.ArrayList;
import java.io.IOException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>D:/Andreu/Documents/UIB/Compilador/src/Lex/LexerCup.flex</tt>
 */
public class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\1\7\1\7\1\4\22\0\1\3\1\31\1\11"+
    "\2\0\1\27\1\33\1\0\1\45\1\46\1\6\1\27\1\52\1\27"+
    "\1\0\1\5\1\10\11\1\1\53\1\51\1\32\1\30\1\32\2\0"+
    "\2\2\1\22\12\2\1\24\1\23\3\2\1\25\1\26\6\2\6\0"+
    "\1\17\1\2\1\41\1\2\1\15\1\16\1\2\1\37\1\35\2\2"+
    "\1\20\1\43\1\40\1\42\1\44\1\2\1\13\1\21\1\12\1\14"+
    "\1\2\1\36\3\2\1\47\1\34\1\50\7\0\1\7\u1fa2\0\1\7"+
    "\1\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\2\4\1\2\6\1"+
    "\1\5\1\6\1\7\7\1\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\2\0\1\20\6\17\1\7"+
    "\1\6\1\21\5\17\1\0\14\17\1\3\1\22\1\17"+
    "\1\23\1\24\4\17\1\25\1\17\1\26\2\17\1\27"+
    "\1\30\1\31\1\17\1\32\1\17\1\33\1\17\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[85];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\54\0\260\0\54\0\54"+
    "\0\334\0\u0108\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u01e4"+
    "\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318"+
    "\0\54\0\54\0\54\0\54\0\54\0\54\0\54\0\u0344"+
    "\0\u0370\0\334\0\54\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c"+
    "\0\u0478\0\54\0\54\0\u0344\0\u04a4\0\u04d0\0\u04fc\0\u0528"+
    "\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688"+
    "\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u0370\0\u0344"+
    "\0\u07bc\0\u0344\0\u0344\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0344"+
    "\0\u0898\0\u0344\0\u08c4\0\u08f0\0\u0344\0\u0344\0\u0344\0\u091c"+
    "\0\u0344\0\u0948\0\u0344\0\u0974\0\u0344";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[85];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\4\1\14\1\15\3\4\1\16"+
    "\4\4\1\7\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\2\4\1\26\1\27\1\30\1\4\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\55\0\1\3\6\0"+
    "\1\3\45\0\1\40\7\0\15\40\6\0\10\40\15\0"+
    "\1\41\45\0\11\42\1\43\42\42\2\0\1\40\7\0"+
    "\1\40\1\44\13\40\6\0\10\40\11\0\1\40\7\0"+
    "\3\40\1\45\11\40\6\0\10\40\11\0\1\40\7\0"+
    "\6\40\1\46\6\40\6\0\10\40\11\0\1\40\7\0"+
    "\2\40\1\47\2\40\1\50\7\40\6\0\10\40\11\0"+
    "\1\40\7\0\11\40\1\51\3\40\6\0\10\40\37\0"+
    "\1\52\56\0\1\53\54\0\1\53\21\0\1\40\7\0"+
    "\4\40\1\54\10\40\6\0\3\40\1\55\4\40\11\0"+
    "\1\40\7\0\15\40\6\0\2\40\1\56\5\40\11\0"+
    "\1\40\7\0\5\40\1\57\7\40\6\0\10\40\11\0"+
    "\1\40\7\0\2\40\1\60\12\40\6\0\10\40\11\0"+
    "\1\40\7\0\5\40\1\61\7\40\6\0\10\40\10\0"+
    "\2\40\5\0\1\40\1\0\15\40\6\0\10\40\7\0"+
    "\4\41\1\0\1\41\1\62\1\0\44\41\1\0\2\40"+
    "\5\0\1\40\1\0\2\40\1\63\12\40\6\0\10\40"+
    "\10\0\2\40\5\0\1\40\1\0\1\64\14\40\6\0"+
    "\10\40\10\0\2\40\5\0\1\40\1\0\7\40\1\65"+
    "\5\40\6\0\1\66\7\40\10\0\2\40\5\0\1\40"+
    "\1\0\15\40\6\0\3\40\1\67\4\40\10\0\2\40"+
    "\5\0\1\40\1\0\6\40\1\70\6\40\6\0\10\40"+
    "\10\0\2\40\5\0\1\40\1\0\12\40\1\71\2\40"+
    "\6\0\10\40\10\0\2\40\5\0\1\40\1\0\15\40"+
    "\6\0\7\40\1\72\10\0\2\40\5\0\1\40\1\0"+
    "\15\40\6\0\1\73\7\40\10\0\2\40\5\0\1\40"+
    "\1\0\6\40\1\74\6\40\6\0\10\40\10\0\2\40"+
    "\5\0\1\40\1\0\1\75\14\40\6\0\10\40\10\0"+
    "\2\40\5\0\1\40\1\0\15\40\6\0\1\76\7\40"+
    "\7\0\4\41\1\0\1\77\1\62\1\0\44\41\1\0"+
    "\2\40\5\0\1\40\1\0\3\40\1\100\11\40\6\0"+
    "\10\40\10\0\2\40\5\0\1\40\1\0\2\40\1\101"+
    "\12\40\6\0\10\40\10\0\2\40\5\0\1\40\1\0"+
    "\3\40\1\102\11\40\6\0\10\40\10\0\2\40\5\0"+
    "\1\40\1\0\4\40\1\103\10\40\6\0\10\40\10\0"+
    "\2\40\5\0\1\40\1\0\15\40\6\0\4\40\1\104"+
    "\3\40\10\0\2\40\5\0\1\40\1\0\7\40\1\63"+
    "\5\40\6\0\10\40\10\0\2\40\5\0\1\40\1\0"+
    "\13\40\1\105\1\40\6\0\10\40\10\0\2\40\5\0"+
    "\1\40\1\0\2\40\1\106\12\40\6\0\10\40\10\0"+
    "\2\40\5\0\1\40\1\0\6\40\1\107\6\40\6\0"+
    "\10\40\10\0\2\40\5\0\1\40\1\0\6\40\1\110"+
    "\6\40\6\0\10\40\10\0\2\40\5\0\1\40\1\0"+
    "\15\40\6\0\7\40\1\111\10\0\2\40\5\0\1\40"+
    "\1\0\15\40\6\0\3\40\1\112\4\40\10\0\2\40"+
    "\5\0\1\40\1\0\1\40\1\113\13\40\6\0\10\40"+
    "\10\0\2\40\5\0\1\40\1\0\1\114\14\40\6\0"+
    "\10\40\10\0\2\40\5\0\1\40\1\0\14\40\1\115"+
    "\6\0\10\40\10\0\2\40\5\0\1\40\1\0\1\116"+
    "\14\40\6\0\10\40\10\0\2\40\5\0\1\40\1\0"+
    "\3\40\1\117\11\40\6\0\10\40\10\0\2\40\5\0"+
    "\1\40\1\0\2\40\1\120\12\40\6\0\10\40\10\0"+
    "\2\40\5\0\1\40\1\0\15\40\6\0\3\40\1\121"+
    "\4\40\10\0\2\40\5\0\1\40\1\0\15\40\6\0"+
    "\1\122\7\40\10\0\2\40\5\0\1\40\1\0\1\123"+
    "\14\40\6\0\10\40\10\0\2\40\5\0\1\40\1\0"+
    "\15\40\6\0\5\40\1\124\2\40\10\0\2\40\5\0"+
    "\1\40\1\0\15\40\6\0\3\40\1\125\4\40\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2464];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\2\11\20\1\7\11"+
    "\1\1\2\0\1\11\6\1\2\11\6\1\1\0\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[85];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public static final String TOKENS_PATH = "output\\Tokens.txt";

    public static final String TOKENS_ERROR_PATH = "output\\Error_Tokens.txt";

    private static BufferedWriter out;
    
    /**
    * closes tokesn file for a syntax error
    */
    public void closeTokensFile(int line, int column){
        try{
            out.write("Stopped processing tokens due to a syntax error on line : " + line + " and column : "+ column);
            out.close();
        }catch(Exception e){
            System.out.println("Error closing Tokens file : " + e);
            e.printStackTrace();
        }
    }
    
    public int getLine(){
        return yyline + 1;
    }

    public int getColumn(){
        return yycolumn + 1;
    }

    public void writeToken(Tokens token){
        try{
            out.write(token.toString());
        }catch(Exception e){
            System.out.println("Error writing Tokens : " + e);
            e.printStackTrace();
        }
    }

    private Symbol symbol(int type){
        return new Symbol(type,yyline,yycolumn);
    }

    private Symbol symbol(int type, Object value){
        return new Symbol(type,yyline,yycolumn,value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCup(java.io.Reader in) {
      try{
        out = new BufferedWriter(new FileWriter(TOKENS_PATH, true));
        out.write("--Token Data--\n");
    }catch(Exception e){
        System.out.println("Error writing Tokens : " + e);
        e.printStackTrace();
    }
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
        try {
        writeToken(new Tokens(Tokens.Token.EOF,yyline,yycolumn));
        out.write("-- All token data shown! --");
        out.close();
    }catch(Exception e){
        System.out.println("Error writing Tokens : " + e);
        e.printStackTrace();
    }
  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return symbol(ParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Tokens token = new Tokens(Tokens.Token.ERROR,yyline,yycolumn);
                        writeToken(token);
                        System.out.println("[Lexical error]:" + "[" + getLine() + ":" + getColumn() + "]" + " Unkown symbol: "+"'"+this.yytext()+"'");
                        Writer w = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(TOKENS_ERROR_PATH, true), "utf-8"));
                        w.write("[Lexical error]:" + "[" + getLine() + ":" + getColumn() + "]" + " Unkown symbol: "+"'"+this.yytext()+"'"+".\n");
                        w.close();

                        return symbol(ParserSym.error);
            } 
            // fall through
          case 29: break;
          case 2: 
            { Tokens token = new Tokens(Tokens.Token.NUMBER,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.number, yytext());
            } 
            // fall through
          case 30: break;
          case 3: 
            { /*Ignore*/
            } 
            // fall through
          case 31: break;
          case 4: 
            { Tokens token = new Tokens(Tokens.Token.OP_ARITHMETICAL,yyline,yycolumn);
                        writeToken(token);
                        return symbol(ParserSym.op_arithmetical, yytext());
            } 
            // fall through
          case 32: break;
          case 5: 
            { Tokens token = new Tokens(Tokens.Token.OP_ASSIG,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.op_assig, yytext());
            } 
            // fall through
          case 33: break;
          case 6: 
            { Tokens token = new Tokens(Tokens.Token.OP_LOGICAL,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.op_logical, yytext());
            } 
            // fall through
          case 34: break;
          case 7: 
            { Tokens token = new Tokens(Tokens.Token.OP_RELATIONAL,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.op_relational, yytext());
            } 
            // fall through
          case 35: break;
          case 8: 
            { Tokens token = new Tokens(Tokens.Token.LPAREN,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.lparen, yytext());
            } 
            // fall through
          case 36: break;
          case 9: 
            { Tokens token = new Tokens(Tokens.Token.RPAREN,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.rparen, yytext());
            } 
            // fall through
          case 37: break;
          case 10: 
            { Tokens token = new Tokens(Tokens.Token.LBRACKET,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.lbracket, yytext());
            } 
            // fall through
          case 38: break;
          case 11: 
            { Tokens token = new Tokens(Tokens.Token.RBRACKET,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.rbracket, yytext());
            } 
            // fall through
          case 39: break;
          case 12: 
            { Tokens token = new Tokens(Tokens.Token.NEXTINSTR,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.nextinstr, yytext());
            } 
            // fall through
          case 40: break;
          case 13: 
            { Tokens token = new Tokens(Tokens.Token.SEPARATOR,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.separator, yytext());
            } 
            // fall through
          case 41: break;
          case 14: 
            { Tokens token = new Tokens(Tokens.Token.TWO_POINTS,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.two_points, yytext());
            } 
            // fall through
          case 42: break;
          case 15: 
            { Tokens token = new Tokens(Tokens.Token.ID,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.id, yytext());
            } 
            // fall through
          case 43: break;
          case 16: 
            { Tokens token = new Tokens(Tokens.Token.STRING,yyline,yycolumn);
                        writeToken(token);
                        return symbol(ParserSym.string, yytext());
            } 
            // fall through
          case 44: break;
          case 17: 
            { Tokens token = new Tokens(Tokens.Token.INST_IF,yyline,yycolumn);
                        writeToken(token);
                        return symbol(ParserSym.inst_if, yytext());
            } 
            // fall through
          case 45: break;
          case 18: 
            { Tokens token = new Tokens(Tokens.Token.BOOL,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.bool, yytext());
            } 
            // fall through
          case 46: break;
          case 19: 
            { Tokens token = new Tokens(Tokens.Token.INST_ELSE,yyline,yycolumn);
                        writeToken(token);
                        return symbol(ParserSym.inst_else, yytext());
            } 
            // fall through
          case 47: break;
          case 20: 
            { Tokens token = new Tokens(Tokens.Token.INST_ELSE,yyline,yycolumn);
                        writeToken(token);
                        return symbol(ParserSym.inst_elif, yytext());
            } 
            // fall through
          case 48: break;
          case 21: 
            { Tokens token = new Tokens(Tokens.Token.INST_CALL,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.inst_call, yytext());
            } 
            // fall through
          case 49: break;
          case 22: 
            { Tokens token = new Tokens(Tokens.Token.INST_MAIN,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.inst_main, yytext());
            } 
            // fall through
          case 50: break;
          case 23: 
            { Tokens token = new Tokens(Tokens.Token.DCONST,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.dconst, yytext());
            } 
            // fall through
          case 51: break;
          case 24: 
            { Tokens token = new Tokens(Tokens.Token.INSTR_IN,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.instr_in, yytext());
            } 
            // fall through
          case 52: break;
          case 25: 
            { Tokens token = new Tokens(Tokens.Token.INST_WHILE,yyline,yycolumn);
                        writeToken(token);
                        return symbol(ParserSym.inst_while, yytext());
            } 
            // fall through
          case 53: break;
          case 26: 
            { Tokens token = new Tokens(Tokens.Token.INST_RETURN,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.inst_return, yytext());
            } 
            // fall through
          case 54: break;
          case 27: 
            { Tokens token = new Tokens(Tokens.Token.INSTR_OUT,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.instr_out, yytext());
            } 
            // fall through
          case 55: break;
          case 28: 
            { Tokens token = new Tokens(Tokens.Token.INST_FUNCTION,yyline,yycolumn);
                     writeToken(token);
                     return symbol(ParserSym.inst_function, yytext());
            } 
            // fall through
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
