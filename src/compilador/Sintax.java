
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\005\000\002\033" +
    "\003\000\002\044\007\000\002\003\004\000\002\003\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\005\000\002\005\011\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\011\003\000\002\011\002\000\002" +
    "\006\006\000\002\013\005\000\002\014\005\000\002\014" +
    "\005\000\002\015\005\000\002\015\004\000\002\015\003" +
    "\000\002\016\003\000\002\016\002\000\002\012\003\000" +
    "\002\012\004\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\006\000\002\020\005" +
    "\000\002\017\005\000\002\017\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\005\000\002\021\003\000\002" +
    "\022\007\000\002\023\012\000\002\024\006\000\002\024" +
    "\012\000\002\024\002\000\002\025\011\000\002\026\011" +
    "\000\002\027\007\000\002\027\002\000\002\030\011\000" +
    "\002\031\011\000\002\031\003\000\002\032\006\000\002" +
    "\032\002\000\002\034\007\000\002\035\005\000\002\035" +
    "\003\000\002\010\007\000\002\033\011\000\002\036\010" +
    "\000\002\037\003\000\002\037\002\000\002\040\005\000" +
    "\002\041\006\000\002\041\002\000\002\042\003\000\002" +
    "\042\002\000\002\043\005\000\002\043\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\002\001\002\000\006\027\007\035\011\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\005\274\001\002\000\004\044\267\001\002\000" +
    "\046\005\uffff\016\uffff\021\uffff\023\uffff\025\uffff\026\uffff" +
    "\027\uffff\030\uffff\034\uffff\035\uffff\040\uffff\044\uffff\046" +
    "\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\001\002" +
    "\000\004\005\013\001\002\000\004\036\014\001\002\000" +
    "\004\037\015\001\002\000\042\005\034\016\032\021\035" +
    "\025\045\026\044\027\007\030\uffb4\034\030\035\011\040" +
    "\uffb4\046\024\047\042\050\023\051\041\052\036\053\043" +
    "\001\002\000\044\005\ufff4\016\ufff4\021\ufff4\023\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\034\ufff4\035\ufff4\040\ufff4" +
    "\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\001" +
    "\002\000\044\005\ufff5\016\ufff5\021\ufff5\023\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\034\ufff5\035\ufff5\040\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\001\002" +
    "\000\044\005\ufff9\016\ufff9\021\ufff9\023\ufff9\025\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\034\ufff9\035\ufff9\040\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\001\002\000" +
    "\044\005\ufff7\016\ufff7\021\ufff7\023\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\034\ufff7\035\ufff7\040\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\001\002\000\044" +
    "\005\ufffb\016\ufffb\021\ufffb\023\ufffb\025\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\034\ufffb\035\ufffb\040\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\052\ufffb\053\ufffb\001\002\000\044\005" +
    "\uffee\016\uffee\021\uffee\023\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\034\uffee\035\uffee\040\uffee\046\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\uffee\053\uffee\001\002\000\044\005\ufff0" +
    "\016\ufff0\021\ufff0\023\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\034\ufff0\035\ufff0\040\ufff0\046\ufff0\047\ufff0\050\ufff0" +
    "\051\ufff0\052\ufff0\053\ufff0\001\002\000\044\005\ufffa\016" +
    "\ufffa\021\ufffa\023\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa" +
    "\034\ufffa\035\ufffa\040\ufffa\046\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\001\002\000\044\005\ufff3\016\ufff3" +
    "\021\ufff3\023\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\034" +
    "\ufff3\035\ufff3\040\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3" +
    "\052\ufff3\053\ufff3\001\002\000\042\005\034\016\032\021" +
    "\035\025\045\026\044\027\007\030\uffb5\034\030\035\011" +
    "\040\uffb5\046\024\047\042\050\023\051\041\052\036\053" +
    "\043\001\002\000\004\035\262\001\002\000\044\005\ufffc" +
    "\016\ufffc\021\ufffc\023\ufffc\025\ufffc\026\ufffc\027\ufffc\030" +
    "\ufffc\034\ufffc\035\ufffc\040\ufffc\046\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\052\ufffc\053\ufffc\001\002\000\004\035\237\001" +
    "\002\000\044\005\ufff8\016\ufff8\021\ufff8\023\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\034\ufff8\035\ufff8\040\ufff8\046" +
    "\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\001\002" +
    "\000\012\015\163\031\225\042\227\043\uffe9\001\002\000" +
    "\004\035\203\001\002\000\044\005\uffec\016\uffec\021\uffec" +
    "\023\uffec\025\uffec\026\uffec\027\uffec\030\uffec\034\uffec\035" +
    "\uffec\040\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec" +
    "\053\uffec\001\002\000\044\005\ufff6\016\ufff6\021\ufff6\023" +
    "\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\034\ufff6\035\ufff6" +
    "\040\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053" +
    "\ufff6\001\002\000\006\030\176\040\uffb2\001\002\000\044" +
    "\005\uffed\016\uffed\021\uffed\023\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\034\uffed\035\uffed\040\uffed\046\uffed\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\053\uffed\001\002\000\044\005" +
    "\uffef\016\uffef\021\uffef\023\uffef\025\uffef\026\uffef\027\uffef" +
    "\030\uffef\034\uffef\035\uffef\040\uffef\046\uffef\047\uffef\050" +
    "\uffef\051\uffef\052\uffef\053\uffef\001\002\000\044\005\uffeb" +
    "\016\uffeb\021\uffeb\023\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\034\uffeb\035\uffeb\040\uffeb\046\uffeb\047\uffeb\050\uffeb" +
    "\051\uffeb\052\uffeb\053\uffeb\001\002\000\004\035\157\001" +
    "\002\000\004\035\046\001\002\000\004\035\047\001\002" +
    "\000\010\005\063\010\057\035\062\001\002\000\004\036" +
    "\051\001\002\000\004\037\052\001\002\000\036\005\034" +
    "\016\032\021\035\025\045\026\044\027\007\034\030\035" +
    "\011\046\024\047\042\050\023\051\041\052\036\053\043" +
    "\001\002\000\040\005\034\016\032\021\035\025\045\026" +
    "\044\027\007\034\030\035\011\040\055\046\024\047\042" +
    "\050\023\051\041\052\036\053\043\001\002\000\044\005" +
    "\ufffd\016\ufffd\021\ufffd\023\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\034\ufffd\035\ufffd\040\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\001\002\000\044\005\uffc9" +
    "\016\uffc9\021\uffc9\023\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\034\uffc9\035\uffc9\040\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\001\002\000\006\013\uffd3\036" +
    "\uffd3\001\002\000\006\013\uffd2\036\uffd2\001\002\000\006" +
    "\013\126\036\156\001\002\000\006\013\uffcf\036\uffcf\001" +
    "\002\000\026\004\075\005\066\006\uffe0\007\072\010\070" +
    "\011\100\014\101\032\074\033\077\035\102\001\002\000" +
    "\006\013\uffd1\036\uffd1\001\002\000\014\012\uffd9\036\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\001\002\000\006\013\126\036" +
    "\155\001\002\000\010\012\uffda\013\uffd1\036\uffd1\001\002" +
    "\000\014\012\uffdf\036\uffdf\041\uffdf\042\uffdf\043\uffdf\001" +
    "\002\000\010\012\uffdb\013\uffd2\036\uffd2\001\002\000\014" +
    "\012\uffd8\036\uffd8\041\uffd8\042\uffd8\043\uffd8\001\002\000" +
    "\014\012\uffdc\036\uffdc\041\uffdc\042\uffdc\043\uffdc\001\002" +
    "\000\004\012\152\001\002\000\004\035\136\001\002\000" +
    "\014\012\uffdd\036\uffdd\041\uffdd\042\uffdd\043\uffdd\001\002" +
    "\000\004\006\135\001\002\000\004\035\132\001\002\000" +
    "\014\012\uffd7\036\uffd7\041\uffd7\042\uffd7\043\uffd7\001\002" +
    "\000\004\006\uffe1\001\002\000\026\004\075\005\107\006" +
    "\uffe0\007\072\010\070\011\100\014\101\032\074\033\077" +
    "\035\110\001\002\000\006\014\112\036\131\001\002\000" +
    "\006\013\126\036\127\001\002\000\004\006\125\001\002" +
    "\000\004\014\123\001\002\000\012\012\uffda\013\uffd1\014" +
    "\uffe2\036\uffd1\001\002\000\026\004\075\005\107\006\uffe0" +
    "\007\072\010\070\011\100\014\101\032\074\033\077\035" +
    "\110\001\002\000\006\014\112\036\113\001\002\000\012" +
    "\005\117\006\uffe0\014\101\035\116\001\002\000\006\012" +
    "\uffe7\014\uffe4\001\002\000\006\014\uffe6\036\uffe6\001\002" +
    "\000\004\006\122\001\002\000\012\005\117\006\uffe0\014" +
    "\101\035\116\001\002\000\006\014\uffe2\036\uffe2\001\002" +
    "\000\006\014\112\036\121\001\002\000\006\014\uffe4\036" +
    "\uffe4\001\002\000\006\014\uffe3\036\uffe3\001\002\000\012" +
    "\005\117\006\uffe0\014\101\035\116\001\002\000\006\014" +
    "\uffe5\036\uffe5\001\002\000\006\012\uffde\014\uffe3\001\002" +
    "\000\010\005\063\010\057\035\062\001\002\000\010\012" +
    "\uffd5\013\uffd0\036\uffd0\001\002\000\006\013\uffd4\036\uffd4" +
    "\001\002\000\014\012\uffe7\036\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\001\002\000\004\005\133\001\002\000\004\036\134" +
    "\001\002\000\014\012\uffd6\036\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\001\002\000\014\012\uffde\036\uffde\041\uffde\042\uffde" +
    "\043\uffde\001\002\000\004\005\140\001\002\000\006\036" +
    "\141\042\142\001\002\000\006\036\uffbe\042\uffbe\001\002" +
    "\000\004\041\151\001\002\000\026\004\075\005\143\006" +
    "\uffe0\007\072\010\144\011\100\014\101\032\074\033\077" +
    "\035\146\001\002\000\012\036\uffda\041\uffda\042\uffda\043" +
    "\uffda\001\002\000\012\036\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\001\002\000\006\036\uffbf\042\uffbf\001\002\000\014\005" +
    "\147\006\uffe0\010\057\014\101\035\150\001\002\000\010" +
    "\013\uffd1\014\uffe2\036\uffd1\001\002\000\026\004\075\005" +
    "\107\006\uffe0\007\072\010\070\011\100\014\101\032\074" +
    "\033\077\035\110\001\002\000\014\012\uffc0\036\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\001\002\000\026\004\075\005\143" +
    "\006\uffe0\007\072\010\144\011\100\014\101\032\074\033" +
    "\077\035\146\001\002\000\004\036\154\001\002\000\006" +
    "\013\uffce\036\uffce\001\002\000\006\013\uffd0\036\uffd0\001" +
    "\002\000\012\036\uffd5\041\uffd5\042\uffd5\043\uffd5\001\002" +
    "\000\006\005\162\036\uffc6\001\002\000\004\041\172\001" +
    "\002\000\004\036\166\001\002\000\004\015\163\001\002" +
    "\000\026\004\075\005\143\006\uffe0\007\072\010\144\011" +
    "\100\014\101\032\074\033\077\035\146\001\002\000\004" +
    "\041\165\001\002\000\046\005\uffe8\016\uffe8\021\uffe8\023" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\034\uffe8\035\uffe8" +
    "\040\uffe8\041\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052" +
    "\uffe8\053\uffe8\001\002\000\004\037\167\001\002\000\036" +
    "\005\034\016\032\021\035\025\045\026\044\027\007\034" +
    "\030\035\011\046\024\047\042\050\023\051\041\052\036" +
    "\053\043\001\002\000\040\005\034\016\032\021\035\025" +
    "\045\026\044\027\007\034\030\035\011\040\171\046\024" +
    "\047\042\050\023\051\041\052\036\053\043\001\002\000" +
    "\044\005\uffc8\016\uffc8\021\uffc8\023\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\034\uffc8\035\uffc8\040\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\001\002\000\004" +
    "\035\047\001\002\000\004\041\174\001\002\000\012\005" +
    "\117\006\uffe0\014\101\035\116\001\002\000\006\014\112" +
    "\036\uffc7\001\002\000\026\004\075\005\143\006\uffe0\007" +
    "\072\010\144\011\100\014\101\032\074\033\077\035\146" +
    "\001\002\000\004\040\200\001\002\000\046\005\uffbc\016" +
    "\uffbc\021\uffbc\023\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\034\uffbc\035\uffbc\040\uffbc\044\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\001\002\000\004\041\202" +
    "\001\002\000\004\040\uffb3\001\002\000\026\004\075\005" +
    "\143\006\uffe0\007\072\010\144\011\100\014\101\032\074" +
    "\033\077\035\146\001\002\000\004\036\205\001\002\000" +
    "\004\037\206\001\002\000\010\022\207\024\212\040\uffc1" +
    "\001\002\000\026\004\075\005\143\006\uffe0\007\072\010" +
    "\144\011\100\014\101\032\074\033\077\035\146\001\002" +
    "\000\004\040\uffc3\001\002\000\004\040\216\001\002\000" +
    "\036\005\034\016\032\021\035\025\045\026\044\027\007" +
    "\034\030\035\011\046\024\047\042\050\023\051\041\052" +
    "\036\053\043\001\002\000\040\005\034\016\032\021\035" +
    "\023\214\025\045\026\044\027\007\034\030\035\011\046" +
    "\024\047\042\050\023\051\041\052\036\053\043\001\002" +
    "\000\004\041\215\001\002\000\004\040\uffc2\001\002\000" +
    "\044\005\uffc5\016\uffc5\021\uffc5\023\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\030\uffc5\034\uffc5\035\uffc5\040\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\001\002\000\004" +
    "\043\220\001\002\000\036\005\034\016\032\021\035\025" +
    "\045\026\044\027\007\034\030\035\011\046\024\047\042" +
    "\050\023\051\041\052\036\053\043\001\002\000\040\005" +
    "\034\016\032\021\035\023\222\025\045\026\044\027\007" +
    "\034\030\035\011\046\024\047\042\050\023\051\041\052" +
    "\036\053\043\001\002\000\004\041\223\001\002\000\010" +
    "\022\207\024\212\040\uffc1\001\002\000\004\040\uffc4\001" +
    "\002\000\004\043\uffea\001\002\000\004\043\232\001\002" +
    "\000\020\005\231\046\024\047\042\050\023\051\041\052" +
    "\036\053\043\001\002\000\044\005\ufff2\016\ufff2\021\ufff2" +
    "\023\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\034\ufff2\035" +
    "\ufff2\040\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\001\002\000\010\031\225\042\227\043\uffe9\001" +
    "\002\000\004\005\233\001\002\000\004\015\234\001\002" +
    "\000\026\004\075\005\143\006\uffe0\007\072\010\144\011" +
    "\100\014\101\032\074\033\077\035\146\001\002\000\004" +
    "\041\236\001\002\000\044\005\ufff1\016\ufff1\021\ufff1\023" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\034\ufff1\035\ufff1" +
    "\040\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\001\002\000\004\035\047\001\002\000\004\036\241" +
    "\001\002\000\004\037\242\001\002\000\036\005\034\016" +
    "\032\021\035\025\045\026\044\027\007\034\030\035\011" +
    "\046\024\047\042\050\023\051\041\052\036\053\043\001" +
    "\002\000\040\005\034\016\032\021\035\025\045\026\044" +
    "\027\007\034\030\035\011\040\244\046\024\047\042\050" +
    "\023\051\041\052\036\053\043\001\002\000\050\005\uffca" +
    "\016\uffca\017\247\020\246\021\uffca\023\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\034\uffca\035\uffca\040\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\001\002\000" +
    "\044\005\uffcd\016\uffcd\021\uffcd\023\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\034\uffcd\035\uffcd\040\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\001\002\000\004" +
    "\037\257\001\002\000\004\035\250\001\002\000\004\035" +
    "\047\001\002\000\004\036\252\001\002\000\004\037\253" +
    "\001\002\000\036\005\034\016\032\021\035\025\045\026" +
    "\044\027\007\034\030\035\011\046\024\047\042\050\023" +
    "\051\041\052\036\053\043\001\002\000\040\005\034\016" +
    "\032\021\035\025\045\026\044\027\007\034\030\035\011" +
    "\040\255\046\024\047\042\050\023\051\041\052\036\053" +
    "\043\001\002\000\050\005\uffca\016\uffca\017\247\020\246" +
    "\021\uffca\023\uffca\025\uffca\026\uffca\027\uffca\030\uffca\034" +
    "\uffca\035\uffca\040\uffca\046\uffca\047\uffca\050\uffca\051\uffca" +
    "\052\uffca\053\uffca\001\002\000\044\005\uffcb\016\uffcb\021" +
    "\uffcb\023\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\034\uffcb" +
    "\035\uffcb\040\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\001\002\000\036\005\034\016\032\021\035" +
    "\025\045\026\044\027\007\034\030\035\011\046\024\047" +
    "\042\050\023\051\041\052\036\053\043\001\002\000\040" +
    "\005\034\016\032\021\035\025\045\026\044\027\007\034" +
    "\030\035\011\040\261\046\024\047\042\050\023\051\041" +
    "\052\036\053\043\001\002\000\044\005\uffcc\016\uffcc\021" +
    "\uffcc\023\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\034\uffcc" +
    "\035\uffcc\040\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\001\002\000\026\004\075\005\143\006\uffe0" +
    "\007\072\010\144\011\100\014\101\032\074\033\077\035" +
    "\146\001\002\000\004\036\264\001\002\000\004\041\265" +
    "\001\002\000\044\005\uffbd\016\uffbd\021\uffbd\023\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\034\uffbd\035\uffbd\040\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\001" +
    "\002\000\004\002\000\001\002\000\004\035\270\001\002" +
    "\000\004\045\271\001\002\000\004\036\272\001\002\000" +
    "\004\041\273\001\002\000\004\002\ufffe\001\002\000\004" +
    "\005\275\001\002\000\004\035\276\001\002\000\006\005" +
    "\301\036\uffb9\001\002\000\004\036\uffba\001\002\000\004" +
    "\036\310\001\002\000\004\005\302\001\002\000\006\036" +
    "\uffb6\042\303\001\002\000\004\005\305\001\002\000\004" +
    "\036\uffb8\001\002\000\004\005\306\001\002\000\006\036" +
    "\uffb6\042\303\001\002\000\004\036\uffb7\001\002\000\004" +
    "\005\uffbb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\006\002\004\045\003\001\001\000\006\033" +
    "\007\036\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\026\004\030\005\021\006\036\007\016\010" +
    "\015\023\024\025\017\026\020\030\032\033\025\036\011" +
    "\042\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\053\005\021\006\036\007\016\010\015" +
    "\023\024\025\017\026\020\030\032\033\025\036\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\047" +
    "\001\001\000\010\017\057\021\055\022\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\052\004\030" +
    "\005\021\006\036\007\016\010\015\023\024\025\017\026" +
    "\020\030\032\033\025\036\011\001\001\000\030\004\053" +
    "\005\021\006\036\007\016\010\015\023\024\025\017\026" +
    "\020\030\032\033\025\036\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\012\072\013\066" +
    "\016\075\017\064\020\063\021\055\022\060\034\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\012\072" +
    "\013\066\014\102\015\105\016\104\017\103\020\063\021" +
    "\055\022\060\034\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\012\072\013\066\014\110\015\105\016\104" +
    "\017\103\020\063\021\055\022\060\034\070\001\001\000" +
    "\002\001\001\000\006\015\113\016\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\117\015\105\016\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\123\016\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\127\022\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\144\013\066\016\075\020\063\034" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\102\015\105\016\114\017\057\021" +
    "\055\022\060\001\001\000\002\001\001\000\026\012\072" +
    "\013\066\014\117\015\105\016\104\017\064\020\063\021" +
    "\055\022\060\034\070\001\001\000\002\001\001\000\014" +
    "\012\152\013\066\016\075\020\063\034\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\157\027\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\163" +
    "\013\066\016\075\020\063\034\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\167" +
    "\004\030\005\021\006\036\007\016\010\015\023\024\025" +
    "\017\026\020\030\032\033\025\036\011\001\001\000\030" +
    "\004\053\005\021\006\036\007\016\010\015\023\024\025" +
    "\017\026\020\030\032\033\025\036\011\001\001\000\002" +
    "\001\001\000\004\020\172\001\001\000\002\001\001\000" +
    "\010\014\174\015\105\016\114\001\001\000\002\001\001" +
    "\000\014\012\200\013\066\016\075\020\063\034\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\203\013\066\016\075\020" +
    "\063\034\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\210\032\207\001\001\000\014\012\216\013" +
    "\066\016\075\020\063\034\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\212\004\030\005\021\006" +
    "\036\007\016\010\015\023\024\025\017\026\020\030\032" +
    "\033\025\036\011\001\001\000\030\004\053\005\021\006" +
    "\036\007\016\010\015\023\024\025\017\026\020\030\032" +
    "\033\025\036\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\220" +
    "\004\030\005\021\006\036\007\016\010\015\023\024\025" +
    "\017\026\020\030\032\033\025\036\011\001\001\000\030" +
    "\004\053\005\021\006\036\007\016\010\015\023\024\025" +
    "\017\026\020\030\032\033\025\036\011\001\001\000\002" +
    "\001\001\000\006\031\223\032\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\227" +
    "\001\001\000\002\001\001\000\004\011\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\234\013\066" +
    "\016\075\020\063\034\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\242\004\030\005\021\006" +
    "\036\007\016\010\015\023\024\025\017\026\020\030\032" +
    "\033\025\036\011\001\001\000\030\004\053\005\021\006" +
    "\036\007\016\010\015\023\024\025\017\026\020\030\032" +
    "\033\025\036\011\001\001\000\004\024\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\253\004\030\005\021\006\036\007\016\010\015" +
    "\023\024\025\017\026\020\030\032\033\025\036\011\001" +
    "\001\000\030\004\053\005\021\006\036\007\016\010\015" +
    "\023\024\025\017\026\020\030\032\033\025\036\011\001" +
    "\001\000\004\024\255\001\001\000\002\001\001\000\032" +
    "\003\257\004\030\005\021\006\036\007\016\010\015\023" +
    "\024\025\017\026\020\030\032\033\025\036\011\001\001" +
    "\000\030\004\053\005\021\006\036\007\016\010\015\023" +
    "\024\025\017\026\020\030\032\033\025\036\011\001\001" +
    "\000\002\001\001\000\014\012\262\013\066\016\075\020" +
    "\063\034\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\277\040\276\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\306" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
    this.s = s;
    }

    public Symbol getS(){
    return this.s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= STARTS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // STARTS ::= INIT DEFINE_FUNCTION CALL_MAIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STARTS",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DEFINE_FUNCTION ::= lparen 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFINE_FUNCTION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CALL_MAIN ::= inst_main lparen id_main rparen nextinstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_MAIN",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTIONS ::= INSTRUCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= DECLARATIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= INSTRUCTION_IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= INSTRUCTION_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= INSTRUCTION_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= INSTRUCTION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= OPERATOR_ASSIG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= INSTRUCTION_IN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= INSTRUCTION_OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= DEFINE_FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARATIONS ::= id separator DECLARATIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARATIONS ::= id CONSTANT two_points id op_assig VALUE nextinstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARATIONS ::= spc_asgmul 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARATIONS ::= spc_asgdec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARATIONS ::= spc_dec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARATIONS ::= spc_asgdiv 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARATIONS ::= spc_asginc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARATIONS ::= spc_inc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONSTANT ::= dconst 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONSTANT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSTANT",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERATOR_ASSIG ::= id op_assig VALUE nextinstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATOR_ASSIG",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INITIALIZE_ARITHMETICAL_OP ::= lparen ARITHMETICAL_OP rparen 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INITIALIZE_ARITHMETICAL_OP",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARITHMETICAL_OP ::= ARITHMETICAL_OP op_arithmetical ARITHMETICAL_VALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OP",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARITHMETICAL_OP ::= ARITHMETICAL_VALUE op_arithmetical ARITHMETICAL_VALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OP",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ARITHMETICAL_VALUE ::= lparen ARITHMETICAL_OP rparen 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARITHMETICAL_VALUE ::= POS_NEG number 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARITHMETICAL_VALUE ::= id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // POS_NEG ::= op_arithmetical 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POS_NEG",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // POS_NEG ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POS_NEG",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALUE ::= INITIALIZE_ARITHMETICAL_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALUE ::= POS_NEG number 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALUE ::= character 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALUE ::= string 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALUE ::= bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALUE ::= id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALUE ::= INITIALIZE_BOOLEAN_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALUE ::= CALL_FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALUE ::= Void 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALUE ::= instr_in lparen id rparen 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INITIALIZE_BOOLEAN_OP ::= lparen BOOLEAN_OP rparen 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INITIALIZE_BOOLEAN_OP",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BOOLEAN_OP ::= BOOLEAN_OP op_logical BOOLEAN_VALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BOOLEAN_OP ::= BOOLEAN_VALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BOOLEAN_VALUE ::= bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BOOLEAN_VALUE ::= id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BOOLEAN_VALUE ::= lparen BOOLEAN_OP rparen 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BOOLEAN_VALUE ::= VALUE_COMPARISON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALUE_COMPARISON ::= lparen VALUE op_relational VALUE rparen 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE_COMPARISON",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INSTRUCTION_IF ::= inst_if lparen INITIALIZE_BOOLEAN_OP rparen lbracket INSTRUCTIONS rbracket OTHER_CASES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_IF",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OTHER_CASES ::= inst_else lbracket INSTRUCTIONS rbracket 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OTHER_CASES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OTHER_CASES ::= inst_elif lparen INITIALIZE_BOOLEAN_OP rparen lbracket INSTRUCTIONS rbracket OTHER_CASES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OTHER_CASES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OTHER_CASES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OTHER_CASES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INSTRUCTION_WHILE ::= inst_while lparen INITIALIZE_BOOLEAN_OP rparen lbracket INSTRUCTIONS rbracket 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_WHILE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INSTRUCTION_FOR ::= inst_for lparen INTERNAL_FOR rparen lbracket INSTRUCTIONS rbracket 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_FOR",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INTERNAL_FOR ::= OPERATOR_ASSIG nextinstr INITIALIZE_BOOLEAN_OP nextinstr ARITHMETICAL_OP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTERNAL_FOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INTERNAL_FOR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTERNAL_FOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INSTRUCTION_SWITCH ::= inst_switch lparen VALUE rparen lbracket CASES rbracket 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASES ::= inst_case VALUE two_points INSTRUCTIONS inst_break nextinstr CASES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASES ::= CASE_DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASE_DEFAULT ::= inst_default INSTRUCTIONS inst_break nextinstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_DEFAULT",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASE_DEFAULT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE_DEFAULT",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CALL_FUNCTION ::= inst_call lparen CALL_BODY rparen nextinstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CALL_BODY ::= CALL_BODY separator VALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_BODY",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CALL_BODY ::= id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_BODY",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INSTRUCTION_OUT ::= instr_out lparen VALUE rparen nextinstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OUT",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DEFINE_FUNCTION ::= FUNCTION_BEG id rparen lbracket FUNCTION_BODY RETURN_TYPE rbracket 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFINE_FUNCTION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCTION_BEG ::= inst_function id id lparen PARAMETERS rparen 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION_BEG",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMETERS ::= HAS_PARAMETERS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETERS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // HAS_PARAMETERS ::= id id HAS_MORE_PARAMETERS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HAS_PARAMETERS",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // HAS_MORE_PARAMETERS ::= separator id id HAS_MORE_PARAMETERS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HAS_MORE_PARAMETERS",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // HAS_MORE_PARAMETERS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HAS_MORE_PARAMETERS",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCTION_BODY ::= INSTRUCTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCTION_BODY ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RETURN_TYPE ::= inst_return VALUE nextinstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN_TYPE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RETURN_TYPE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN_TYPE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
