
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Sin;

import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import Symbols.*;
import SymbolsTable.*;
import SymbolsTable.Type.TYPE;
import SymbolsTable.Type.SUBJACENTTYPE;
import Lex.*;
import backend.*;
import java.util.Stack;
import backend.Instruction.Code;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\004\006\000\002\005\004\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\005\000\002\007\011\000\002\013\003" +
    "\000\002\013\002\000\002\010\006\000\002\015\005\000" +
    "\002\016\005\000\002\016\005\000\002\017\005\000\002" +
    "\017\004\000\002\017\003\000\002\020\003\000\002\020" +
    "\003\000\002\014\003\000\002\014\004\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\006\000\002\022\005\000\002" +
    "\021\005\000\002\021\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\005\000\002\023\003\000\002\024\007" +
    "\000\002\026\003\000\002\030\002\000\002\027\002\000" +
    "\002\031\012\000\002\025\003\000\002\032\013\000\002" +
    "\032\002\000\002\033\010\000\002\033\003\000\002\034" +
    "\003\000\002\035\011\000\002\036\011\000\002\037\007" +
    "\000\002\037\002\000\002\040\011\000\002\041\011\000" +
    "\002\041\003\000\002\042\006\000\002\042\002\000\002" +
    "\044\006\000\002\044\005\000\002\045\005\000\002\045" +
    "\005\000\002\012\007\000\002\043\011\000\002\046\010" +
    "\000\002\047\003\000\002\047\002\000\002\050\006\000" +
    "\002\051\007\000\002\051\002\000\002\052\003\000\002" +
    "\052\002\000\002\053\005\000\002\053\002\000\002\054" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\004\042\uffff\001\002\000\004\042\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\002\000\001\002\000\004\035\011\001\002\000" +
    "\022\004\030\014\027\017\032\023\036\024\035\025\022" +
    "\030\033\032\025\001\002\000\030\004\ufff4\014\ufff4\017" +
    "\ufff4\021\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\030\ufff4" +
    "\032\ufff4\036\ufff4\001\002\000\030\004\ufff5\014\ufff5\017" +
    "\ufff5\021\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\030\ufff5" +
    "\032\ufff5\036\ufff5\001\002\000\030\004\ufff9\014\ufff9\017" +
    "\ufff9\021\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\030\ufff9" +
    "\032\ufff9\036\ufff9\001\002\000\030\004\ufff7\014\ufff7\017" +
    "\ufff7\021\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\030\ufff7" +
    "\032\ufff7\036\ufff7\001\002\000\030\004\ufffb\014\ufffb\017" +
    "\ufffb\021\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\030\ufffb" +
    "\032\ufffb\036\ufffb\001\002\000\030\004\ufffa\014\ufffa\017" +
    "\ufffa\021\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\030\ufffa" +
    "\032\ufffa\036\ufffa\001\002\000\030\004\ufff3\014\ufff3\017" +
    "\ufff3\021\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\030\ufff3" +
    "\032\ufff3\036\ufff3\001\002\000\030\004\ufff2\014\ufff2\017" +
    "\ufff2\021\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\030\ufff2" +
    "\032\ufff2\036\ufff2\001\002\000\004\004\273\001\002\000" +
    "\004\004\261\001\002\000\024\004\030\014\027\017\032" +
    "\023\036\024\035\025\022\030\033\032\025\036\260\001" +
    "\002\000\004\033\254\001\002\000\030\004\ufffc\014\ufffc" +
    "\017\ufffc\021\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\030" +
    "\ufffc\032\ufffc\036\ufffc\001\002\000\004\033\041\001\002" +
    "\000\012\013\145\027\212\040\214\041\uffee\001\002\000" +
    "\030\004\ufff8\014\ufff8\017\ufff8\021\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\030\ufff8\032\ufff8\036\ufff8\001\002\000" +
    "\004\033\170\001\002\000\004\004\161\001\002\000\030" +
    "\004\ufff6\014\ufff6\017\ufff6\021\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\030\ufff6\032\ufff6\036\ufff6\001\002\000\004" +
    "\033\141\001\002\000\004\033\uffb1\001\002\000\004\033" +
    "\041\001\002\000\004\033\uffcb\001\002\000\010\004\056" +
    "\007\052\033\055\001\002\000\004\035\uffd3\001\002\000" +
    "\004\035\uffd4\001\002\000\004\035\045\001\002\000\022" +
    "\004\030\014\027\017\032\023\036\024\035\025\022\030" +
    "\033\032\025\001\002\000\024\004\030\014\027\017\032" +
    "\023\036\024\035\025\022\030\033\032\025\036\050\001" +
    "\002\000\030\004\ufffd\014\ufffd\017\ufffd\021\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\030\ufffd\032\ufffd\036\ufffd\001" +
    "\002\000\030\004\uffca\014\uffca\017\uffca\021\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\030\uffca\032\uffca\036\uffca\001" +
    "\002\000\006\011\uffda\034\uffda\001\002\000\006\011\uffd9" +
    "\034\uffd9\001\002\000\006\011\117\034\140\001\002\000" +
    "\006\011\uffd6\034\uffd6\001\002\000\022\004\061\005\uffb1" +
    "\006\067\007\064\012\072\030\033\031\071\033\073\001" +
    "\002\000\006\011\uffd8\034\uffd8\001\002\000\014\010\uffdf" +
    "\034\uffdf\037\uffdf\040\uffdf\041\uffdf\001\002\000\006\011" +
    "\117\034\137\001\002\000\010\010\uffe0\011\uffd8\034\uffd8" +
    "\001\002\000\014\010\uffe4\034\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\001\002\000\004\005\uffe5\001\002\000\010\010\uffe1" +
    "\011\uffd9\034\uffd9\001\002\000\014\010\uffde\034\uffde\037" +
    "\uffde\040\uffde\041\uffde\001\002\000\004\010\127\001\002" +
    "\000\014\010\uffe2\034\uffe2\037\uffe2\040\uffe2\041\uffe2\001" +
    "\002\000\004\005\126\001\002\000\004\033\123\001\002" +
    "\000\004\005\uffe6\001\002\000\022\004\100\005\uffb1\006" +
    "\067\007\064\012\072\030\033\031\071\033\101\001\002" +
    "\000\006\012\103\034\122\001\002\000\006\011\117\034" +
    "\120\001\002\000\004\005\116\001\002\000\004\012\114" +
    "\001\002\000\012\010\uffe0\011\uffd8\012\uffe7\034\uffd8\001" +
    "\002\000\022\004\100\005\uffb1\006\067\007\064\012\072" +
    "\030\033\031\071\033\101\001\002\000\006\012\103\034" +
    "\104\001\002\000\012\004\110\005\uffb1\012\072\033\107" +
    "\001\002\000\006\010\uffec\012\uffe9\001\002\000\006\012" +
    "\uffeb\034\uffeb\001\002\000\004\005\113\001\002\000\012" +
    "\004\110\005\uffb1\012\072\033\107\001\002\000\006\012" +
    "\uffe7\034\uffe7\001\002\000\006\012\103\034\112\001\002" +
    "\000\006\012\uffe9\034\uffe9\001\002\000\006\012\uffe8\034" +
    "\uffe8\001\002\000\012\004\110\005\uffb1\012\072\033\107" +
    "\001\002\000\006\012\uffea\034\uffea\001\002\000\006\010" +
    "\uffe3\012\uffe8\001\002\000\010\004\056\007\052\033\055" +
    "\001\002\000\010\010\uffdc\011\uffd7\034\uffd7\001\002\000" +
    "\006\011\uffdb\034\uffdb\001\002\000\014\010\uffec\034\uffec" +
    "\037\uffec\040\uffec\041\uffec\001\002\000\004\004\124\001" +
    "\002\000\004\034\125\001\002\000\014\010\uffdd\034\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\001\002\000\014\010\uffe3\034" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\001\002\000\022\004\130" +
    "\005\uffb1\006\067\007\131\012\072\030\033\031\071\033" +
    "\133\001\002\000\012\034\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\001\002\000\012\034\uffe1\037\uffe1\040\uffe1\041\uffe1\001" +
    "\002\000\004\034\136\001\002\000\014\004\134\005\uffb1" +
    "\007\052\012\072\033\135\001\002\000\010\011\uffd8\012" +
    "\uffe7\034\uffd8\001\002\000\022\004\100\005\uffb1\006\067" +
    "\007\064\012\072\030\033\031\071\033\101\001\002\000" +
    "\006\011\uffd5\034\uffd5\001\002\000\006\011\uffd7\034\uffd7" +
    "\001\002\000\014\034\uffdc\035\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\001\002\000\006\004\144\034\uffc7\001\002\000\004" +
    "\037\154\001\002\000\004\034\150\001\002\000\004\013" +
    "\145\001\002\000\022\004\130\005\uffb1\006\067\007\131" +
    "\012\072\030\033\031\071\033\133\001\002\000\004\037" +
    "\147\001\002\000\032\004\uffed\014\uffed\017\uffed\021\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\030\uffed\032\uffed\036" +
    "\uffed\037\uffed\001\002\000\004\035\151\001\002\000\022" +
    "\004\030\014\027\017\032\023\036\024\035\025\022\030" +
    "\033\032\025\001\002\000\024\004\030\014\027\017\032" +
    "\023\036\024\035\025\022\030\033\032\025\036\153\001" +
    "\002\000\030\004\uffc9\014\uffc9\017\uffc9\021\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\030\uffc9\032\uffc9\036\uffc9\001" +
    "\002\000\004\033\041\001\002\000\004\037\156\001\002" +
    "\000\012\004\110\005\uffb1\012\072\033\107\001\002\000" +
    "\006\012\103\034\uffc8\001\002\000\006\034\165\040\166" +
    "\001\002\000\004\033\162\001\002\000\024\004\130\005" +
    "\uffb1\006\067\007\131\012\072\030\033\031\071\033\133" +
    "\034\164\001\002\000\006\034\uffbe\040\uffbe\001\002\000" +
    "\042\004\uffc1\010\uffc1\014\uffc1\017\uffc1\021\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\030\uffc1\032\uffc1\034\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\041\uffc1\001\002\000\042\004\uffc0" +
    "\010\uffc0\014\uffc0\017\uffc0\021\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\030\uffc0\032\uffc0\034\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\001\002\000\022\004\130\005\uffb1\006" +
    "\067\007\131\012\072\030\033\031\071\033\133\001\002" +
    "\000\006\034\uffbf\040\uffbf\001\002\000\022\004\130\005" +
    "\uffb1\006\067\007\131\012\072\030\033\031\071\033\133" +
    "\001\002\000\004\034\172\001\002\000\004\035\173\001" +
    "\002\000\010\020\174\022\177\036\uffc2\001\002\000\022" +
    "\004\130\005\uffb1\006\067\007\131\012\072\030\033\031" +
    "\071\033\133\001\002\000\004\036\uffc4\001\002\000\004" +
    "\036\203\001\002\000\022\004\030\014\027\017\032\023" +
    "\036\024\035\025\022\030\033\032\025\001\002\000\024" +
    "\004\030\014\027\017\032\021\201\023\036\024\035\025" +
    "\022\030\033\032\025\001\002\000\004\037\202\001\002" +
    "\000\004\036\uffc3\001\002\000\030\004\uffc6\014\uffc6\017" +
    "\uffc6\021\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\030\uffc6" +
    "\032\uffc6\036\uffc6\001\002\000\004\041\205\001\002\000" +
    "\022\004\030\014\027\017\032\023\036\024\035\025\022" +
    "\030\033\032\025\001\002\000\024\004\030\014\027\017" +
    "\032\021\207\023\036\024\035\025\022\030\033\032\025" +
    "\001\002\000\004\037\210\001\002\000\010\020\174\022" +
    "\177\036\uffc2\001\002\000\004\036\uffc5\001\002\000\004" +
    "\041\uffef\001\002\000\004\041\217\001\002\000\004\004" +
    "\216\001\002\000\030\004\ufff1\014\ufff1\017\ufff1\021\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\026\ufff1\030\ufff1\032\ufff1\036" +
    "\ufff1\001\002\000\010\027\212\040\214\041\uffee\001\002" +
    "\000\004\004\220\001\002\000\004\013\221\001\002\000" +
    "\022\004\130\005\uffb1\006\067\007\131\012\072\030\033" +
    "\031\071\033\133\001\002\000\004\037\223\001\002\000" +
    "\030\004\ufff0\014\ufff0\017\ufff0\021\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\030\ufff0\032\ufff0\036\ufff0\001\002\000" +
    "\004\035\uffd3\001\002\000\004\035\226\001\002\000\022" +
    "\004\030\014\027\017\032\023\036\024\035\025\022\030" +
    "\033\032\025\001\002\000\024\004\030\014\027\017\032" +
    "\023\036\024\035\025\022\030\033\032\025\036\230\001" +
    "\002\000\034\004\uffce\014\uffce\015\uffb1\016\uffce\017\uffce" +
    "\021\uffce\023\uffce\024\uffce\025\uffce\026\uffce\030\uffce\032" +
    "\uffce\036\uffce\001\002\000\032\004\uffd2\014\uffd2\016\uffb1" +
    "\017\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\030" +
    "\uffd2\032\uffd2\036\uffd2\001\002\000\006\015\uffd0\016\uffd0" +
    "\001\002\000\004\015\234\001\002\000\004\033\uffd2\001" +
    "\002\000\004\033\041\001\002\000\004\035\uffd3\001\002" +
    "\000\004\035\240\001\002\000\022\004\030\014\027\017" +
    "\032\023\036\024\035\025\022\030\033\032\025\001\002" +
    "\000\024\004\030\014\027\017\032\023\036\024\035\025" +
    "\022\030\033\032\025\036\242\001\002\000\034\004\uffce" +
    "\014\uffce\015\uffb1\016\uffce\017\uffce\021\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\030\uffce\032\uffce\036\uffce\001\002" +
    "\000\032\004\uffcf\014\uffcf\016\uffcf\017\uffcf\021\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\030\uffcf\032\uffcf\036\uffcf" +
    "\001\002\000\030\004\uffd1\014\uffd1\017\uffd1\021\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\030\uffd1\032\uffd1\036\uffd1" +
    "\001\002\000\030\004\uffcc\014\uffcc\017\uffcc\021\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\032\uffcc\036\uffcc" +
    "\001\002\000\004\016\247\001\002\000\004\035\uffd2\001" +
    "\002\000\004\035\251\001\002\000\022\004\030\014\027" +
    "\017\032\023\036\024\035\025\022\030\033\032\025\001" +
    "\002\000\024\004\030\014\027\017\032\023\036\024\035" +
    "\025\022\030\033\032\025\036\253\001\002\000\030\004" +
    "\uffcd\014\uffcd\017\uffcd\021\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\030\uffcd\032\uffcd\036\uffcd\001\002\000\022\004" +
    "\130\005\uffb1\006\067\007\131\012\072\030\033\031\071" +
    "\033\133\001\002\000\004\034\256\001\002\000\004\037" +
    "\257\001\002\000\030\004\uffbd\014\uffbd\017\uffbd\021\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\030\uffbd\032\uffbd\036" +
    "\uffbd\001\002\000\004\002\ufffe\001\002\000\004\034\262" +
    "\001\002\000\004\035\263\001\002\000\026\004\030\014" +
    "\027\017\032\023\036\024\035\025\022\026\uffb4\030\033" +
    "\032\025\036\uffb4\001\002\000\026\004\030\014\027\017" +
    "\032\023\036\024\035\025\022\026\uffb5\030\033\032\025" +
    "\036\uffb5\001\002\000\006\026\266\036\uffb2\001\002\000" +
    "\022\004\130\005\uffb1\006\067\007\131\012\072\030\033" +
    "\031\071\033\133\001\002\000\004\036\270\001\002\000" +
    "\030\004\uffbc\014\uffbc\017\uffbc\021\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\030\uffbc\032\uffbc\036\uffbc\001\002\000" +
    "\004\037\272\001\002\000\004\036\uffb3\001\002\000\004" +
    "\004\274\001\002\000\004\033\275\001\002\000\006\004" +
    "\300\034\uffb9\001\002\000\004\034\uffba\001\002\000\004" +
    "\034\311\001\002\000\004\041\301\001\002\000\004\004" +
    "\302\001\002\000\006\034\uffb6\040\303\001\002\000\004" +
    "\004\305\001\002\000\004\034\uffb8\001\002\000\004\041" +
    "\306\001\002\000\004\004\307\001\002\000\006\034\uffb6" +
    "\040\303\001\002\000\004\034\uffb7\001\002\000\004\004" +
    "\uffbb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\006\002\004\003\003\001\001\000\004\004" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\023\006\025\007" +
    "\015\010\033\011\012\012\011\031\016\035\013\036\014" +
    "\040\030\043\020\044\017\046\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\006\046\007\015\010\033\011\012\012\011\031\016\035" +
    "\013\036\014\040\030\043\020\044\017\046\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\042\026" +
    "\223\001\001\000\004\013\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\036\054\037\001\001" +
    "\000\006\022\042\026\041\001\001\000\002\001\001\000" +
    "\010\021\052\023\050\024\053\001\001\000\004\030\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\005" +
    "\045\006\025\007\015\010\033\011\012\012\011\031\016" +
    "\035\013\036\014\040\030\043\020\044\017\046\022\001" +
    "\001\000\032\006\046\007\015\010\033\011\012\012\011" +
    "\031\016\035\013\036\014\040\030\043\020\044\017\046" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\014\065\015\061\020\067\021\057\022\056" +
    "\023\050\024\053\044\064\054\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\014" +
    "\065\015\061\016\073\017\076\020\075\021\074\022\056" +
    "\023\050\024\053\044\064\054\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\014\065\015\061\016\101\017" +
    "\076\020\075\021\074\022\056\023\050\024\053\044\064" +
    "\054\062\001\001\000\002\001\001\000\010\017\104\020" +
    "\105\054\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\110\017\076\020\105\054" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\114\020\105\054" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\120\024\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\131\015" +
    "\061\020\067\022\056\044\064\054\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\016" +
    "\073\017\076\020\105\021\052\023\050\024\053\054\062" +
    "\001\001\000\002\001\001\000\030\014\065\015\061\016" +
    "\110\017\076\020\075\021\057\022\056\023\050\024\053" +
    "\044\064\054\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\141\037\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\145\015\061\020\067\022\056\044\064\054\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\151\006\025\007\015\010\033\011\012" +
    "\012\011\031\016\035\013\036\014\040\030\043\020\044" +
    "\017\046\022\001\001\000\032\006\046\007\015\010\033" +
    "\011\012\012\011\031\016\035\013\036\014\040\030\043" +
    "\020\044\017\046\022\001\001\000\002\001\001\000\004" +
    "\022\154\001\001\000\002\001\001\000\012\016\156\017" +
    "\076\020\105\054\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\014\162\015\061\020" +
    "\067\022\056\044\064\054\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\166\015" +
    "\061\020\067\022\056\044\064\054\062\001\001\000\002" +
    "\001\001\000\016\014\170\015\061\020\067\022\056\044" +
    "\064\054\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\175\042\174\001\001\000\016\014\203\015" +
    "\061\020\067\022\056\044\064\054\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\177\006\025\007" +
    "\015\010\033\011\012\012\011\031\016\035\013\036\014" +
    "\040\030\043\020\044\017\046\022\001\001\000\032\006" +
    "\046\007\015\010\033\011\012\012\011\031\016\035\013" +
    "\036\014\040\030\043\020\044\017\046\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\205\006\025\007\015\010\033\011" +
    "\012\012\011\031\016\035\013\036\014\040\030\043\020" +
    "\044\017\046\022\001\001\000\032\006\046\007\015\010" +
    "\033\011\012\012\011\031\016\035\013\036\014\040\030" +
    "\043\020\044\017\046\022\001\001\000\002\001\001\000" +
    "\006\041\210\042\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\214\001\001\000" +
    "\002\001\001\000\004\013\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\221\015\061\020\067\022" +
    "\056\044\064\054\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\224\001\001\000\002\001\001\000" +
    "\034\005\226\006\025\007\015\010\033\011\012\012\011" +
    "\031\016\035\013\036\014\040\030\043\020\044\017\046" +
    "\022\001\001\000\032\006\046\007\015\010\033\011\012" +
    "\012\011\031\016\035\013\036\014\040\030\043\020\044" +
    "\017\046\022\001\001\000\010\025\232\032\230\054\231" +
    "\001\001\000\012\025\245\027\244\033\243\054\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\234" +
    "\001\001\000\006\022\042\026\235\001\001\000\004\030" +
    "\236\001\001\000\002\001\001\000\034\005\240\006\025" +
    "\007\015\010\033\011\012\012\011\031\016\035\013\036" +
    "\014\040\030\043\020\044\017\046\022\001\001\000\032" +
    "\006\046\007\015\010\033\011\012\012\011\031\016\035" +
    "\013\036\014\040\030\043\020\044\017\046\022\001\001" +
    "\000\010\025\232\032\242\054\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\247\001\001\000\002\001\001\000\034\005" +
    "\251\006\025\007\015\010\033\011\012\012\011\031\016" +
    "\035\013\036\014\040\030\043\020\044\017\046\022\001" +
    "\001\000\032\006\046\007\015\010\033\011\012\012\011" +
    "\031\016\035\013\036\014\040\030\043\020\044\017\046" +
    "\022\001\001\000\002\001\001\000\016\014\254\015\061" +
    "\020\067\022\056\044\064\054\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\005\263\006" +
    "\025\007\015\010\033\011\012\012\011\031\016\035\013" +
    "\036\014\040\030\043\020\044\017\046\022\052\264\001" +
    "\001\000\032\006\046\007\015\010\033\011\012\012\011" +
    "\031\016\035\013\036\014\040\030\043\020\044\017\046" +
    "\022\001\001\000\004\053\266\001\001\000\016\014\270" +
    "\015\061\020\067\022\056\044\064\054\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\047" +
    "\276\050\275\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\307\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private SymbolsTable symbolsTable;
  private Backend backend;
  private LexerCup scanner;
  private C3a_generator c3a_g;
  private AssemblerGenerator assembler;

  private Stack<String> labelTrueStack;
  private Stack<String> labelFalseStack;

  public Parser(LexerCup scanner, SymbolFactory sf){
    super(scanner);
    this.scanner = scanner;
    this.symbolsTable = new SymbolsTable();
    this.backend = new Backend();
    this.c3a_g = new C3a_generator(backend);
    this.assembler = new AssemblerGenerator(symbolsTable, backend, c3a_g);
    this.labelTrueStack = new Stack<String>();
    this.labelFalseStack = new Stack<String>();
  }

  public void syntax_error(Symbol current_token) {
      report_error(
          "Syntax error at line " + (current_token.left+1) + ", column "
          + current_token.right, null
      );
  }

  private void initTypes() {
    //init INT type
    Type int_type = new Type(TYPE.dtype, SUBJACENTTYPE.st_integer, 4, Integer.MIN_VALUE, Integer.MIN_VALUE);
    symbolsTable.add("int", int_type);
    
    // init String type
    Type str_type = new Type(TYPE.dtype, SUBJACENTTYPE.st_string, 2, 0, 0);
    symbolsTable.add("string", str_type);
    
    //init BOOLEAN type
    Type bool_type = new Type(TYPE.dtype,SUBJACENTTYPE.st_boolean,2,0,1);
    symbolsTable.add("boolean",bool_type);
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= STARTS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStarts start_val = (SymbolStarts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // STARTS ::= INIT CALL_MAIN 
            {
              SymbolStarts RESULT =null;
		
                              backend.storeTables();
                              c3a_g.savec3aInFile();
                              assembler.generateAssembler();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTS",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= 
            {
              SymbolInit RESULT =null;
		
                              initTypes();
                              RESULT = new SymbolInit();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CALL_MAIN ::= inst_main lbracket INSTRUCTIONS rbracket 
            {
              SymbolCallMain RESULT =null;
		
                              RESULT = new SymbolCallMain();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_MAIN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              SymbolInstructions RESULT =null;
		
                              RESULT = new SymbolInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTIONS ::= INSTRUCTION 
            {
              SymbolInstructions RESULT =null;
		
                              RESULT = new SymbolInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= DECLARATIONS 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= INSTRUCTION_IF 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= INSTRUCTION_WHILE 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= INSTRUCTION_SWITCH 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= INSTRUCTION_FOR 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= OPERATOR_ASSIG 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= INSTRUCTION_IN 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= INSTRUCTION_OUT 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= CALL_FUNCTION 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= DEFINE_FUNCTION 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARATIONS ::= id separator DECLARATIONS 
            {
              SymbolDeclarations RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int declarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDeclarations declarations = (SymbolDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Type type = declarations.getType();
                              String backId;

                              if(type.getSubType() == SUBJACENTTYPE.st_string){
                                String value = declarations.getValue();
                                backId = backend.addStrVar(var_id,  0, backend.getLastProcedureId(), 0,type.getSize(), value);
                              }else{
                                backId = backend.addVar(var_id,  0, backend.getLastProcedureId(), 0,type.getSize(), type.getSubType());
                              }
                              
                              type.setBackendId(backId);

                              symbolsTable.add(var_id, type);

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                declarations.getVarId(),
                                null,
                                backId
                              );

                              RESULT = declarations;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARATIONS ::= id CONSTANT two_points id op_assig VALUE nextinstr 
            {
              SymbolDeclarations RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id_var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolConstant constant = (SymbolConstant)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int type_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int type_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              boolean isConst = constant != null ? constant.getIsConst() : false;

                              Type type = symbolsTable.get(type_id);

                              if(type.getType() != TYPE.dtype){
                                throw new Error("Type not valid");
                              }

                              if(type.getSubType() != SUBJACENTTYPE.st_boolean
                                && type.getSubType() != SUBJACENTTYPE.st_integer
                                && type.getSubType() != SUBJACENTTYPE.st_string ){
                                  throw new Error("Invalid subjacent type");
                              }

                              //IF LITERALL (type = null) CHECK SUBJACENT TYPE
                              if(value.getType() == TYPE.dnull && type.getSubType() != value.getSubType()){
                                throw new Error("Value and type must have same subjacent type");
                              }
                              
                              if(value.getType() != TYPE.dnull && value.getTypeName() != (String) type_id){
                                throw new Error("Value must have the same type");
                              }

                              Type var_type;

                              if(isConst){
                                var_type = new Type(TYPE.dconst, type_id, value.getValue());
                              }
                              else{
                                var_type = new Type(TYPE.dvar, type_id); 
                              }

                              int size = type.getSize();
                              if(value.getIsString()){
                                size = value.getStringSize();
                              }

                              String var_id = backend.addVar(id_var, 0, backend.getActualProcedure(), 0, type.getSize(), type.getSubType());
                              var_type.setBackendId(var_id);

                              String val_id = value.getVarId();
                              symbolsTable.add(id_var, var_type);

                              SymbolDeclarations symDcls;
                              if(value.getIsString()){
                                symDcls = new SymbolDeclarations(val_id, var_type, (String) value.getValue());
                              }else{
                                symDcls = new SymbolDeclarations(val_id, var_type);
                              }

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                val_id,
                                null,
                                var_id
                              );
                               
                              RESULT = symDcls;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONSTANT ::= dconst 
            {
              SymbolConstant RESULT =null;
		
                              RESULT = new SymbolConstant(true);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONSTANT ::= 
            {
              SymbolConstant RESULT =null;
		
                              RESULT = new SymbolConstant(false);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERATOR_ASSIG ::= id op_assig VALUE nextinstr 
            {
              SymbolOperatorAssignation RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              Type varType = symbolsTable.get(var_id);
                              String type_id = varType.getTypeName();

                              if(varType.getType() == TYPE.dconst){
                                throw new Error("Cant assign value to constant");
                              }

                              //IF LITERALL (type = null) CHECK SUBJACENT TYPE
                              if(value.getType() == TYPE.dnull && varType.getSubType() == value.getSubType()){
                                throw new Error("Value and type must have same subjacent type");
                              }
                              
                              if(value.getType() != TYPE.dnull && value.getTypeName() != type_id){
                                throw new Error("Value must have the same type");
                              }

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                value.getVarId(),
                                null,
                                varType.getBackendId()
                              );

                              RESULT = new SymbolOperatorAssignation();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR_ASSIG",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INITIALIZE_ARITHMETICAL_OP ::= lparen ARITHMETICAL_OP rparen 
            {
              SymbolInitArithOp RESULT =null;
		int arith_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arith_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolArithOp arith_op = (SymbolArithOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              SymbolInitArithOp sym; 
                              if(arith_op.getIsConst()){
                                sym = new SymbolInitArithOp(arith_op.getVarId(),arith_op.getValue());
                              }else{
                                sym = new SymbolInitArithOp(arith_op.getVarId());
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INITIALIZE_ARITHMETICAL_OP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARITHMETICAL_OP ::= ARITHMETICAL_OP op_arithmetical ARITHMETICAL_VALUE 
            {
              SymbolArithOp RESULT =null;
		int arith_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arith_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolArithOp arith_op = (SymbolArithOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arith_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arith_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArithValue arith_val = (SymbolArithValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              
                              SymbolArithOp sym;
                              boolean allConst = arith_op.getIsConst() && arith_val.getIsConst();

                              Code op_code;
                              switch(op){
                                case "+" : 
                                  op_code = Code.add;
                                  break;
                                case "-" : 
                                  op_code = Code.sub;
                                  break;
                                case "*" : 
                                  op_code = Code.prod;
                                  break;
                                case "/" : 
                                  op_code = Code.div;
                                  break;
                                case "%" : 
                                  op_code = Code.mod;
                                  break;
                                default : 
                                  throw new Error("Invalid arithmetical operator");
                              }

                              Integer value = null;
                              if(allConst) {
                                Integer val1 = (Integer) arith_op.getValue();
                                Integer val2 = (Integer) arith_val.getValue();

                                switch(op){
                                  case "+" : 
                                    value = val1 + val2;
                                    break;
                                  case "-" : 
                                    value = val1 - val2;
                                    break;
                                  case "*" : 
                                    value = val1 * val2;
                                    break;
                                  case "/" : 
                                    if(val2 == 0){
                                      throw new Error("Cannot divide by zero");
                                    }
                                    value = val1 / val2;
                                    break;
                                  case "%" : 
                                    value = val1 % val2;
                                    break;
                                }
                              }

                              Type type_int = symbolsTable.get("int");
                              
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_int.getSize(), type_int.getSubType());

                              c3a_g.generateC3aInstr(
                                op_code,
                                arith_op.getVarId(),
                                arith_val.getVarId(),
                                var_id
                              );

                              if(allConst){
                                sym = new SymbolArithOp(var_id, value);
                              }
                              else{
                                sym = new SymbolArithOp(var_id);
                              }

                              RESULT = sym;

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OP",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARITHMETICAL_OP ::= ARITHMETICAL_VALUE op_arithmetical ARITHMETICAL_VALUE 
            {
              SymbolArithOp RESULT =null;
		int arith_val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arith_val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolArithValue arith_val1 = (SymbolArithValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arith_val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arith_val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArithValue arith_val2 = (SymbolArithValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolArithOp sym;
                              boolean allConst = arith_val1.getIsConst() && arith_val2.getIsConst();

                              Code op_code;
                              
                              switch(op){
                                case "+" : 
                                  op_code = Code.add;
                                  break;
                                case "-" : 
                                  op_code = Code.sub;
                                  break;
                                case "*" : 
                                  op_code = Code.prod;
                                  break;
                                case "/" : 
                                  op_code = Code.div;
                                  break;
                                case "%" : 
                                  op_code = Code.mod;
                                  break;
                                default : 
                                  throw new Error("Invalid arithmetical operator");
                              }

                              Integer value = null;
                              if(allConst) {
                                Integer val1 = (Integer) arith_val1.getValue();
                                Integer val2 = (Integer) arith_val2.getValue();

                                switch(op){
                                  case "+" : 
                                    value = val1 + val2;
                                    break;
                                  case "-" : 
                                    value = val1 - val2;
                                    break;
                                  case "*" : 
                                    value = val1 * val2;
                                    break;
                                  case "/" : 
                                    if(val2 == 0){
                                      throw new Error("Cannot divide by zero");
                                    }
                                    value = val1 / val2;
                                    break;
                                  case "%" : 
                                    value = val1 % val2;
                                    break;
                                }
                              }

                              Type type_int = symbolsTable.get("int");
                              
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_int.getSize(), type_int.getSubType());

                              c3a_g.generateC3aInstr(
                                op_code,
                                arith_val1.getVarId(),
                                arith_val2.getVarId(),
                                var_id
                              );

                              if(allConst){
                                sym = new SymbolArithOp(var_id, value);
                              }
                              else{
                                sym = new SymbolArithOp(var_id);
                              }
                              
                              RESULT = sym;
                            

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OP",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARITHMETICAL_VALUE ::= lparen ARITHMETICAL_OP rparen 
            {
              SymbolArithValue RESULT =null;
		int arith_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arith_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolArithOp arith_op = (SymbolArithOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              SymbolArithValue sym;
                              String var_id = new String(arith_op.getVarId());

                              if(arith_op.getIsConst()){
                                sym = new SymbolArithValue(var_id, arith_op.getValue());
                              }else{
                                sym = new SymbolArithValue(var_id);
                              }

                              RESULT = sym;

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARITHMETICAL_VALUE ::= POS_NEG number 
            {
              SymbolArithValue RESULT =null;
		int negleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int negright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolPosNeg neg = (SymbolPosNeg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int n_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Integer value;
                              if(neg != null && neg.isNegative()){
                                value = Integer.valueOf("-" + n_val);
                              }
                              else{
                                value = Integer.valueOf(n_val);
                              }

                              Type type_int = symbolsTable.get("int");
                              
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(),  0, type_int.getSize(),  type_int.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                Integer.toString(value),
                                null,
                                var_id
                              );

                              RESULT = new SymbolArithValue(var_id, value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARITHMETICAL_VALUE ::= id 
            {
              SymbolArithValue RESULT =null;
		int id_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                              Type var_type = symbolsTable.get(id_val);
                              TYPE main_var_type = var_type.getType();

                              if(main_var_type != TYPE.darg && main_var_type != TYPE.dconst && main_var_type != TYPE.dvar){
                                throw new Error("Invalid arithmetic value type");
                              }

                              Type var_dtype = symbolsTable.get(var_type.getTypeName());

                              if(var_dtype.getSubType() != SUBJACENTTYPE.st_integer){
                                throw new Error("Invalid subjacent type");
                              }

                              SymbolArithValue sym;
                              String var_id = new String(var_type.getBackendId());

                              if(main_var_type == TYPE.dconst){
                                Integer value = (Integer) var_type.getValue();
                                sym = new SymbolArithValue(var_id, value);
                              }else{
                                sym = new SymbolArithValue(var_id);
                              }

                              RESULT = sym;
                            
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // POS_NEG ::= op_arithmetical 
            {
              SymbolPosNeg RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                              if(!op.equals("+") && !op.equals("-")){
                                throw new Error("Sign operator not valid");
                              }

                              boolean isNegative = true;
                              
                              if(op.equals("+")){
                                isNegative = false;
                              }

                              RESULT = new SymbolPosNeg(isNegative);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("POS_NEG",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // POS_NEG ::= EMPTY 
            {
              SymbolPosNeg RESULT =null;
		
                              RESULT = new SymbolPosNeg(false);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("POS_NEG",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALUE ::= INITIALIZE_ARITHMETICAL_OP 
            {
              SymbolValue RESULT =null;
		int arith_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arith_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolInitArithOp arith_op = (SymbolInitArithOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;
                              String var_id = arith_op.getVarId();
                              if(arith_op.getIsConst()){
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_integer, arith_op.getValue());
                              }else{
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_integer);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALUE ::= POS_NEG number 
            {
              SymbolValue RESULT =null;
		int negleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int negright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolPosNeg neg = (SymbolPosNeg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int n_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Integer value;

                              if(neg != null && neg.isNegative()){
                                value = Integer.valueOf("-" + n_val);
                              }
                              else{
                                value = Integer.valueOf(n_val);
                              }

                              Type type_int = symbolsTable.get("int");
                              
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_int.getSize(), type_int.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                Integer.toString(value),
                                null,
                                var_id
                              );

                              RESULT = new SymbolValue(var_id, SUBJACENTTYPE.st_integer, value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALUE ::= string 
            {
              SymbolValue RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                             //delete quotes
                              Type type_string = symbolsTable.get("string");
                              
                              // string size in bytes
                              int stringSize = (value.length() - 2) * type_string.getSize();

                              if (value.length() - 2 > 999){
                                throw new Error("String must be shorter than 1000 characters.");
                              }

                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, stringSize, type_string.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                value,
                                null,
                                var_id
                              );                          
                              
                              SymbolValue sym = new SymbolValue(var_id, value, stringSize);

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALUE ::= bool 
            {
              SymbolValue RESULT =null;
		int bool_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bool_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = Boolean.valueOf(bool_val);
                              Type type_bool = symbolsTable.get("boolean");

                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_bool.getSize(), type_bool.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                bool_val,
                                null,
                                var_id
                              );                                 

                              RESULT = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean, value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALUE ::= id 
            {
              SymbolValue RESULT =null;
		int id_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;
                              
                              Type val_type = symbolsTable.get(id_val);
                              String var_id = new String(val_type.getBackendId());

                              if(val_type.getType() == TYPE.dconst){
                                sym = new SymbolValue(var_id, val_type.getType(), val_type.getTypeName(), val_type.getValue());
                              }
                              else {
                                sym = new SymbolValue(var_id, val_type.getType(), val_type.getTypeName());
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALUE ::= INITIALIZE_BOOLEAN_OP 
            {
              SymbolValue RESULT =null;
		int bool_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolInitBoolOp bool_op = (SymbolInitBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;
                              String var_id = new String(bool_op.getVarId());
                              if(bool_op.getIsConst()){
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean, bool_op.getValue());
                              }else{
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALUE ::= CALL_FUNCTION 
            {
              SymbolValue RESULT =null;
		int call_fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int call_fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCallFunction call_fn = (SymbolCallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                              Type dfn_type = symbolsTable.get(fn_type.getTypeName());
                              
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, fn_type.getSize(), dfn_type.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                call_fn.getBackendId(),
                                null,
                                var_id
                              );                                

                              RESULT = new SymbolValue(var_id, TYPE.dfun, fn_type.getTypeName());
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALUE ::= instr_in lparen id rparen 
            {
              SymbolValue RESULT =null;
		
                              // TODOF
                              RESULT = new SymbolValue();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INITIALIZE_BOOLEAN_OP ::= lparen BOOLEAN_OP rparen 
            {
              SymbolInitBoolOp RESULT =null;
		int bool_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bool_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              SymbolInitBoolOp sym; 
                              if(bool_op.getIsConst()){
                                sym = new SymbolInitBoolOp(bool_op.getVarId(),bool_op.getValue());
                              }else{
                                sym = new SymbolInitBoolOp(bool_op.getVarId());
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INITIALIZE_BOOLEAN_OP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BOOLEAN_OP ::= BOOLEAN_OP op_logical BOOLEAN_VALUE 
            {
              SymbolBoolOp RESULT =null;
		int bool_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bool_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bool_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBoolValue bool_val = (SymbolBoolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolBoolOp sym;
                              Code op_code;

                              switch(op){
                                case "&&":
                                  op_code = Code.and;
                                  break;
                                case "||":
                                  op_code = Code.or;
                                  break;
                                default : 
                                  throw new Error("Invalid boolean operator");
                              }

                              boolean allConst = bool_op.getIsConst() && bool_val.getIsConst();
                              Boolean value = null;

                              if(allConst){
                                Boolean val1 = (Boolean) bool_op.getValue();
                                Boolean val2 = (Boolean) bool_val.getValue();
                                switch(op){
                                case "&&":
                                  value = val1 && val2;
                                  break;
                                case "||":
                                  value = val1 || val2; 
                                  break;
                                }
                              }

                              Type type_bool = symbolsTable.get("boolean"); 
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_bool.getSize(), type_bool.getSubType());
                              
                              String val1_id = bool_val.getVarId();
                              String val2_id = bool_op.getVarId();
                              c3a_g.generateC3aInstr(
                                op_code,
                                val1_id,
                                val2_id,
                                var_id
                              );                         
                              
                              if(allConst){
                                sym = new SymbolBoolOp(var_id, value);
                              }else{
                                sym = new SymbolBoolOp(var_id);
                              }

                              RESULT = sym;

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BOOLEAN_OP ::= BOOLEAN_VALUE 
            {
              SymbolBoolOp RESULT =null;
		int bool_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBoolValue bool_val = (SymbolBoolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolBoolOp sym;

                              String var_id = new String(bool_val.getVarId());
                              if(bool_val.getIsConst()){
                                sym = new SymbolBoolOp(var_id, bool_val.getValue());
                              }
                              else{
                                sym = new SymbolBoolOp(var_id);
                              }

                              RESULT = sym;
                              
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BOOLEAN_VALUE ::= bool 
            {
              SymbolBoolValue RESULT =null;
		int bool_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bool_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = Boolean.valueOf(bool_val);
                              
                              Type type_bool = symbolsTable.get("boolean");
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_bool.getSize(), type_bool.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                bool_val,
                                null,
                                var_id
                              );

                              RESULT = new SymbolBoolValue(var_id, value);

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BOOLEAN_VALUE ::= id 
            {
              SymbolBoolValue RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Type var_type = symbolsTable.get(id_var);
                              TYPE main_var_type = var_type.getType();

                              if(main_var_type != TYPE.dconst || main_var_type != TYPE.dvar || main_var_type != TYPE.darg){
                                throw new Error("");
                              }
                              
                              Type dtype_type = symbolsTable.get(var_type.getTypeName());
                              if(dtype_type.getSubType() != SUBJACENTTYPE.st_boolean){
                                throw new Error("Must be boolean variable or constant");
                              }

                              SymbolBoolValue sym;
                              String backId = new String(var_type.getBackendId());

                              if(TYPE.dconst == main_var_type){
                                Boolean value = (Boolean) var_type.getValue();
                                sym = new SymbolBoolValue(backId, value);
                              }else{
                                sym = new SymbolBoolValue(backId);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BOOLEAN_VALUE ::= lparen BOOLEAN_OP rparen 
            {
              SymbolBoolValue RESULT =null;
		int bool_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bool_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              SymbolBoolValue sym;
                              String id = new String(bool_op.getVarId()); 
                              if(bool_op.getIsConst()){
                                Boolean value = (Boolean) bool_op.getValue();
                                sym = new SymbolBoolValue(id, value);
                              }else{
                                sym = new SymbolBoolValue(id); 
                              }

                              RESULT = sym;
                              
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BOOLEAN_VALUE ::= VALUE_COMPARISON 
            {
              SymbolBoolValue RESULT =null;
		int comp_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comp_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValueComparison comp_val = (SymbolValueComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolBoolValue sym;
                              String id = new String(comp_val.getVarId()); 
                              if(comp_val.getIsConst()){
                                sym = new SymbolBoolValue(id, comp_val.getValue());
                              }else{
                                sym = new SymbolBoolValue(id); 
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALUE_COMPARISON ::= lparen VALUE op_relational VALUE rparen 
            {
              SymbolValueComparison RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolValue val1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValue val2 = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                              SymbolValueComparison sym;

                              TYPE type1 = val1.getType();
                              SUBJACENTTYPE subType1;
                              
                              if(val1.getType() == TYPE.dnull){
                                subType1 = val1.getSubType();
                              }else{
                                if(type1 != TYPE.dvar && type1 != TYPE.dconst && type1 != TYPE.darg && type1 != TYPE.dfun) {
                                  throw new Error("Value 1 of comparison wrong type");
                                }
                                Type dtype_type = symbolsTable.get(val1.getTypeName());
                                subType1 = dtype_type.getSubType();
                              }
                              // SAME FOR VALUE2
                              TYPE type2 = val2.getType();
                              SUBJACENTTYPE subType2;

                              if(val2.getType() == TYPE.dnull){
                                subType2 = val2.getSubType();
                              }else{
                                if(type2 != TYPE.dvar && type2 != TYPE.dconst && type2 != TYPE.darg && type2 != TYPE.dfun) {
                                  throw new Error("Value 2 of comparison wrong type");
                                }
                                Type dtype_type = symbolsTable.get(val2.getTypeName());
                                subType2 = dtype_type.getSubType();
                              }

                              //Check same subtype
                              if(subType1 != subType2) {
                                throw new Error("Value 1 subtype is different from value 2");
                              }

                              Code op_code;
                              switch(op){
                                case "=":
                                  op_code = Code.if_EQ;
                                  break;
                                case "!=":
                                  op_code = Code.if_NE;
                                  break;
                                case "<": 
                                  if(subType1 != SUBJACENTTYPE.st_integer) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.if_LT;
                                  break;
                                case "<=":
                                  if(subType1 != SUBJACENTTYPE.st_integer) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.if_LE;
                                  break;
                                case ">": 
                                  if(subType1 != SUBJACENTTYPE.st_integer) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.if_GT;
                                  break;
                                case ">=":
                                  if(subType1 != SUBJACENTTYPE.st_integer) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.if_GE;
                                  break;
                              }

                              boolean allConst = val1.getIsConst() && val2.getIsConst();
                              
                              Boolean val = null;
                              if(allConst){
                                switch(op){
                                  case "=":
                                    if(subType1 == SUBJACENTTYPE.st_integer){
                                       val = (Integer) val1.getValue() == (Integer) val2.getValue();
                                    }
                                    if(subType1 == SUBJACENTTYPE.st_string){
                                      val = ((String)val1.getValue()).equals((String) val2.getValue());
                                    }
                                    if(subType1 == SUBJACENTTYPE.st_boolean){
                                      val = (Boolean) val1.getValue() == (Boolean) val2.getValue();
                                    }
                                    break;
                                  case "!=":
                                    if(subType1 == SUBJACENTTYPE.st_integer){
                                      val = (Integer) val1.getValue() != (Integer) val2.getValue();
                                    }
                                    if(subType1 == SUBJACENTTYPE.st_string){
                                      val = !((String)val1.getValue()).equals((String) val2.getValue());
                                    }
                                    if(subType1 == SUBJACENTTYPE.st_boolean){
                                      val = (Boolean) val1.getValue() != (Boolean) val2.getValue();
                                    }
                                    break;

                                  // only integer operators
                                  case "<": 
                                    val = (Integer) val1.getValue() < (Integer) val2.getValue();
                                    break;
                                  case "<=":
                                    val = (Integer) val1.getValue() <= (Integer) val2.getValue();
                                    break;
                                  case ">": 
                                    val = (Integer) val1.getValue() > (Integer) val2.getValue();
                                    break;
                                  case ">=":
                                    val = (Integer) val1.getValue() >= (Integer) val2.getValue();
                                    break;
                                }
                              }

                              Type type_bool = symbolsTable.get("boolean");
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_bool.getSize(), type_bool.getSubType());
                              
                              if(allConst){
                                sym = new SymbolValueComparison(var_id, val);
                              }else{
                                sym = new SymbolValueComparison(var_id);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_COMPARISON",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COND ::= INITIALIZE_BOOLEAN_OP 
            {
              SymbolCondition RESULT =null;
		int bool_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolInitBoolOp bool_op = (SymbolInitBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                String var_id = bool_op.getVarId();

                                String true_label = backend.addLabel();
                                String false_label = backend.addLabel();

                                labelTrueStack.push(true_label);
                                labelFalseStack.push(false_label);
                                
                                c3a_g.generateC3aInstr(
                                  Code.if_EQ,
                                  var_id,
                                  "true", //TODO : revisar quin valor asignar aqui
                                  true_label
                                );

                                c3a_g.generateC3aInstr(
                                  Code.go_to,
                                  null,
                                  null,
                                  false_label
                                );

                                RESULT = new SymbolCondition();
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COND_T ::= 
            {
              SymbolConditionTrue RESULT =null;
		
                                String label = labelTrueStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new SymbolConditionTrue();   
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_T",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COND_F ::= 
            {
              SymbolConditionFalse RESULT =null;
		
                                String label = labelFalseStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new SymbolConditionFalse();   
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_F",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTRUCTION_IF ::= inst_if COND COND_T lbracket INSTRUCTIONS rbracket ELIF ELSE 
            {
              SymbolInstructionIf RESULT =null;
		
                              RESULT = new SymbolInstructionIf();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_IF",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // M_END ::= EMPTY 
            {
              SymbolMEnd RESULT =null;
		
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolMEnd(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_END",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELIF ::= M_END inst_elif COND_F COND COND_T lbracket INSTRUCTIONS rbracket ELIF 
            {
              SymbolElif RESULT =null;
		int mendleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int mendright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		SymbolMEnd mend = (SymbolMEnd)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolElif();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELIF ::= 
            {
              SymbolElif RESULT =null;
		
                              RESULT = new SymbolElif();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELSE ::= M_END inst_else COND_F lbracket INSTRUCTIONS rbracket 
            {
              SymbolElse RESULT =null;
		int mendleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mendright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolMEnd mend = (SymbolMEnd)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolElse();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELSE ::= COND_F 
            {
              SymbolElse RESULT =null;
		
                              RESULT = new SymbolElse();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // M_WHILE ::= EMPTY 
            {
              SymbolMWhile RESULT =null;
		 
                              String label = backend.addLabel();
                              RESULT = new SymbolMWhile(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_WHILE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INSTRUCTION_WHILE ::= inst_while M_WHILE COND COND_T lbracket INSTRUCTIONS rbracket 
            {
              SymbolInstructionWhile RESULT =null;
		int mwhileleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mwhileright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolMWhile mwhile = (SymbolMWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                              String loop_label = mwhile.getLabel();
                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                loop_label
                              );

                              String end_label = labelFalseStack.pop();
                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                end_label
                              );

                              RESULT = new SymbolInstructionWhile();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_WHILE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INSTRUCTION_FOR ::= inst_for lparen INTERNAL_FOR rparen lbracket INSTRUCTIONS rbracket 
            {
              SymbolInstructionFor RESULT =null;
		
                            RESULT = new SymbolInstructionFor();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_FOR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INTERNAL_FOR ::= OPERATOR_ASSIG nextinstr INITIALIZE_BOOLEAN_OP nextinstr ARITHMETICAL_OP 
            {
              SymbolInternalFor RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INTERNAL_FOR",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INTERNAL_FOR ::= 
            {
              SymbolInternalFor RESULT =null;
		
                            RESULT = new SymbolInternalFor();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INTERNAL_FOR",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INSTRUCTION_SWITCH ::= inst_switch lparen VALUE rparen lbracket CASES rbracket 
            {
              SymbolInstructionSwitch RESULT =null;
		
                             RESULT = new SymbolInstructionSwitch();
                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_SWITCH",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASES ::= inst_case VALUE two_points INSTRUCTIONS inst_break nextinstr CASES 
            {
              SymbolCases RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASES ::= CASE_DEFAULT 
            {
              SymbolCases RESULT =null;
		
                             RESULT = new SymbolCases();
                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASE_DEFAULT ::= inst_default INSTRUCTIONS inst_break nextinstr 
            {
              SymbolCaseDefault RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_DEFAULT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASE_DEFAULT ::= 
            {
              SymbolCaseDefault RESULT =null;
		
                             RESULT = new SymbolCaseDefault();
                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_DEFAULT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CALL_FUNCTION ::= inst_call id lparen rparen 
            {
              SymbolCallFunction RESULT =null;
		int fun_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fun_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                              // Check if function and has params 
                              int num_params = symbolsTable.getNumParams(fun_id);
                              if(num_params > 0 ){
                                throw new Error("Missing parameters. Function " + fun_id + " has " + num_params + " parameters.");
                              }

                              Type fun_type = symbolsTable.get(fun_id);
                              String id = fun_type.getBackendId();
                              c3a_g.generateC3aInstr(
                                Code.call,
                                null,
                                null,
                                id
                              );

                              RESULT = new SymbolCallFunction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CALL_FUNCTION ::= inst_call CALL_BODY rparen 
            {
              SymbolCallFunction RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolCallBody body = (SymbolCallBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              int body_params = body.getNumParams();
                              String fun_id = body.getFunId();
                              int fun_params = symbolsTable.getNumParams(fun_id);

                              if(fun_params != body_params){
                                throw new Error("Incorrect number of parameters :"+ body_params + ".Function " + fun_id + " has " + fun_params + "params");
                              }

                              String fun_backId = body.getFunBackId();
                              c3a_g.generateC3aInstr(
                                Code.call,
                                null,
                                null,
                                fun_backId
                              );

                              RESULT = new SymbolCallFunction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CALL_BODY ::= CALL_BODY separator VALUE 
            {
              SymbolCallBody RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolCallBody body = (SymbolCallBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              String fun_id = body.getFunId();
                              int num_params = body.getNumParams();
                              SUBJACENTTYPE subType;

                              if(value.getType() == TYPE.dnull){
                                subType = value.getSubType();
                              }
                              else{
                                if(value.getType() != TYPE.dvar && value.getType() != TYPE.dconst && value.getType() != TYPE.darg){
                                  throw new Error(fun_id + ". Incorrect type for param "+ num_params);
                                }
                                Type value_type = symbolsTable.get(value.getTypeName());
                                subType = value_type.getSubType();
                              }

                              //Check param type with function param type
                              SUBJACENTTYPE paramSubType = symbolsTable.getParam(fun_id, num_params).getSubType();

                              if(paramSubType != subType){
                                throw new Error(fun_id + ". Incorrect type for param " + num_params + ". Expected " + subType + " but got " + paramSubType);
                              }

                              String fun_back_id = body.getFunBackId();
                              c3a_g.generateC3aInstr(
                                Code.param,
                                value.getVarId(),
                                null,
                                fun_back_id
                              );

                              RESULT = new SymbolCallBody(fun_id, fun_back_id, num_params+1);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_BODY",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CALL_BODY ::= id lparen VALUE 
            {
              SymbolCallBody RESULT =null;
		int fun_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fun_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SUBJACENTTYPE subType;

                              if(value.getType() == TYPE.dnull){
                                subType = value.getSubType();
                              }
                              else{
                                if(value.getType() != TYPE.dvar && value.getType() != TYPE.dconst && value.getType() != TYPE.darg){
                                  throw new Error(fun_id + ". Incorrect type for param 0");
                                }
                                Type value_type = symbolsTable.get(value.getTypeName());
                                subType = value_type.getSubType();
                              }

                              //Check param type with function param type
                              SUBJACENTTYPE paramSubType = symbolsTable.getParam(fun_id, 0).getSubType();

                              if(paramSubType != subType){
                                throw new Error(fun_id + ". Incorrect type for param 0. Expected " + subType + " but got " + paramSubType);
                              }

                              Type fun_type = symbolsTable.get(fun_id);
                              String fun_back_id = fun_type.getBackendId();

                              c3a_g.generateC3aInstr(
                                Code.param,
                                value.getVarId(),
                                null,
                                fun_back_id
                              );

                              RESULT = new SymbolCallBody(fun_id, fun_back_id, 0+1);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_BODY",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INSTRUCTION_OUT ::= instr_out lparen VALUE rparen nextinstr 
            {
              SymbolInstructionOut RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                              String var_id = value.getVarId();

                              c3a_g.generateC3aInstr(
                                Code.output,
                                null,
                                null,
                                var_id
                              );

                              RESULT = new SymbolInstructionOut();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OUT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DEFINE_FUNCTION ::= FUNCTION_BEG id rparen lbracket FUNCTION_BODY RETURN_TYPE rbracket 
            {
              SymbolDefFunction RESULT =null;
		
                            RESULT = new SymbolDefFunction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCTION_BEG ::= inst_function id id lparen PARAMETERS rparen 
            {
              SymbolFunctionBeg RESULT =null;
		
                            RESULT = new SymbolFunctionBeg();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_BEG",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMETERS ::= HAS_PARAMETERS 
            {
              SymbolParameters RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETERS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMETERS ::= 
            {
              SymbolParameters RESULT =null;
		
                            RESULT = new SymbolParameters();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETERS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // HAS_PARAMETERS ::= id two_points id HAS_MORE_PARAMETERS 
            {
              SymbolHasParameters RESULT =null;
		
                            RESULT = new SymbolHasParameters();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HAS_PARAMETERS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // HAS_MORE_PARAMETERS ::= separator id two_points id HAS_MORE_PARAMETERS 
            {
              SymbolHasMoreParameters RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HAS_MORE_PARAMETERS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // HAS_MORE_PARAMETERS ::= 
            {
              SymbolHasMoreParameters RESULT =null;
		
                            RESULT = new SymbolHasMoreParameters();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("HAS_MORE_PARAMETERS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCTION_BODY ::= INSTRUCTIONS 
            {
              SymbolFunctionBody RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCTION_BODY ::= 
            {
              SymbolFunctionBody RESULT =null;
		
                            RESULT = new SymbolFunctionBody();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RETURN_TYPE ::= inst_return VALUE nextinstr 
            {
              SymbolReturnType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_TYPE",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RETURN_TYPE ::= 
            {
              SymbolReturnType RESULT =null;
		
                              RESULT = new SymbolReturnType();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_TYPE",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EMPTY ::= 
            {
              SymbolEmpty RESULT =null;
		 RESULT = new SymbolEmpty(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EMPTY",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
