
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Sin;

import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import Symbols.*;
import SymbolsTable.*;
import SymbolsTable.Type.TYPE;
import SymbolsTable.Type.SUBJACENTTYPE;
import Lex.*;
import backend.*;
import java.util.Stack;
import java.util.List;
import backend.Instruction.Code;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\050\004\000\002\050\003\000\002\004\011" +
    "\000\002\005\004\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\002\000\002\010" +
    "\002\000\002\011\005\000\002\011\011\000\002\014\003" +
    "\000\002\014\002\000\002\012\006\000\002\016\005\000" +
    "\002\017\005\000\002\017\005\000\002\020\005\000\002" +
    "\020\004\000\002\020\003\000\002\021\003\000\002\021" +
    "\003\000\002\015\003\000\002\015\004\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\006\000\002\023\005\000\002" +
    "\022\005\000\002\022\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\005\000\002\024\003\000\002\025\005" +
    "\000\002\027\003\000\002\031\002\000\002\030\002\000" +
    "\002\032\014\000\002\026\003\000\002\033\015\000\002" +
    "\033\002\000\002\034\012\000\002\034\003\000\002\035" +
    "\003\000\002\036\013\000\002\045\006\000\002\045\005" +
    "\000\002\046\005\000\002\046\005\000\002\013\007\000" +
    "\002\037\011\000\002\040\010\000\002\041\003\000\002" +
    "\041\003\000\002\042\007\000\002\042\006\000\002\043" +
    "\003\000\002\043\002\000\002\044\005\000\002\044\002" +
    "\000\002\047\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\004\020\uffff\001\002\000\004\020\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\004\227\035\226\001\002\000\004\020\007\001" +
    "\002\000\004\030\014\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\000\001\002\000\020\004\ufff3\014\ufff3\017" +
    "\ufff3\021\ufff3\023\ufff3\025\ufff3\031\ufff3\001\002\000\020" +
    "\004\020\014\017\017\026\021\uffbd\023\025\025\023\031" +
    "\uffbd\001\002\000\020\004\ufff5\014\ufff5\017\ufff5\021\ufff5" +
    "\023\ufff5\025\ufff5\031\ufff5\001\002\000\004\026\037\001" +
    "\002\000\012\013\155\022\152\033\154\034\uffee\001\002" +
    "\000\020\004\ufff9\014\ufff9\017\ufff9\021\ufff9\023\ufff9\025" +
    "\ufff9\031\ufff9\001\002\000\020\004\ufff4\014\ufff4\017\ufff4" +
    "\021\ufff4\023\ufff4\025\ufff4\031\ufff4\001\002\000\004\026" +
    "\146\001\002\000\006\021\141\031\uffbb\001\002\000\004" +
    "\004\131\001\002\000\004\026\uffba\001\002\000\020\004" +
    "\ufffa\014\ufffa\017\ufffa\021\ufffa\023\ufffa\025\ufffa\031\ufffa" +
    "\001\002\000\020\004\020\014\017\017\026\021\uffbe\023" +
    "\025\025\023\031\uffbe\001\002\000\020\004\ufff6\014\ufff6" +
    "\017\ufff6\021\ufff6\023\ufff6\025\ufff6\031\ufff6\001\002\000" +
    "\020\004\ufff7\014\ufff7\017\ufff7\021\ufff7\023\ufff7\025\ufff7" +
    "\031\ufff7\001\002\000\020\004\ufff8\014\ufff8\017\ufff8\021" +
    "\ufff8\023\ufff8\025\ufff8\031\ufff8\001\002\000\020\004\ufffb" +
    "\014\ufffb\017\ufffb\021\ufffb\023\ufffb\025\ufffb\031\ufffb\001" +
    "\002\000\004\026\037\001\002\000\004\026\uffcb\001\002" +
    "\000\022\004\052\005\uffba\006\060\007\055\012\064\023" +
    "\025\024\062\026\065\001\002\000\004\030\042\001\002" +
    "\000\004\030\uffd4\001\002\000\014\004\ufff3\014\ufff3\017" +
    "\ufff3\023\ufff3\025\ufff3\001\002\000\014\004\uffd3\014\uffd3" +
    "\017\uffd3\023\uffd3\025\uffd3\001\002\000\014\004\020\014" +
    "\017\017\026\023\025\025\023\001\002\000\016\004\020" +
    "\014\017\017\026\023\025\025\023\031\ufff2\001\002\000" +
    "\004\031\047\001\002\000\020\004\uffca\014\uffca\017\uffca" +
    "\021\uffca\023\uffca\025\uffca\031\uffca\001\002\000\014\010" +
    "\uffdf\011\uffdf\027\uffdf\032\uffdf\033\uffdf\001\002\000\006" +
    "\011\112\027\127\001\002\000\010\010\uffe0\011\uffd8\027" +
    "\uffd8\001\002\000\014\010\uffe4\011\uffe4\027\uffe4\032\uffe4" +
    "\033\uffe4\001\002\000\004\005\uffe5\001\002\000\010\010" +
    "\uffe1\011\uffd9\027\uffd9\001\002\000\014\010\uffde\011\uffde" +
    "\027\uffde\032\uffde\033\uffde\001\002\000\004\010\122\001" +
    "\002\000\014\010\uffe2\011\uffe2\027\uffe2\032\uffe2\033\uffe2" +
    "\001\002\000\004\005\121\001\002\000\004\026\116\001" +
    "\002\000\006\011\uffda\027\uffda\001\002\000\004\005\uffe6" +
    "\001\002\000\022\004\073\005\uffba\006\060\007\055\012" +
    "\064\023\025\024\062\026\074\001\002\000\006\011\uffd6" +
    "\027\uffd6\001\002\000\006\012\076\027\115\001\002\000" +
    "\006\011\112\027\113\001\002\000\004\005\111\001\002" +
    "\000\004\012\107\001\002\000\012\010\uffe0\011\uffd8\012" +
    "\uffe7\027\uffd8\001\002\000\022\004\073\005\uffba\006\060" +
    "\007\055\012\064\023\025\024\062\026\074\001\002\000" +
    "\006\012\076\027\077\001\002\000\012\004\103\005\uffba" +
    "\012\064\026\102\001\002\000\006\010\uffec\012\uffe9\001" +
    "\002\000\006\012\uffeb\027\uffeb\001\002\000\004\005\106" +
    "\001\002\000\012\004\103\005\uffba\012\064\026\102\001" +
    "\002\000\006\012\uffe7\027\uffe7\001\002\000\006\012\076" +
    "\027\105\001\002\000\006\012\uffe9\027\uffe9\001\002\000" +
    "\006\012\uffe8\027\uffe8\001\002\000\012\004\103\005\uffba" +
    "\012\064\026\102\001\002\000\006\012\uffea\027\uffea\001" +
    "\002\000\006\010\uffe3\012\uffe8\001\002\000\022\004\052" +
    "\005\uffba\006\060\007\055\012\064\023\025\024\062\026" +
    "\065\001\002\000\010\010\uffdc\011\uffd7\027\uffd7\001\002" +
    "\000\006\011\uffdb\027\uffdb\001\002\000\014\010\uffec\011" +
    "\uffec\027\uffec\032\uffec\033\uffec\001\002\000\004\004\117" +
    "\001\002\000\004\027\120\001\002\000\014\010\uffdd\011" +
    "\uffdd\027\uffdd\032\uffdd\033\uffdd\001\002\000\014\010\uffe3" +
    "\011\uffe3\027\uffe3\032\uffe3\033\uffe3\001\002\000\022\004" +
    "\123\005\uffba\006\060\007\124\012\064\023\025\024\062" +
    "\026\126\001\002\000\012\011\uffe0\027\uffe0\032\uffe0\033" +
    "\uffe0\001\002\000\012\011\uffe1\027\uffe1\032\uffe1\033\uffe1" +
    "\001\002\000\006\011\uffd5\027\uffd5\001\002\000\022\004" +
    "\073\005\uffba\006\060\007\055\012\064\023\025\024\062" +
    "\026\074\001\002\000\014\011\uffdc\027\uffdc\030\uffdc\032" +
    "\uffdc\033\uffdc\001\002\000\006\027\135\033\136\001\002" +
    "\000\004\026\132\001\002\000\024\004\123\005\uffba\006" +
    "\060\007\124\012\064\023\025\024\062\026\126\027\134" +
    "\001\002\000\006\027\uffc6\033\uffc6\001\002\000\032\004" +
    "\uffc9\010\uffc9\011\uffc9\014\uffc9\017\uffc9\021\uffc9\023\uffc9" +
    "\025\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9\001\002\000" +
    "\032\004\uffc8\010\uffc8\011\uffc8\014\uffc8\017\uffc8\021\uffc8" +
    "\023\uffc8\025\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\001" +
    "\002\000\022\004\123\005\uffba\006\060\007\124\012\064" +
    "\023\025\024\062\026\126\001\002\000\006\027\uffc7\033" +
    "\uffc7\001\002\000\004\031\ufff2\001\002\000\022\004\123" +
    "\005\uffba\006\060\007\124\012\064\023\025\024\062\026" +
    "\126\001\002\000\004\032\143\001\002\000\004\031\uffbc" +
    "\001\002\000\004\031\145\001\002\000\004\020\uffc4\001" +
    "\002\000\022\004\123\005\uffba\006\060\007\124\012\064" +
    "\023\025\024\062\026\126\001\002\000\004\027\150\001" +
    "\002\000\004\032\151\001\002\000\020\004\uffc5\014\uffc5" +
    "\017\uffc5\021\uffc5\023\uffc5\025\uffc5\031\uffc5\001\002\000" +
    "\004\034\uffef\001\002\000\004\034\162\001\002\000\004" +
    "\004\161\001\002\000\022\004\123\005\uffba\006\060\007" +
    "\124\012\064\023\025\024\062\026\126\001\002\000\004" +
    "\032\157\001\002\000\020\004\uffed\014\uffed\017\uffed\021" +
    "\uffed\023\uffed\025\uffed\031\uffed\001\002\000\020\004\ufff1" +
    "\014\ufff1\017\ufff1\021\ufff1\023\ufff1\025\ufff1\031\ufff1\001" +
    "\002\000\010\022\152\033\154\034\uffee\001\002\000\004" +
    "\004\163\001\002\000\004\013\164\001\002\000\022\004" +
    "\123\005\uffba\006\060\007\124\012\064\023\025\024\062" +
    "\026\126\001\002\000\004\032\166\001\002\000\020\004" +
    "\ufff0\014\ufff0\017\ufff0\021\ufff0\023\ufff0\025\ufff0\031\ufff0" +
    "\001\002\000\004\030\170\001\002\000\014\004\ufff3\014" +
    "\ufff3\017\ufff3\023\ufff3\025\ufff3\001\002\000\014\004\uffd3" +
    "\014\uffd3\017\uffd3\023\uffd3\025\uffd3\001\002\000\014\004" +
    "\020\014\017\017\026\023\025\025\023\001\002\000\016" +
    "\004\020\014\017\017\026\023\025\025\023\031\ufff2\001" +
    "\002\000\004\031\175\001\002\000\024\004\uffce\014\uffce" +
    "\015\uffba\016\uffce\017\uffce\021\uffce\023\uffce\025\uffce\031" +
    "\uffce\001\002\000\022\004\uffd2\014\uffd2\016\uffba\017\uffd2" +
    "\021\uffd2\023\uffd2\025\uffd2\031\uffd2\001\002\000\006\015" +
    "\uffd0\016\uffd0\001\002\000\004\015\201\001\002\000\004" +
    "\026\uffd2\001\002\000\004\026\037\001\002\000\004\030" +
    "\204\001\002\000\014\004\ufff3\014\ufff3\017\ufff3\023\ufff3" +
    "\025\ufff3\001\002\000\014\004\uffd3\014\uffd3\017\uffd3\023" +
    "\uffd3\025\uffd3\001\002\000\014\004\020\014\017\017\026" +
    "\023\025\025\023\001\002\000\016\004\020\014\017\017" +
    "\026\023\025\025\023\031\ufff2\001\002\000\004\031\211" +
    "\001\002\000\024\004\uffce\014\uffce\015\uffba\016\uffce\017" +
    "\uffce\021\uffce\023\uffce\025\uffce\031\uffce\001\002\000\022" +
    "\004\uffcf\014\uffcf\016\uffcf\017\uffcf\021\uffcf\023\uffcf\025" +
    "\uffcf\031\uffcf\001\002\000\020\004\uffd1\014\uffd1\017\uffd1" +
    "\021\uffd1\023\uffd1\025\uffd1\031\uffd1\001\002\000\020\004" +
    "\uffcc\014\uffcc\017\uffcc\021\uffcc\023\uffcc\025\uffcc\031\uffcc" +
    "\001\002\000\004\016\216\001\002\000\004\030\217\001" +
    "\002\000\014\004\ufff3\014\ufff3\017\ufff3\023\ufff3\025\ufff3" +
    "\001\002\000\014\004\uffd2\014\uffd2\017\uffd2\023\uffd2\025" +
    "\uffd2\001\002\000\014\004\020\014\017\017\026\023\025" +
    "\025\023\001\002\000\016\004\020\014\017\017\026\023" +
    "\025\025\023\031\ufff2\001\002\000\004\031\224\001\002" +
    "\000\020\004\uffcd\014\uffcd\017\uffcd\021\uffcd\023\uffcd\025" +
    "\uffcd\031\uffcd\001\002\000\004\002\ufffe\001\002\000\004" +
    "\026\245\001\002\000\004\026\232\001\002\000\004\027" +
    "\242\001\002\000\006\027\uffc2\033\236\001\002\000\006" +
    "\004\233\027\uffc1\001\002\000\004\034\234\001\002\000" +
    "\004\004\235\001\002\000\006\027\uffbf\033\uffbf\001\002" +
    "\000\004\004\237\001\002\000\004\034\240\001\002\000" +
    "\004\004\241\001\002\000\006\027\uffc0\033\uffc0\001\002" +
    "\000\004\034\243\001\002\000\004\004\244\001\002\000" +
    "\004\030\uffc3\001\002\000\004\027\246\001\002\000\004" +
    "\030\247\001\002\000\014\004\020\014\017\017\026\023" +
    "\025\025\023\001\002\000\016\004\020\014\017\017\026" +
    "\023\025\025\023\031\251\001\002\000\004\002\ufffc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\006\002\004\003\003\001\001\000\012\004" +
    "\011\037\007\040\010\050\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\011\037" +
    "\007\040\010\050\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\014\001\001\000" +
    "\024\005\027\006\026\011\020\012\030\013\015\032\032" +
    "\036\031\043\023\045\021\001\001\000\002\001\001\000" +
    "\006\023\040\027\166\001\001\000\004\014\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\137\001\001\000\004\046\127\001\001\000\006" +
    "\035\034\047\035\001\001\000\002\001\001\000\020\006" +
    "\033\011\020\012\030\013\015\032\032\036\031\045\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\040\027\037\001\001" +
    "\000\002\001\001\000\024\015\056\016\052\021\060\022" +
    "\050\023\047\024\062\025\065\045\055\047\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\042\001" +
    "\001\000\004\031\043\001\001\000\022\005\044\006\026" +
    "\011\020\012\030\013\015\032\032\036\031\045\021\001" +
    "\001\000\022\006\033\010\045\011\020\012\030\013\015" +
    "\032\032\036\031\045\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\015\056\016\052\017\066\020\071" +
    "\021\070\022\067\023\047\024\062\025\065\045\055\047" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\015\056\016\052\017\074\020\071\021\070" +
    "\022\067\023\047\024\062\025\065\045\055\047\053\001" +
    "\001\000\002\001\001\000\010\020\077\021\100\047\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\103\020\071\021\100\047\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\107\021\100\047\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\056\016" +
    "\052\021\060\023\047\024\113\025\065\045\055\047\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\015\124\016\052\021\060\023" +
    "\047\045\055\047\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\015\056\016\052\017" +
    "\066\020\071\021\070\022\050\023\047\024\062\025\065" +
    "\045\055\047\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\015\132\016\052\021\060" +
    "\023\047\045\055\047\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\015\136\016\052" +
    "\021\060\023\047\045\055\047\053\001\001\000\002\001" +
    "\001\000\004\010\143\001\001\000\016\015\141\016\052" +
    "\021\060\023\047\045\055\047\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\015\146\016\052\021\060\023\047\045\055\047" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\157\001\001\000\016\015\155\016\052\021\060\023\047" +
    "\045\055\047\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\015\164\016\052\021" +
    "\060\023\047\045\055\047\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\170\001" +
    "\001\000\004\031\171\001\001\000\022\005\172\006\026" +
    "\011\020\012\030\013\015\032\032\036\031\045\021\001" +
    "\001\000\022\006\033\010\173\011\020\012\030\013\015" +
    "\032\032\036\031\045\021\001\001\000\002\001\001\000" +
    "\010\026\177\033\175\047\176\001\001\000\012\026\214" +
    "\030\213\034\212\047\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\201\001\001\000\006\023\040" +
    "\027\202\001\001\000\002\001\001\000\004\007\204\001" +
    "\001\000\004\031\205\001\001\000\022\005\206\006\026" +
    "\011\020\012\030\013\015\032\032\036\031\045\021\001" +
    "\001\000\022\006\033\010\207\011\020\012\030\013\015" +
    "\032\032\036\031\045\021\001\001\000\002\001\001\000" +
    "\010\026\177\033\211\047\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\217\001\001\000\004\030\220" +
    "\001\001\000\022\005\221\006\026\011\020\012\030\013" +
    "\015\032\032\036\031\045\021\001\001\000\022\006\033" +
    "\010\222\011\020\012\030\013\015\032\032\036\031\045" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\041\227\042\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\247" +
    "\006\026\011\020\012\030\013\015\032\032\036\031\045" +
    "\021\001\001\000\020\006\033\011\020\012\030\013\015" +
    "\032\032\036\031\045\021\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private SymbolsTable symbolsTable;
  private Backend backend;
  private LexerCup scanner;
  private C3a_generator c3a_g;
  private AssemblerGenerator assembler;

  private Stack<String> labelTrueStack;
  private Stack<String> labelFalseStack;

  public Parser(LexerCup scanner, SymbolFactory sf){
    super(scanner);
    this.scanner = scanner;
    this.symbolsTable = new SymbolsTable();
    this.backend = new Backend();
    this.c3a_g = new C3a_generator(backend);
    this.assembler = new AssemblerGenerator(symbolsTable, backend, c3a_g);
    this.labelTrueStack = new Stack<String>();
    this.labelFalseStack = new Stack<String>();
  }

  public void syntax_error(Symbol s) {
      report_error(
        "Syntax Error : " + s.value + " (" + (s.left+1) + ":" + (s.right+1) + ")\n", null
      );
  }

  public void unrecovered_syntax_error(Symbol s){
    try {
      scanner.closeTokensFile((s.left+1), (s.right+1));

      report_fatal_error(
        "Unrecovered Syntax Error : " + s.value + " (" + (s.left+1) + ":" + (s.right+1) + ")", null
      );
    } catch (Exception e) {
			e.printStackTrace();
		};
  }

  private void initTypes() {
    //init INT type
    Type int_type = new Type(TYPE.dtype, SUBJACENTTYPE.st_integer, 4, Integer.MIN_VALUE, Integer.MIN_VALUE);
    symbolsTable.add("int", int_type);
    
    // init String type
    Type str_type = new Type(TYPE.dtype, SUBJACENTTYPE.st_string, 2, 0, 0);
    symbolsTable.add("string", str_type);
    
    //init BOOLEAN type
    Type bool_type = new Type(TYPE.dtype,SUBJACENTTYPE.st_boolean,2,0,1);
    symbolsTable.add("boolean",bool_type);
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= STARTS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStarts start_val = (SymbolStarts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // STARTS ::= INIT DECLARE_FUNCTIONS 
            {
              SymbolStarts RESULT =null;
		
                              backend.storeTables();

                              //NOT OPTIMIZED CODE
                              c3a_g.savec3aInFile(false);
                              assembler.generateAssembler(false);
                              
                              //OPTIMIZED CODE
                              c3a_g.optimize();
                              c3a_g.savec3aInFile(true);
                              assembler.generateAssembler(true);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTS",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= 
            {
              SymbolInit RESULT =null;
		
                              initTypes();
                              RESULT = new SymbolInit();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARE_FUNCTIONS ::= DEFINE_FUNCTION DECLARE_FUNCTIONS 
            {
              SymbolDeclareFunctions RESULT =null;
		
                              RESULT = new SymbolDeclareFunctions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTIONS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARE_FUNCTIONS ::= CALL_MAIN 
            {
              SymbolDeclareFunctions RESULT =null;
		
                              RESULT = new SymbolDeclareFunctions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTIONS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CALL_MAIN ::= inst_function inst_main lparen rparen lbracket INSTRUCTIONS rbracket 
            {
              SymbolCallMain RESULT =null;
		
                              RESULT = new SymbolCallMain();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_MAIN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              SymbolInstructions RESULT =null;
		
                              RESULT = new SymbolInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTIONS ::= INSTRUCTION 
            {
              SymbolInstructions RESULT =null;
		
                              RESULT = new SymbolInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= DECLARATIONS 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= INSTRUCTION_IF 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= INSTRUCTION_WHILE 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= OPERATOR_ASSIG 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= INSTRUCTION_OUT 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= CALL_FUNCTION 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOCK_IN ::= 
            {
              SymbolBlockIn RESULT =null;
		
                              symbolsTable.enterBlock();
                              RESULT = new SymbolBlockIn();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_IN",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOCK_OUT ::= 
            {
              SymbolBlockOut RESULT =null;
		
                              symbolsTable.leaveBlock();
                              RESULT = new SymbolBlockOut();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_OUT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARATIONS ::= id separator DECLARATIONS 
            {
              SymbolDeclarations RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int declarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDeclarations declarations = (SymbolDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Type type = declarations.getType();
                              String backId;

                              if(type.getSubType() == SUBJACENTTYPE.st_string){
                                String value = declarations.getValue();
                                backId = backend.addStrVar(var_id,  0, backend.getLastProcedureId(), 0,type.getSize(), value);
                              }else{
                                backId = backend.addVar(var_id,  0, backend.getLastProcedureId(), 0,type.getSize(), type.getSubType());
                              }
                              
                              type.setBackendId(backId);

                              symbolsTable.add(var_id, type);

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                declarations.getVarId(),
                                null,
                                backId
                              );

                              RESULT = declarations;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARATIONS ::= id CONSTANT two_points id op_assig VALUE nextinstr 
            {
              SymbolDeclarations RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id_var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolConstant constant = (SymbolConstant)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int type_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int type_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              boolean isConst = constant != null ? constant.getIsConst() : false;

                              Type type = symbolsTable.get(type_id);

                              if(type.getType() != TYPE.dtype){
                                throw new Error("Type not valid");
                              }

                              if(type.getSubType() != SUBJACENTTYPE.st_boolean
                                && type.getSubType() != SUBJACENTTYPE.st_integer
                                && type.getSubType() != SUBJACENTTYPE.st_string ){
                                  throw new Error("Invalid subjacent type");
                              }

                              //IF LITERALL (type = null) CHECK SUBJACENT TYPE
                              if(value.getType() == TYPE.dnull && type.getSubType() != value.getSubType()){
                                throw new Error("Value and type must have same subjacent type");
                              }
                              
                              if(value.getType() != TYPE.dnull && value.getTypeName() != (String) type_id){
                                throw new Error("Value must have the same type");
                              }

                              Type var_type;

                              if(isConst){
                                var_type = new Type(TYPE.dconst, type_id, value.getValue());
                              }
                              else{
                                var_type = new Type(TYPE.dvar, type_id); 
                              }

                              int size = type.getSize();
                              if(value.getIsString()){
                                size = value.getStringSize();
                              }

                              String var_id;
                              if(type.getSubType() == SUBJACENTTYPE.st_string){
                                String str_value = (String) value.getValue();
                                var_id = backend.addStrVar(id_var,  0, backend.getLastProcedureId(), 0,type.getSize(), str_value);
                              }else{
                                var_id = backend.addVar(id_var,  0, backend.getLastProcedureId(), 0,type.getSize(), type.getSubType());
                              }

                              var_type.setBackendId(var_id);

                              String val_id = value.getVarId();
                              symbolsTable.add(id_var, var_type);

                              SymbolDeclarations symDcls;
                              if(value.getIsString()){
                                symDcls = new SymbolDeclarations(val_id, var_type, (String) value.getValue());
                              }else{
                                symDcls = new SymbolDeclarations(val_id, var_type);
                              }

                              if(type.getSubType() != SUBJACENTTYPE.st_string){
                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  val_id,
                                  null,
                                  var_id
                                );
                              }

                              RESULT = symDcls;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONSTANT ::= dconst 
            {
              SymbolConstant RESULT =null;
		
                              RESULT = new SymbolConstant(true);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONSTANT ::= 
            {
              SymbolConstant RESULT =null;
		
                              RESULT = new SymbolConstant(false);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERATOR_ASSIG ::= id op_assig VALUE nextinstr 
            {
              SymbolOperatorAssignation RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              Type varType = symbolsTable.get(var_id);
                              String type_id = varType.getTypeName();

                              if(varType.getType() == TYPE.dconst){
                                throw new Error("Cant assign value to constant");
                              }

                              //IF LITERALL (type = null) CHECK SUBJACENT TYPE
                              if(value.getType() == TYPE.dnull && varType.getSubType() == value.getSubType()){
                                throw new Error("Value and type must have same subjacent type");
                              }
                              
                              if(value.getType() != TYPE.dnull && value.getTypeName() != type_id){
                                throw new Error("Value must have the same type");
                              }

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                value.getVarId(),
                                null,
                                varType.getBackendId()
                              );

                              RESULT = new SymbolOperatorAssignation();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR_ASSIG",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INITIALIZE_ARITHMETICAL_OP ::= lparen ARITHMETICAL_OP rparen 
            {
              SymbolInitArithOp RESULT =null;
		int arith_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arith_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolArithOp arith_op = (SymbolArithOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              SymbolInitArithOp sym; 
                              if(arith_op.getIsConst()){
                                sym = new SymbolInitArithOp(arith_op.getVarId(),arith_op.getValue());
                              }else{
                                sym = new SymbolInitArithOp(arith_op.getVarId());
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INITIALIZE_ARITHMETICAL_OP",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARITHMETICAL_OP ::= ARITHMETICAL_OP op_arithmetical ARITHMETICAL_VALUE 
            {
              SymbolArithOp RESULT =null;
		int arith_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arith_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolArithOp arith_op = (SymbolArithOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arith_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arith_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArithValue arith_val = (SymbolArithValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              
                              SymbolArithOp sym;
                              boolean allConst = arith_op.getIsConst() && arith_val.getIsConst();

                              Code op_code;
                              switch(op){
                                case "+" : 
                                  op_code = Code.add;
                                  break;
                                case "-" : 
                                  op_code = Code.sub;
                                  break;
                                case "*" : 
                                  op_code = Code.prod;
                                  break;
                                case "/" : 
                                  op_code = Code.div;
                                  break;
                                case "%" : 
                                  op_code = Code.mod;
                                  break;
                                default : 
                                  throw new Error("Invalid arithmetical operator");
                              }

                              Integer value = null;
                              if(allConst) {
                                Integer val1 = (Integer) arith_op.getValue();
                                Integer val2 = (Integer) arith_val.getValue();

                                switch(op){
                                  case "+" : 
                                    value = val1 + val2;
                                    break;
                                  case "-" : 
                                    value = val1 - val2;
                                    break;
                                  case "*" : 
                                    value = val1 * val2;
                                    break;
                                  case "/" : 
                                    if(val2 == 0){
                                      throw new Error("Cannot divide by zero");
                                    }
                                    value = val1 / val2;
                                    break;
                                  case "%" : 
                                    value = val1 % val2;
                                    break;
                                }
                              }

                              Type type_int = symbolsTable.get("int");
                              
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_int.getSize(), type_int.getSubType());

                              c3a_g.generateC3aInstr(
                                op_code,
                                arith_op.getVarId(),
                                arith_val.getVarId(),
                                var_id
                              );

                              if(allConst){
                                sym = new SymbolArithOp(var_id, value);
                              }
                              else{
                                sym = new SymbolArithOp(var_id);
                              }

                              RESULT = sym;

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARITHMETICAL_OP ::= ARITHMETICAL_VALUE op_arithmetical ARITHMETICAL_VALUE 
            {
              SymbolArithOp RESULT =null;
		int arith_val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arith_val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolArithValue arith_val1 = (SymbolArithValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arith_val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arith_val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArithValue arith_val2 = (SymbolArithValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolArithOp sym;
                              boolean allConst = arith_val1.getIsConst() && arith_val2.getIsConst();

                              Code op_code;
                              
                              switch(op){
                                case "+" : 
                                  op_code = Code.add;
                                  break;
                                case "-" : 
                                  op_code = Code.sub;
                                  break;
                                case "*" : 
                                  op_code = Code.prod;
                                  break;
                                case "/" : 
                                  op_code = Code.div;
                                  break;
                                case "%" : 
                                  op_code = Code.mod;
                                  break;
                                default : 
                                  throw new Error("Invalid arithmetical operator");
                              }

                              Integer value = null;
                              if(allConst) {
                                Integer val1 = (Integer) arith_val1.getValue();
                                Integer val2 = (Integer) arith_val2.getValue();

                                switch(op){
                                  case "+" : 
                                    value = val1 + val2;
                                    break;
                                  case "-" : 
                                    value = val1 - val2;
                                    break;
                                  case "*" : 
                                    value = val1 * val2;
                                    break;
                                  case "/" : 
                                    if(val2 == 0){
                                      throw new Error("Cannot divide by zero");
                                    }
                                    value = val1 / val2;
                                    break;
                                  case "%" : 
                                    value = val1 % val2;
                                    break;
                                }
                              }

                              Type type_int = symbolsTable.get("int");
                              
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_int.getSize(), type_int.getSubType());

                              c3a_g.generateC3aInstr(
                                op_code,
                                arith_val1.getVarId(),
                                arith_val2.getVarId(),
                                var_id
                              );

                              if(allConst){
                                sym = new SymbolArithOp(var_id, value);
                              }
                              else{
                                sym = new SymbolArithOp(var_id);
                              }
                              
                              RESULT = sym;
                            

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARITHMETICAL_VALUE ::= lparen ARITHMETICAL_OP rparen 
            {
              SymbolArithValue RESULT =null;
		int arith_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arith_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolArithOp arith_op = (SymbolArithOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              SymbolArithValue sym;
                              String var_id = new String(arith_op.getVarId());

                              if(arith_op.getIsConst()){
                                sym = new SymbolArithValue(var_id, arith_op.getValue());
                              }else{
                                sym = new SymbolArithValue(var_id);
                              }

                              RESULT = sym;

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARITHMETICAL_VALUE ::= POS_NEG number 
            {
              SymbolArithValue RESULT =null;
		int negleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int negright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolPosNeg neg = (SymbolPosNeg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int n_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Integer value;
                              if(neg != null && neg.isNegative()){
                                value = Integer.valueOf("-" + n_val);
                              }
                              else{
                                value = Integer.valueOf(n_val);
                              }

                              Type type_int = symbolsTable.get("int");
                              
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(),  0, type_int.getSize(),  type_int.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                Integer.toString(value),
                                null,
                                var_id
                              );

                              RESULT = new SymbolArithValue(var_id, value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARITHMETICAL_VALUE ::= id 
            {
              SymbolArithValue RESULT =null;
		int id_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                              Type var_type = symbolsTable.get(id_val);
                              TYPE main_var_type = var_type.getType();

                              if(main_var_type != TYPE.darg && main_var_type != TYPE.dconst && main_var_type != TYPE.dvar){
                                throw new Error("Invalid arithmetic value type");
                              }

                              Type var_dtype = symbolsTable.get(var_type.getTypeName());

                              if(var_dtype.getSubType() != SUBJACENTTYPE.st_integer){
                                throw new Error("Invalid subjacent type");
                              }

                              SymbolArithValue sym;
                              String var_id = new String(var_type.getBackendId());

                              if(main_var_type == TYPE.dconst){
                                Integer value = (Integer) var_type.getValue();
                                sym = new SymbolArithValue(var_id, value);
                              }else{
                                sym = new SymbolArithValue(var_id);
                              }

                              RESULT = sym;
                            
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // POS_NEG ::= op_arithmetical 
            {
              SymbolPosNeg RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                              if(!op.equals("+") && !op.equals("-")){
                                throw new Error("Sign operator not valid");
                              }

                              boolean isNegative = true;
                              
                              if(op.equals("+")){
                                isNegative = false;
                              }

                              RESULT = new SymbolPosNeg(isNegative);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("POS_NEG",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // POS_NEG ::= EMPTY 
            {
              SymbolPosNeg RESULT =null;
		
                              RESULT = new SymbolPosNeg(false);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("POS_NEG",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALUE ::= INITIALIZE_ARITHMETICAL_OP 
            {
              SymbolValue RESULT =null;
		int arith_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arith_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolInitArithOp arith_op = (SymbolInitArithOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;
                              String var_id = arith_op.getVarId();
                              if(arith_op.getIsConst()){
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_integer, arith_op.getValue());
                              }else{
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_integer);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALUE ::= POS_NEG number 
            {
              SymbolValue RESULT =null;
		int negleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int negright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolPosNeg neg = (SymbolPosNeg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int n_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Integer value;

                              if(neg != null && neg.isNegative()){
                                value = Integer.valueOf("-" + n_val);
                              }
                              else{
                                value = Integer.valueOf(n_val);
                              }

                              Type type_int = symbolsTable.get("int");
                              
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_int.getSize(), type_int.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                Integer.toString(value),
                                null,
                                var_id
                              );

                              RESULT = new SymbolValue(var_id, SUBJACENTTYPE.st_integer, value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALUE ::= string 
            {
              SymbolValue RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                             //delete quotes
                              value = value.replace("\"", "");
                              Type type_string = symbolsTable.get("string");
                              
                              // string size in bytes
                              int stringSize = value.length() * type_string.getSize();

                              if (value.length() > 999){
                                throw new Error("String must be shorter than 1000 characters.");
                              }
                              
                              SymbolValue sym = new SymbolValue(value, stringSize);

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALUE ::= bool 
            {
              SymbolValue RESULT =null;
		int bool_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bool_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = Boolean.valueOf(bool_val);
                              Type type_bool = symbolsTable.get("boolean");

                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_bool.getSize(), type_bool.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                bool_val,
                                null,
                                var_id
                              );                                 

                              RESULT = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean, value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALUE ::= id 
            {
              SymbolValue RESULT =null;
		int id_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;
                              
                              Type val_type = symbolsTable.get(id_val);
                              String var_id = new String(val_type.getBackendId());

                              if(val_type.getType() == TYPE.dconst){
                                sym = new SymbolValue(var_id, val_type.getType(), val_type.getTypeName(), val_type.getValue());
                              }
                              else {
                                sym = new SymbolValue(var_id, val_type.getType(), val_type.getTypeName());
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALUE ::= INITIALIZE_BOOLEAN_OP 
            {
              SymbolValue RESULT =null;
		int bool_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolInitBoolOp bool_op = (SymbolInitBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;
                              String var_id = new String(bool_op.getVarId());
                              if(bool_op.getIsConst()){
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean, bool_op.getValue());
                              }else{
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALUE ::= CALL_FUNCTION 
            {
              SymbolValue RESULT =null;
		int call_fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int call_fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCallFunction call_fn = (SymbolCallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                              Type dfn_type = symbolsTable.get(fn_type.getTypeName());
                              
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, fn_type.getSize(), dfn_type.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                call_fn.getBackendId(),
                                null,
                                var_id
                              );                                

                              RESULT = new SymbolValue(var_id, TYPE.dfun, fn_type.getTypeName());
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALUE ::= instr_in lparen id rparen 
            {
              SymbolValue RESULT =null;
		
                              Type int_type = symbolsTable.get("int");
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, int_type.getSize(), int_type.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.input,
                                null,
                                null,
                                var_id
                              );


                              RESULT = new SymbolValue(var_id, int_type.getSubType());
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INITIALIZE_BOOLEAN_OP ::= lparen BOOLEAN_OP rparen 
            {
              SymbolInitBoolOp RESULT =null;
		int bool_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bool_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              SymbolInitBoolOp sym; 
                              if(bool_op.getIsConst()){
                                sym = new SymbolInitBoolOp(bool_op.getVarId(),bool_op.getValue());
                              }else{
                                sym = new SymbolInitBoolOp(bool_op.getVarId());
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INITIALIZE_BOOLEAN_OP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BOOLEAN_OP ::= BOOLEAN_OP op_logical BOOLEAN_VALUE 
            {
              SymbolBoolOp RESULT =null;
		int bool_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bool_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bool_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBoolValue bool_val = (SymbolBoolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolBoolOp sym;
                              Code op_code;

                              switch(op){
                                case "&&":
                                  op_code = Code.and;
                                  break;
                                case "||":
                                  op_code = Code.or;
                                  break;
                                default : 
                                  throw new Error("Invalid boolean operator");
                              }

                              boolean allConst = bool_op.getIsConst() && bool_val.getIsConst();
                              Boolean value = null;

                              if(allConst){
                                Boolean val1 = (Boolean) bool_op.getValue();
                                Boolean val2 = (Boolean) bool_val.getValue();
                                switch(op){
                                case "&&":
                                  value = val1 && val2;
                                  break;
                                case "||":
                                  value = val1 || val2; 
                                  break;
                                }
                              }

                              Type type_bool = symbolsTable.get("boolean"); 
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_bool.getSize(), type_bool.getSubType());
                              
                              String val1_id = bool_val.getVarId();
                              String val2_id = bool_op.getVarId();
                              c3a_g.generateC3aInstr(
                                op_code,
                                val1_id,
                                val2_id,
                                var_id
                              );                         
                              
                              if(allConst){
                                sym = new SymbolBoolOp(var_id, value);
                              }else{
                                sym = new SymbolBoolOp(var_id);
                              }

                              RESULT = sym;

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BOOLEAN_OP ::= BOOLEAN_VALUE 
            {
              SymbolBoolOp RESULT =null;
		int bool_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBoolValue bool_val = (SymbolBoolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolBoolOp sym;

                              String var_id = new String(bool_val.getVarId());
                              if(bool_val.getIsConst()){
                                sym = new SymbolBoolOp(var_id, bool_val.getValue());
                              }
                              else{
                                sym = new SymbolBoolOp(var_id);
                              }

                              RESULT = sym;
                              
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BOOLEAN_VALUE ::= bool 
            {
              SymbolBoolValue RESULT =null;
		int bool_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bool_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = Boolean.valueOf(bool_val);
                              
                              Type type_bool = symbolsTable.get("boolean");
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_bool.getSize(), type_bool.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                bool_val,
                                null,
                                var_id
                              );

                              RESULT = new SymbolBoolValue(var_id, value);

                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BOOLEAN_VALUE ::= id 
            {
              SymbolBoolValue RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Type var_type = symbolsTable.get(id_var);
                              TYPE main_var_type = var_type.getType();

                              if(main_var_type != TYPE.dconst || main_var_type != TYPE.dvar || main_var_type != TYPE.darg){
                                throw new Error("");
                              }
                              
                              Type dtype_type = symbolsTable.get(var_type.getTypeName());
                              if(dtype_type.getSubType() != SUBJACENTTYPE.st_boolean){
                                throw new Error("Must be boolean variable or constant");
                              }

                              SymbolBoolValue sym;
                              String backId = new String(var_type.getBackendId());

                              if(TYPE.dconst == main_var_type){
                                Boolean value = (Boolean) var_type.getValue();
                                sym = new SymbolBoolValue(backId, value);
                              }else{
                                sym = new SymbolBoolValue(backId);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BOOLEAN_VALUE ::= lparen BOOLEAN_OP rparen 
            {
              SymbolBoolValue RESULT =null;
		int bool_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bool_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              SymbolBoolValue sym;
                              String id = new String(bool_op.getVarId()); 
                              if(bool_op.getIsConst()){
                                Boolean value = (Boolean) bool_op.getValue();
                                sym = new SymbolBoolValue(id, value);
                              }else{
                                sym = new SymbolBoolValue(id); 
                              }

                              RESULT = sym;
                              
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BOOLEAN_VALUE ::= VALUE_COMPARISON 
            {
              SymbolBoolValue RESULT =null;
		int comp_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comp_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValueComparison comp_val = (SymbolValueComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolBoolValue sym;
                              String id = new String(comp_val.getVarId()); 
                              if(comp_val.getIsConst()){
                                sym = new SymbolBoolValue(id, comp_val.getValue());
                              }else{
                                sym = new SymbolBoolValue(id); 
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALUE_COMPARISON ::= VALUE op_relational VALUE 
            {
              SymbolValueComparison RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolValue val1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValue val2 = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                              SymbolValueComparison sym;

                              TYPE type1 = val1.getType();
                              SUBJACENTTYPE subType1;
                              
                              if(val1.getType() == TYPE.dnull){
                                subType1 = val1.getSubType();
                              }else{
                                if(type1 != TYPE.dvar && type1 != TYPE.dconst && type1 != TYPE.darg && type1 != TYPE.dfun) {
                                  throw new Error("Value 1 of comparison wrong type");
                                }
                                Type dtype_type = symbolsTable.get(val1.getTypeName());
                                subType1 = dtype_type.getSubType();
                              }
                              // SAME FOR VALUE2
                              TYPE type2 = val2.getType();
                              SUBJACENTTYPE subType2;

                              if(val2.getType() == TYPE.dnull){
                                subType2 = val2.getSubType();
                              }else{
                                if(type2 != TYPE.dvar && type2 != TYPE.dconst && type2 != TYPE.darg && type2 != TYPE.dfun) {
                                  throw new Error("Value 2 of comparison wrong type");
                                }
                                Type dtype_type = symbolsTable.get(val2.getTypeName());
                                subType2 = dtype_type.getSubType();
                              }

                              //Check same subtype
                              if(subType1 != subType2) {
                                throw new Error("Value 1 subtype is different from value 2");
                              }

                              Code op_code = Code.EQ;
                              switch(op){
                                case "=":
                                  op_code = Code.EQ;
                                  break;
                                case "!=":
                                  op_code = Code.NE;
                                  break;
                                case "<": 
                                  if(subType1 != SUBJACENTTYPE.st_integer) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.LT;
                                  break;
                                case "<=":
                                  if(subType1 != SUBJACENTTYPE.st_integer) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.LE;
                                  break;
                                case ">": 
                                  if(subType1 != SUBJACENTTYPE.st_integer) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.GT;
                                  break;
                                case ">=":
                                  if(subType1 != SUBJACENTTYPE.st_integer) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.GE;
                                  break;
                              }

                              boolean allConst = val1.getIsConst() && val2.getIsConst();
                              
                              Boolean val = null;
                              if(allConst){
                                switch(op){
                                  case "=":
                                    if(subType1 == SUBJACENTTYPE.st_integer){
                                       val = (Integer) val1.getValue() == (Integer) val2.getValue();
                                    }
                                    if(subType1 == SUBJACENTTYPE.st_string){
                                      val = ((String)val1.getValue()).equals((String) val2.getValue());
                                    }
                                    if(subType1 == SUBJACENTTYPE.st_boolean){
                                      val = (Boolean) val1.getValue() == (Boolean) val2.getValue();
                                    }
                                    break;
                                  case "!=":
                                    if(subType1 == SUBJACENTTYPE.st_integer){
                                      val = (Integer) val1.getValue() != (Integer) val2.getValue();
                                    }
                                    if(subType1 == SUBJACENTTYPE.st_string){
                                      val = !((String)val1.getValue()).equals((String) val2.getValue());
                                    }
                                    if(subType1 == SUBJACENTTYPE.st_boolean){
                                      val = (Boolean) val1.getValue() != (Boolean) val2.getValue();
                                    }
                                    break;

                                  // only integer operators
                                  case "<": 
                                    val = (Integer) val1.getValue() < (Integer) val2.getValue();
                                    break;
                                  case "<=":
                                    val = (Integer) val1.getValue() <= (Integer) val2.getValue();
                                    break;
                                  case ">": 
                                    val = (Integer) val1.getValue() > (Integer) val2.getValue();
                                    break;
                                  case ">=":
                                    val = (Integer) val1.getValue() >= (Integer) val2.getValue();
                                    break;
                                }
                              }

                              Type type_bool = symbolsTable.get("boolean");
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_bool.getSize(), type_bool.getSubType());
                              
                              if(allConst){
                                sym = new SymbolValueComparison(var_id, val);
                              }else{
                                sym = new SymbolValueComparison(var_id);
                              }

                              c3a_g.generateC3aInstr(
                                op_code,
                                val1.getVarId(),
                                val2.getVarId(),
                                var_id
                              );

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_COMPARISON",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COND ::= INITIALIZE_BOOLEAN_OP 
            {
              SymbolCondition RESULT =null;
		int bool_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolInitBoolOp bool_op = (SymbolInitBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                String var_id = bool_op.getVarId();

                                String true_label = backend.addLabel();
                                String false_label = backend.addLabel();

                                labelTrueStack.push(true_label);
                                labelFalseStack.push(false_label);
                                
                                
                                c3a_g.generateC3aInstr(
                                  Code.jump_cond,
                                  var_id,
                                  "true",
                                  true_label
                                );

                                c3a_g.generateC3aInstr(
                                  Code.go_to,
                                  null,
                                  null,
                                  false_label
                                );

                                RESULT = new SymbolCondition();
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COND_T ::= 
            {
              SymbolConditionTrue RESULT =null;
		
                                String label = labelTrueStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new SymbolConditionTrue();   
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_T",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COND_F ::= 
            {
              SymbolConditionFalse RESULT =null;
		
                                String label = labelFalseStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new SymbolConditionFalse();   
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_F",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTRUCTION_IF ::= inst_if COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket ELIF ELSE 
            {
              SymbolInstructionIf RESULT =null;
		
                              RESULT = new SymbolInstructionIf();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_IF",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // M_END ::= EMPTY 
            {
              SymbolMEnd RESULT =null;
		
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolMEnd(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_END",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELIF ::= M_END inst_elif COND_F COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket ELIF 
            {
              SymbolElif RESULT =null;
		int mendleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int mendright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		SymbolMEnd mend = (SymbolMEnd)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolElif();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELIF ::= 
            {
              SymbolElif RESULT =null;
		
                              RESULT = new SymbolElif();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELSE ::= M_END inst_else lbracket BLOCK_IN COND_F INSTRUCTIONS BLOCK_OUT rbracket 
            {
              SymbolElse RESULT =null;
		int mendleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int mendright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymbolMEnd mend = (SymbolMEnd)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolElse();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELSE ::= COND_F 
            {
              SymbolElse RESULT =null;
		
                              RESULT = new SymbolElse();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // M_WHILE ::= EMPTY 
            {
              SymbolMWhile RESULT =null;
		 
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolMWhile(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_WHILE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INSTRUCTION_WHILE ::= inst_while M_WHILE COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket 
            {
              SymbolInstructionWhile RESULT =null;
		int mwhileleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int mwhileright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymbolMWhile mwhile = (SymbolMWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                              String loop_label = mwhile.getLabel();
                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                loop_label
                              );

                              String end_label = labelFalseStack.pop();
                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                end_label
                              );

                              RESULT = new SymbolInstructionWhile();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_WHILE",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CALL_FUNCTION ::= inst_call id lparen rparen 
            {
              SymbolCallFunction RESULT =null;
		int fun_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fun_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                              // Check if function and has params 
                              int num_params = symbolsTable.getNumParams(fun_id);
                              if(num_params > 0 ){
                                throw new Error("Missing parameters. Function " + fun_id + " has " + num_params + " parameters.");
                              }

                              Type fun_type = symbolsTable.get(fun_id);
                              String id = fun_type.getBackendId();
                              c3a_g.generateC3aInstr(
                                Code.call,
                                null,
                                null,
                                id
                              );

                              RESULT = new SymbolCallFunction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CALL_FUNCTION ::= inst_call CALL_BODY rparen 
            {
              SymbolCallFunction RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolCallBody body = (SymbolCallBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              int body_params = body.getNumParams();
                              String fun_id = body.getFunId();
                              int fun_params = symbolsTable.getNumParams(fun_id);

                              if(fun_params != body_params){
                                throw new Error("Incorrect number of parameters :"+ body_params + ".Function " + fun_id + " has " + fun_params + "params");
                              }

                              String fun_backId = body.getFunBackId();
                              c3a_g.generateC3aInstr(
                                Code.call,
                                null,
                                null,
                                fun_backId
                              );

                              RESULT = new SymbolCallFunction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CALL_BODY ::= CALL_BODY separator VALUE 
            {
              SymbolCallBody RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolCallBody body = (SymbolCallBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              String fun_id = body.getFunId();
                              int num_params = body.getNumParams();
                              SUBJACENTTYPE subType;

                              if(value.getType() == TYPE.dnull){
                                subType = value.getSubType();
                              }
                              else{
                                if(value.getType() != TYPE.dvar && value.getType() != TYPE.dconst && value.getType() != TYPE.darg){
                                  throw new Error(fun_id + ". Incorrect type for param "+ num_params);
                                }
                                Type value_type = symbolsTable.get(value.getTypeName());
                                subType = value_type.getSubType();
                              }

                              //Check param type with function param type
                              SUBJACENTTYPE paramSubType = symbolsTable.getParam(fun_id, num_params).getSubType();

                              if(paramSubType != subType){
                                throw new Error(fun_id + ". Incorrect type for param " + num_params + ". Expected " + subType + " but got " + paramSubType);
                              }

                              String fun_back_id = body.getFunBackId();
                              c3a_g.generateC3aInstr(
                                Code.param,
                                value.getVarId(),
                                null,
                                fun_back_id
                              );

                              RESULT = new SymbolCallBody(fun_id, fun_back_id, num_params+1);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_BODY",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CALL_BODY ::= id lparen VALUE 
            {
              SymbolCallBody RESULT =null;
		int fun_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fun_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SUBJACENTTYPE subType;

                              if(value.getType() == TYPE.dnull){
                                subType = value.getSubType();
                              }
                              else{
                                if(value.getType() != TYPE.dvar && value.getType() != TYPE.dconst && value.getType() != TYPE.darg){
                                  throw new Error(fun_id + ". Incorrect type for param 0");
                                }
                                Type value_type = symbolsTable.get(value.getTypeName());
                                subType = value_type.getSubType();
                              }

                              //Check param type with function param type
                              SUBJACENTTYPE paramSubType = symbolsTable.getParam(fun_id, 0).getSubType();

                              if(paramSubType != subType){
                                throw new Error(fun_id + ". Incorrect type for param 0. Expected " + subType + " but got " + paramSubType);
                              }

                              Type fun_type = symbolsTable.get(fun_id);
                              String fun_back_id = fun_type.getBackendId();

                              c3a_g.generateC3aInstr(
                                Code.param,
                                value.getVarId(),
                                null,
                                fun_back_id
                              );

                              RESULT = new SymbolCallBody(fun_id, fun_back_id, 0+1);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_BODY",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INSTRUCTION_OUT ::= instr_out lparen VALUE rparen nextinstr 
            {
              SymbolInstructionOut RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                              String var_id = value.getVarId();
                              String subtype_name;

                              if(value.getType() == TYPE.dnull){
                                subtype_name = value.getSubType().toString();
                              }else{
                                Type var_type = symbolsTable.get(value.getTypeName());
                                subtype_name = var_type.getSubType().toString();
                              }

                              if(value.getType() == TYPE.dnull && value.getSubType() == SUBJACENTTYPE.st_string){
                                var_id = backend.addTempStrVar(backend.getLastProcedureId(), 0,value.getStringSize(), (String) value.getValue());
                              }

                              c3a_g.generateC3aInstr(
                                Code.output,
                                subtype_name,
                                null,
                                var_id
                              );

                              RESULT = new SymbolInstructionOut();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OUT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DEFINE_FUNCTION ::= FUNCTION_HEAD lbracket BLOCK_IN FUNCTION_BODY FUNCTION_RETURN BLOCK_OUT rbracket 
            {
              SymbolDefFunction RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINE_FUNCTION",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCTION_HEAD ::= inst_function id FUNCTION_PARAMS rparen two_points id 
            {
              SymbolFunHead RESULT =null;
		int fun_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fun_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int type_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_HEAD",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCTION_PARAMS ::= FUNCTION_W_PARAMS 
            {
              SymbolFunParams RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_PARAMS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNCTION_PARAMS ::= lparen 
            {
              SymbolFunParams RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_PARAMS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCTION_W_PARAMS ::= FUNCTION_W_PARAMS separator id two_points id 
            {
              SymbolFunWParams RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int type_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_W_PARAMS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCTION_W_PARAMS ::= lparen id two_points id 
            {
              SymbolFunWParams RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int type_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_W_PARAMS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCTION_BODY ::= INSTRUCTIONS 
            {
              SymbolFunBody RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCTION_BODY ::= 
            {
              SymbolFunBody RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCTION_RETURN ::= inst_return VALUE nextinstr 
            {
              SymbolFunReturn RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_RETURN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCTION_RETURN ::= 
            {
              SymbolFunReturn RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_RETURN",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EMPTY ::= 
            {
              SymbolEmpty RESULT =null;
		 RESULT = new SymbolEmpty(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EMPTY",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
