
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Sin;

import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import Symbols.*;
import SymbolsTable.*;
import SymbolsTable.Type.TYPE;
import SymbolsTable.Type.SUBJACENTTYPE;
import Lex.*;
import backend.*;
import Errors.*;
import java.util.Stack;
import java.util.ArrayList;
import backend.Instruction.Code;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\043\004\000\002\043\003\000\002\005\012" +
    "\000\002\004\002\000\002\006\003\000\002\006\003\000" +
    "\002\007\004\000\002\007\003\000\002\010\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\011\002\000\002\012\002" +
    "\000\002\013\005\000\002\013\010\000\002\014\003\000" +
    "\002\014\003\000\002\022\005\000\002\024\003\000\002" +
    "\024\003\000\002\025\005\000\002\025\006\000\002\025" +
    "\005\000\002\015\003\000\002\015\005\000\002\015\004" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\004\000\002\016\003\000\002" +
    "\016\005\000\002\016\004\000\002\016\004\000\002\017" +
    "\003\000\002\017\005\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\004\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\006\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\004\000" +
    "\002\030\003\000\002\030\004\000\002\020\003\000\002" +
    "\020\004\000\002\020\005\000\002\031\007\000\002\031" +
    "\005\000\002\033\005\000\002\035\002\000\002\034\002" +
    "\000\002\036\014\000\002\032\003\000\002\037\015\000" +
    "\002\037\002\000\002\040\012\000\002\040\003\000\002" +
    "\041\003\000\002\042\013\000\002\052\005\000\002\052" +
    "\004\000\002\053\005\000\002\053\005\000\002\023\006" +
    "\000\002\044\011\000\002\045\010\000\002\046\003\000" +
    "\002\046\003\000\002\047\007\000\002\047\006\000\002" +
    "\050\003\000\002\050\002\000\002\051\005\000\002\051" +
    "\003\000\002\054\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\022\uffff\001\002\000\004\022\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\004\275\036\274\001\002\000\004\022\007\001" +
    "\002\000\004\002\ufffd\001\002\000\004\002\000\001\002" +
    "\000\004\031\014\001\002\000\016\004\ufff0\016\ufff0\021" +
    "\ufff0\023\ufff0\026\ufff0\032\ufff0\001\002\000\016\004\020" +
    "\016\016\021\024\023\uffa6\026\023\032\uffa6\001\002\000" +
    "\004\027\201\001\002\000\004\033\234\001\002\000\014" +
    "\015\224\024\220\027\131\034\223\035\uffa3\001\002\000" +
    "\004\033\217\001\002\000\004\033\216\001\002\000\004" +
    "\027\213\001\002\000\004\027\uffa3\001\002\000\006\023" +
    "\171\032\uffa3\001\002\000\016\004\ufff7\016\ufff7\021\ufff7" +
    "\023\ufff7\026\ufff7\032\ufff7\001\002\000\016\004\020\016" +
    "\016\021\024\023\uffa7\026\023\032\uffa7\001\002\000\004" +
    "\033\166\001\002\000\016\004\ufff4\016\ufff4\021\ufff4\023" +
    "\ufff4\026\ufff4\032\ufff4\001\002\000\016\004\ufff5\016\ufff5" +
    "\021\ufff5\023\ufff5\026\ufff5\032\ufff5\001\002\000\006\030" +
    "\034\034\035\001\002\000\020\010\uffb1\011\uffb1\013\uffb1" +
    "\014\uffb1\030\uffb1\033\uffb1\034\uffb1\001\002\000\022\004" +
    "\052\005\040\006\037\007\046\012\047\014\053\025\060" +
    "\027\055\001\002\000\012\011\uffc7\030\uffcf\033\uffcf\034" +
    "\uffcf\001\002\000\012\010\uffd8\030\uffd8\033\uffd8\034\uffd8" +
    "\001\002\000\016\010\uffe4\013\uffe4\014\uffe4\030\uffe4\033" +
    "\uffe4\034\uffe4\001\002\000\012\011\uffc6\030\uffd2\033\uffd2" +
    "\034\uffd2\001\002\000\006\030\uffb0\034\uffb0\001\002\000" +
    "\020\010\uffce\011\uffc4\013\uffde\014\uffde\030\uffce\033\uffce" +
    "\034\uffce\001\002\000\016\010\uffd3\013\uffe1\014\uffe1\030" +
    "\uffd3\033\uffd3\034\uffd3\001\002\000\004\011\154\001\002" +
    "\000\014\010\uffc2\011\uffc2\030\uffc2\033\uffc2\034\uffc2\001" +
    "\002\000\014\004\052\007\046\012\143\014\123\027\146" +
    "\001\002\000\012\010\uffd5\030\uffd5\033\uffd5\034\uffd5\001" +
    "\002\000\006\013\134\014\135\001\002\000\022\010\uffdc" +
    "\011\uffdc\013\uffdc\014\uffdc\027\131\030\uffdc\033\uffdc\034" +
    "\uffdc\001\002\000\014\004\052\005\040\012\106\014\105" +
    "\027\112\001\002\000\016\010\uffd0\013\uffdf\014\uffdf\030" +
    "\uffd0\033\uffd0\034\uffd0\001\002\000\022\004\052\005\040" +
    "\006\037\007\046\012\047\014\053\025\060\027\055\001" +
    "\002\000\012\011\uffc9\030\uffd4\033\uffd4\034\uffd4\001\002" +
    "\000\016\011\uffc8\013\uffe0\014\uffe0\030\uffd6\033\uffd6\034" +
    "\uffd6\001\002\000\004\027\061\001\002\000\004\030\062" +
    "\001\002\000\012\010\uffcd\030\uffcd\033\uffcd\034\uffcd\001" +
    "\002\000\010\010\uffcf\011\uffc7\030\104\001\002\000\010" +
    "\010\uffd2\011\uffc6\030\103\001\002\000\004\010\100\001" +
    "\002\000\012\010\uffd3\013\uffe1\014\uffe1\030\077\001\002" +
    "\000\006\010\uffd5\030\076\001\002\000\012\010\uffd0\013" +
    "\uffdf\014\uffdf\030\075\001\002\000\010\010\uffd4\011\uffc9" +
    "\030\074\001\002\000\014\010\uffd6\011\uffc8\013\uffe0\014" +
    "\uffe0\030\073\001\002\000\020\010\uffdb\011\uffdb\013\uffdb" +
    "\014\uffdb\030\uffdb\033\uffdb\034\uffdb\001\002\000\014\010" +
    "\uffc0\011\uffc0\030\uffc0\033\uffc0\034\uffc0\001\002\000\016" +
    "\010\uffe5\013\uffe5\014\uffe5\030\uffe5\033\uffe5\034\uffe5\001" +
    "\002\000\012\010\uffd7\030\uffd7\033\uffd7\034\uffd7\001\002" +
    "\000\016\010\uffe3\013\uffe3\014\uffe3\030\uffe3\033\uffe3\034" +
    "\uffe3\001\002\000\022\004\052\005\040\006\037\007\046" +
    "\012\047\014\053\025\060\027\055\001\002\000\004\030" +
    "\102\001\002\000\014\010\uffbf\011\uffbf\030\uffbf\033\uffbf" +
    "\034\uffbf\001\002\000\014\010\uffbe\011\uffbe\030\uffbe\033" +
    "\uffbe\034\uffbe\001\002\000\014\010\uffcb\011\uffcb\030\uffcb" +
    "\033\uffcb\034\uffcb\001\002\000\014\004\125\005\040\012" +
    "\106\014\105\027\127\001\002\000\012\004\125\012\106" +
    "\014\123\027\124\001\002\000\016\010\uffdd\013\uffdd\014" +
    "\uffdd\030\uffdd\033\uffdd\034\uffdd\001\002\000\020\010\uffd9" +
    "\011\uffd9\013\uffd9\014\uffd9\030\uffd9\033\uffd9\034\uffd9\001" +
    "\002\000\016\010\uffe2\013\uffe2\014\uffe2\030\uffe2\033\uffe2" +
    "\034\uffe2\001\002\000\014\004\052\005\040\012\106\014" +
    "\053\027\117\001\002\000\016\010\uffde\013\uffde\014\uffde" +
    "\030\uffde\033\uffde\034\uffde\001\002\000\010\013\uffe0\014" +
    "\uffe0\030\073\001\002\000\010\013\uffdf\014\uffdf\030\121" +
    "\001\002\000\010\013\uffe1\014\uffe1\030\077\001\002\000" +
    "\014\004\052\005\040\012\106\014\053\027\117\001\002" +
    "\000\010\013\uffdf\014\uffdf\030\075\001\002\000\016\010" +
    "\uffe6\013\uffe6\014\uffe6\030\uffe6\033\uffe6\034\uffe6\001\002" +
    "\000\020\010\uffda\011\uffda\013\uffda\014\uffda\030\uffda\033" +
    "\uffda\034\uffda\001\002\000\012\004\125\012\106\014\123" +
    "\027\124\001\002\000\012\004\125\012\106\014\123\027" +
    "\124\001\002\000\020\010\uffdc\011\uffdc\013\uffdc\014\uffdc" +
    "\030\uffdc\033\uffdc\034\uffdc\001\002\000\004\030\073\001" +
    "\002\000\014\004\125\005\040\012\106\014\105\027\127" +
    "\001\002\000\004\030\077\001\002\000\024\004\052\005" +
    "\040\006\037\007\046\012\047\014\053\025\060\027\055" +
    "\030\133\001\002\000\006\030\uffaf\034\uffaf\001\002\000" +
    "\020\010\uffb2\011\uffb2\013\uffb2\014\uffb2\030\uffb2\033\uffb2" +
    "\034\uffb2\001\002\000\014\004\uffe8\005\uffe8\012\uffe8\014" +
    "\uffe8\027\uffe8\001\002\000\014\004\uffe9\005\uffe9\012\uffe9" +
    "\014\uffe9\027\uffe9\001\002\000\014\004\052\005\040\012" +
    "\106\014\053\027\117\001\002\000\016\010\uffe0\013\uffe0" +
    "\014\uffe0\030\uffe0\033\uffe0\034\uffe0\001\002\000\016\010" +
    "\uffdf\013\uffdf\014\uffdf\030\uffdf\033\uffdf\034\uffdf\001\002" +
    "\000\016\010\uffe7\013\134\014\135\030\uffe7\033\uffe7\034" +
    "\uffe7\001\002\000\016\010\uffe1\013\uffe1\014\uffe1\030\uffe1" +
    "\033\uffe1\034\uffe1\001\002\000\014\004\125\007\046\012" +
    "\143\014\123\027\152\001\002\000\014\010\uffc3\011\uffc3" +
    "\030\uffc3\033\uffc3\034\uffc3\001\002\000\014\010\uffc1\011" +
    "\uffc1\030\uffc1\033\uffc1\034\uffc1\001\002\000\022\004\052" +
    "\005\040\006\037\007\046\012\047\014\053\025\060\027" +
    "\055\001\002\000\014\010\uffd1\011\uffc5\030\uffd1\033\uffd1" +
    "\034\uffd1\001\002\000\010\010\uffcf\011\uffc7\030\151\001" +
    "\002\000\014\010\uffca\011\uffca\030\uffca\033\uffca\034\uffca" +
    "\001\002\000\014\004\125\007\046\012\143\014\123\027" +
    "\152\001\002\000\004\030\074\001\002\000\014\004\052" +
    "\007\046\012\156\014\123\027\163\001\002\000\014\010" +
    "\uffcc\011\uffcc\030\uffcc\033\uffcc\034\uffcc\001\002\000\014" +
    "\004\052\007\046\012\143\014\123\027\146\001\002\000" +
    "\014\010\uffc4\011\uffc4\030\uffc4\033\uffc4\034\uffc4\001\002" +
    "\000\014\010\uffc8\011\uffc8\030\uffc8\033\uffc8\034\uffc8\001" +
    "\002\000\014\010\uffc9\011\uffc9\030\uffc9\033\uffc9\034\uffc9" +
    "\001\002\000\014\010\uffc7\011\uffc7\030\uffc7\033\uffc7\034" +
    "\uffc7\001\002\000\022\004\052\005\040\006\037\007\046" +
    "\012\047\014\053\025\060\027\055\001\002\000\014\010" +
    "\uffc6\011\uffc6\030\uffc6\033\uffc6\034\uffc6\001\002\000\014" +
    "\010\uffc5\011\uffc5\030\uffc5\033\uffc5\034\uffc5\001\002\000" +
    "\016\004\ufff3\016\ufff3\021\ufff3\023\ufff3\026\ufff3\032\ufff3" +
    "\001\002\000\016\004\ufff8\016\ufff8\021\ufff8\023\ufff8\026" +
    "\ufff8\032\ufff8\001\002\000\004\032\uffef\001\002\000\022" +
    "\004\052\005\040\006\037\007\046\012\047\014\053\025" +
    "\060\027\055\001\002\000\004\032\uffa4\001\002\000\004" +
    "\033\174\001\002\000\004\032\uffa5\001\002\000\004\032" +
    "\176\001\002\000\004\022\uffad\001\002\000\004\027\201" +
    "\001\002\000\004\027\uffb4\001\002\000\014\004\052\007" +
    "\046\012\156\014\123\027\163\001\002\000\004\031\203" +
    "\001\002\000\012\004\ufff0\016\ufff0\021\ufff0\026\ufff0\001" +
    "\002\000\012\004\uffbc\016\uffbc\021\uffbc\026\uffbc\001\002" +
    "\000\012\004\020\016\016\021\024\026\023\001\002\000" +
    "\014\004\020\016\016\021\024\026\023\032\uffef\001\002" +
    "\000\004\032\210\001\002\000\016\004\uffb3\016\uffb3\021" +
    "\uffb3\023\uffb3\026\uffb3\032\uffb3\001\002\000\006\011\154" +
    "\030\212\001\002\000\004\031\uffbd\001\002\000\022\004" +
    "\052\005\040\006\037\007\046\012\047\014\053\025\060" +
    "\027\055\001\002\000\004\030\215\001\002\000\004\033" +
    "\uffae\001\002\000\016\004\ufff1\016\ufff1\021\ufff1\023\ufff1" +
    "\026\ufff1\032\ufff1\001\002\000\016\004\ufff6\016\ufff6\021" +
    "\ufff6\023\ufff6\026\ufff6\032\ufff6\001\002\000\004\035\uffec" +
    "\001\002\000\004\035\230\001\002\000\004\035\uffeb\001" +
    "\002\000\004\004\227\001\002\000\022\004\052\005\040" +
    "\006\037\007\046\012\047\014\053\025\060\027\055\001" +
    "\002\000\004\033\uffea\001\002\000\004\033\uffee\001\002" +
    "\000\010\024\220\034\223\035\uffa3\001\002\000\004\004" +
    "\231\001\002\000\004\015\232\001\002\000\022\004\052" +
    "\005\040\006\037\007\046\012\047\014\053\025\060\027" +
    "\055\001\002\000\004\033\uffed\001\002\000\016\004\ufff2" +
    "\016\ufff2\021\ufff2\023\ufff2\026\ufff2\032\ufff2\001\002\000" +
    "\004\031\236\001\002\000\012\004\ufff0\016\ufff0\021\ufff0" +
    "\026\ufff0\001\002\000\012\004\uffbc\016\uffbc\021\uffbc\026" +
    "\uffbc\001\002\000\012\004\020\016\016\021\024\026\023" +
    "\001\002\000\014\004\020\016\016\021\024\026\023\032" +
    "\uffef\001\002\000\004\032\243\001\002\000\022\004\uffb7" +
    "\016\uffb7\017\uffa3\020\uffb7\021\uffb7\023\uffb7\026\uffb7\032" +
    "\uffb7\001\002\000\020\004\uffbb\016\uffbb\020\uffa3\021\uffbb" +
    "\023\uffbb\026\uffbb\032\uffbb\001\002\000\006\017\uffb9\020" +
    "\uffb9\001\002\000\004\017\247\001\002\000\004\027\uffbb" +
    "\001\002\000\004\027\201\001\002\000\004\031\252\001" +
    "\002\000\012\004\ufff0\016\ufff0\021\ufff0\026\ufff0\001\002" +
    "\000\012\004\uffbc\016\uffbc\021\uffbc\026\uffbc\001\002\000" +
    "\012\004\020\016\016\021\024\026\023\001\002\000\014" +
    "\004\020\016\016\021\024\026\023\032\uffef\001\002\000" +
    "\004\032\257\001\002\000\022\004\uffb7\016\uffb7\017\uffa3" +
    "\020\uffb7\021\uffb7\023\uffb7\026\uffb7\032\uffb7\001\002\000" +
    "\020\004\uffb8\016\uffb8\020\uffb8\021\uffb8\023\uffb8\026\uffb8" +
    "\032\uffb8\001\002\000\016\004\uffba\016\uffba\021\uffba\023" +
    "\uffba\026\uffba\032\uffba\001\002\000\016\004\uffb5\016\uffb5" +
    "\021\uffb5\023\uffb5\026\uffb5\032\uffb5\001\002\000\004\020" +
    "\264\001\002\000\004\031\265\001\002\000\012\004\ufff0" +
    "\016\ufff0\021\ufff0\026\ufff0\001\002\000\012\004\uffbb\016" +
    "\uffbb\021\uffbb\026\uffbb\001\002\000\012\004\020\016\016" +
    "\021\024\026\023\001\002\000\014\004\020\016\016\021" +
    "\024\026\023\032\uffef\001\002\000\004\032\272\001\002" +
    "\000\016\004\uffb6\016\uffb6\021\uffb6\023\uffb6\026\uffb6\032" +
    "\uffb6\001\002\000\004\002\ufffe\001\002\000\004\027\ufffb" +
    "\001\002\000\004\027\300\001\002\000\004\030\310\001" +
    "\002\000\006\030\uffab\034\304\001\002\000\006\004\301" +
    "\030\uffaa\001\002\000\004\035\302\001\002\000\004\004" +
    "\303\001\002\000\006\030\uffa8\034\uffa8\001\002\000\004" +
    "\004\305\001\002\000\004\035\306\001\002\000\004\004" +
    "\307\001\002\000\006\030\uffa9\034\uffa9\001\002\000\004" +
    "\035\311\001\002\000\004\004\312\001\002\000\004\031" +
    "\uffac\001\002\000\004\027\314\001\002\000\004\030\315" +
    "\001\002\000\004\031\316\001\002\000\014\004\020\016" +
    "\016\021\024\026\023\032\uffa3\001\002\000\004\032\ufff9" +
    "\001\002\000\014\004\020\016\016\021\024\026\023\032" +
    "\ufffa\001\002\000\004\032\322\001\002\000\004\002\ufffc" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\006\002\004\003\003\001\001\000\012\005" +
    "\010\043\011\044\007\045\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\010\043" +
    "\272\044\007\045\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\014\001\001\000" +
    "\026\007\026\010\025\013\020\022\027\023\016\036\031" +
    "\042\030\050\024\052\021\053\032\001\001\000\004\033" +
    "\234\001\001\000\002\001\001\000\006\014\220\054\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\176\054\177\001\001\000\006\051\167" +
    "\054\171\001\001\000\002\001\001\000\022\010\166\013" +
    "\020\022\027\023\016\036\031\042\030\052\021\053\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\015\043" +
    "\016\056\017\047\020\055\021\041\025\053\026\050\027" +
    "\035\030\044\031\040\052\042\053\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\121\020" +
    "\144\031\146\052\143\053\032\001\001\000\002\001\001" +
    "\000\004\024\135\001\001\000\002\001\001\000\012\015" +
    "\110\016\107\052\106\053\032\001\001\000\002\001\001" +
    "\000\032\015\065\016\071\017\066\020\070\021\064\025" +
    "\067\026\050\027\062\030\044\031\063\052\042\053\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\015\043" +
    "\016\056\017\047\020\055\021\100\025\053\026\050\027" +
    "\035\030\044\031\040\052\042\053\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\110\016\107\001\001\000\004\016\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\015\115\016\113\025\114\026\050\052\112" +
    "\053\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\015\115\016\113" +
    "\025\117\026\050\052\112\053\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\107" +
    "\001\001\000\004\016\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\127\016\125\001\001\000\002" +
    "\001\001\000\032\015\043\016\056\017\047\020\055\021" +
    "\131\025\053\026\050\027\035\030\044\031\040\052\042" +
    "\053\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\015\141\016\136" +
    "\025\137\026\140\052\112\053\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\135\001\001\000\002" +
    "\001\001\000\006\016\121\020\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\015\043\016\071\017\047" +
    "\020\070\021\064\025\053\026\050\027\147\030\044\031" +
    "\063\052\042\053\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\125\020\152\001" +
    "\001\000\002\001\001\000\020\016\157\020\160\027\161" +
    "\030\154\031\163\052\156\053\032\001\001\000\002\001" +
    "\001\000\014\016\121\020\144\031\164\052\143\053\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\015\043\016\071\017\047" +
    "\020\070\021\064\025\053\026\050\027\062\030\044\031" +
    "\063\052\042\053\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\174\001\001\000\032\015\043\016\056\017\047\020\055" +
    "\021\172\025\053\026\050\027\035\030\044\031\040\052" +
    "\042\053\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\201\001\001\000\002\001\001\000\020\016\157" +
    "\020\160\027\161\030\210\031\163\052\156\053\032\001" +
    "\001\000\002\001\001\000\004\011\203\001\001\000\004" +
    "\035\204\001\001\000\024\007\205\010\025\013\020\022" +
    "\027\023\016\036\031\042\030\052\021\053\032\001\001" +
    "\000\024\010\166\012\206\013\020\022\027\023\016\036" +
    "\031\042\030\052\021\053\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\015\043\016\056\017\047\020\055\021\213\025\053" +
    "\026\050\027\035\030\044\031\040\052\042\053\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\225\001\001\000\032\015\043" +
    "\016\056\017\047\020\055\021\224\025\053\026\050\027" +
    "\035\030\044\031\040\052\042\053\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\220\054\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\015\043" +
    "\016\056\017\047\020\055\021\232\025\053\026\050\027" +
    "\035\030\044\031\040\052\042\053\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\236\001\001\000\004\035\237\001\001\000\024\007\240" +
    "\010\025\013\020\022\027\023\016\036\031\042\030\052" +
    "\021\053\032\001\001\000\024\010\166\012\241\013\020" +
    "\022\027\023\016\036\031\042\030\052\021\053\032\001" +
    "\001\000\002\001\001\000\010\032\245\037\243\054\244" +
    "\001\001\000\012\032\262\034\261\040\260\054\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\247" +
    "\001\001\000\004\033\250\001\001\000\002\001\001\000" +
    "\004\011\252\001\001\000\004\035\253\001\001\000\024" +
    "\007\254\010\025\013\020\022\027\023\016\036\031\042" +
    "\030\052\021\053\032\001\001\000\024\010\166\012\255" +
    "\013\020\022\027\023\016\036\031\042\030\052\021\053" +
    "\032\001\001\000\002\001\001\000\010\032\245\037\257" +
    "\054\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\265\001\001\000\004\034\266\001\001\000\024\007" +
    "\267\010\025\013\020\022\027\023\016\036\031\042\030" +
    "\052\021\053\032\001\001\000\024\010\166\012\270\013" +
    "\020\022\027\023\016\036\031\042\030\052\021\053\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\312\001\001\000\006\046\275\047\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\006\320\007\317\010\025\013\020\022\027" +
    "\023\016\036\031\042\030\052\021\053\032\054\316\001" +
    "\001\000\002\001\001\000\022\010\166\013\020\022\027" +
    "\023\016\036\031\042\030\052\021\053\032\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private SymbolsTable symbolsTable;
  private Backend backend;
  private LexerCup scanner;
  private C3a_generator c3a_g;
  private AssemblerGenerator assembler;

  private Stack<String> labelTrueStack;
  private Stack<String> labelFalseStack;

  public Parser(LexerCup scanner, ComplexSymbolFactory sf){
    super(scanner, sf);
    this.scanner = scanner;
    this.symbolsTable = new SymbolsTable();
    this.backend = new Backend();
    this.c3a_g = new C3a_generator(backend);
    this.assembler = new AssemblerGenerator(symbolsTable, backend, c3a_g);
    this.labelTrueStack = new Stack<String>();
    this.labelFalseStack = new Stack<String>();
  }

  private void closeErrorFiles(){
    SymbolsTableError.closeFile();
    SyntaxError.closeFile();
    SemanticError.closeFile();
    LexicalError.closeFile();
  }

  public void syntax_error(Symbol s) {
    try {
      ArrayList<Integer> expected = new ArrayList<Integer>(expected_token_ids());
      report_error(
        "Syntax Error : " + s.value + " (" + (s.left+1) + ":" + (s.right+1) + ")\n", s
      );
      throw new SyntaxError("Syntax Error : " + s.value + " (" + (s.left+1) + ":" + (s.right+1) + ")");
    } catch (Exception e) {
		};
  }

  public void unrecovered_syntax_error(Symbol s){
    try {
      scanner.closeTokensFile((s.left+1), (s.right+1));
      report_fatal_error(
        "Unrecovered Syntax Error : " + s.value + " (" + (s.left+1) + ":" + (s.right+1) + ")", null
      );
      throw new SyntaxError("Unrecovered Syntax Error : " + s.value + " (" + (s.left+1) + ":" + (s.right+1) + ")");
    } catch (Exception e) {
      closeErrorFiles();
		};
  }

  private void initTypes() {
    try{
      //init NUMBER type
      Type number_type = new Type(TYPE.dtype, SUBJACENTTYPE.st_number, 4, Integer.MIN_VALUE, Integer.MIN_VALUE);
      symbolsTable.add("number", number_type);
      
      // init String type
      Type str_type = new Type(TYPE.dtype, SUBJACENTTYPE.st_string, 2, 0, 0);
      symbolsTable.add("string", str_type);
      
      //init BOOLEAN type
      Type bool_type = new Type(TYPE.dtype,SUBJACENTTYPE.st_boolean,2,0,1);
      symbolsTable.add("boolean",bool_type);

      //init VOID type
      Type void_type = new Type(TYPE.dtype, SUBJACENTTYPE.st_null, 0, 0, 0);
      symbolsTable.add("void", void_type);
    }catch (SymbolsTableError e){
      closeErrorFiles();
    }
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= STARTS EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolStarts start_val = (SymbolStarts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // STARTS ::= INIT DECLARE_FUNCTIONS 
            {
              SymbolStarts RESULT =null;
		
                            // close symbolsTable.txt file
                              symbolsTable.closeSymbolsTableFiles();
                              backend.storeTables();

                              //NOT OPTIMIZED CODE
                              c3a_g.savec3aInFile(false);
                              assembler.generateAssembler(false);
                              
                              //OPTIMIZED CODE
                              c3a_g.optimize();
                              c3a_g.savec3aInFile(true);
                              assembler.generateAssembler(true);

                              closeErrorFiles();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTS",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= 
            {
              SymbolInit RESULT =null;
		
                              initTypes();
                              RESULT = new SymbolInit();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARE_FUNCTIONS ::= DEFINE_FUNCTION DECLARE_FUNCTIONS 
            {
              SymbolDeclareFunctions RESULT =null;
		
                              RESULT = new SymbolDeclareFunctions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTIONS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARE_FUNCTIONS ::= MAIN 
            {
              SymbolDeclareFunctions RESULT =null;
		
                              RESULT = new SymbolDeclareFunctions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTIONS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= inst_function inst_main M_MAIN lparen rparen lbracket MAIN_INSTRUCTIONS rbracket 
            {
              SymbolMain RESULT =null;
		
                              RESULT = new SymbolMain();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // M_MAIN ::= 
            {
              SymbolMMain RESULT =null;
		
                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                "main"
                              );

                              backend.addMain();

                              RESULT = new SymbolMMain();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_MAIN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAIN_INSTRUCTIONS ::= INSTRUCTIONS 
            {
              SymbolMainInstr RESULT =null;
		
                              RESULT = new SymbolMainInstr();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_INSTRUCTIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAIN_INSTRUCTIONS ::= EMPTY 
            {
              SymbolMainInstr RESULT =null;
		
                              RESULT = new SymbolMainInstr();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_INSTRUCTIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              SymbolInstructions RESULT =null;
		
                              RESULT = new SymbolInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTIONS ::= INSTRUCTION 
            {
              SymbolInstructions RESULT =null;
		
                              RESULT = new SymbolInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= DECLARATIONS nextinstr 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= INSTRUCTION_IF 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= INSTRUCTION_WHILE 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= OPERATOR_ASSIG nextinstr 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= INSTRUCTION_OUT nextinstr 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= CALL_FUNCTION nextinstr 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOCK_IN ::= 
            {
              SymbolBlockIn RESULT =null;
		
                              symbolsTable.enterBlock();
                              RESULT = new SymbolBlockIn();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_IN",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOCK_OUT ::= 
            {
              SymbolBlockOut RESULT =null;
		
                              try{
                                symbolsTable.leaveBlock();
                                RESULT = new SymbolBlockOut();
                              }catch(SymbolsTableError e){
                                
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_OUT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARATIONS ::= id separator DECLARATIONS 
            {
              SymbolDeclarations RESULT =null;
		Location var_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location var_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location declarationsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declarationsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolDeclarations declarations = (SymbolDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type type = declarations.getType();
                                String backId;

                                if(type.getSubType() == SUBJACENTTYPE.st_string){
                                  String value = declarations.getValue();
                                  backId = backend.addStrVar(var_id, 0,type.getSize(), value);
                                }else{
                                  backId = backend.addVar(var_id, 0, type.getSize(), type.getSubType());
                                }
                                
                                type.setBackendId(backId);

                                symbolsTable.add(var_id, type);
                            
                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  declarations.getVarId(),
                                  null,
                                  backId
                                );

                                  RESULT = declarations;

                              }catch(SymbolsTableError e){
                                System.out.print(e.getMessage() + var_idxleft + " " + var_idxright); 
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARATIONS ::= id CONSTANT two_points id op_assig VALUE 
            {
              SymbolDeclarations RESULT =null;
		Location id_varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location id_varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String id_var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location constantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location constantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolConstant constant = (SymbolConstant)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try {
                                
                                boolean isConst = constant != null ? constant.getIsConst() : false;

                                Type type = symbolsTable.get(type_id);

                                if(type.getType() != TYPE.dtype){
                                  throw new SemanticError("Type not valid");
                                }

                                if(type.getSubType() != SUBJACENTTYPE.st_boolean
                                  && type.getSubType() != SUBJACENTTYPE.st_number
                                  && type.getSubType() != SUBJACENTTYPE.st_string ){
                                    throw new SemanticError("Invalid subjacent type");
                                }

                                //IF LITERALL (type = null) CHECK SUBJACENT TYPE
                                if(value.getType() == TYPE.dnull && type.getSubType() != value.getSubType()){
                                  throw new SemanticError("Value and type must have same subjacent type");
                                }
                                
                                if(value.getType() != TYPE.dnull && !value.getTypeName().equals(type_id)){
                                  throw new SemanticError("Value must have the same type");
                                }

                                Type var_type;

                                if(isConst){
                                  var_type = new Type(TYPE.dconst, type_id, value.getValue());
                                }
                                else{
                                  var_type = new Type(TYPE.dvar, type_id); 
                                }

                                int size = type.getSize();
                                if(value.getIsString()){
                                  size = value.getStringSize();
                                }

                                String var_id;
                                if(type.getSubType() == SUBJACENTTYPE.st_string){
                                  String str_value = (String) value.getValue();
                                  var_id = backend.addStrVar(id_var, 0, type.getSize(), str_value);
                                }else{
                                  var_id = backend.addVar(id_var, 0,type.getSize(), type.getSubType());
                                }

                                var_type.setBackendId(var_id);

                                String val_id = value.getVarId();
                                symbolsTable.add(id_var, var_type);

                                SymbolDeclarations symDcls;
                                if(value.getIsString()){
                                  symDcls = new SymbolDeclarations(val_id, var_type, (String) value.getValue());
                                }else{
                                  symDcls = new SymbolDeclarations(val_id, var_type);
                                }

                                if(type.getSubType() != SUBJACENTTYPE.st_string){
                                  c3a_g.generateC3aInstr(
                                    Code.copy,
                                    val_id,
                                    null,
                                    var_id
                                  );
                                }

                                RESULT = symDcls;
                              }catch(SymbolsTableError e){
                                System.out.print(e.getMessage() + id_varxleft + " " + id_varxright); 
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONSTANT ::= dconst 
            {
              SymbolConstant RESULT =null;
		
                              RESULT = new SymbolConstant(true);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONSTANT ::= EMPTY 
            {
              SymbolConstant RESULT =null;
		
                              RESULT = new SymbolConstant(false);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERATOR_ASSIG ::= id op_assig VALUE 
            {
              SymbolOperatorAssignation RESULT =null;
		Location var_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location var_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type varType = symbolsTable.get(var_id);
                                String type_id = varType.getTypeName();

                                if(varType.getType() == TYPE.dconst){
                                  throw new SemanticError("Cant assign value to constant");
                                }

                                //IF LITERALL (type = null) CHECK SUBJACENT TYPE
                                if(value.getType() == TYPE.dnull && varType.getSubType() == value.getSubType()){
                                  throw new SemanticError("Value and type must have same subjacent type");
                                }
                                
                                if(value.getType() != TYPE.dnull && value.getTypeName() != type_id){
                                  throw new SemanticError("Value must have the same type");
                                }

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  value.getVarId(),
                                  null,
                                  varType.getBackendId()
                                );

                                RESULT = new SymbolOperatorAssignation();
                              }catch(SymbolsTableError e){

                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR_ASSIG",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARITH_OP ::= op_arithmetical_b 
            {
              SymbolArithOperator RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArithOperator(op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARITH_OP ::= op_arithmetical_c 
            {
              SymbolArithOperator RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArithOperator(op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARITHMETICAL_OPERATION ::= ARITHMETICAL_VALUE ARITH_OP ARITHMETICAL_VALUE 
            {
              SymbolArithOperation RESULT =null;
		Location arith_val1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location arith_val1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolArithValue arith_val1 = (SymbolArithValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolArithOperator op = (SymbolArithOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location arith_val2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arith_val2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolArithValue arith_val2 = (SymbolArithValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                SymbolArithOperation sym;
                                boolean allConst = arith_val1.getIsConst() && arith_val2.getIsConst();

                                Code op_code;
                                
                                switch(op.getOperator()){
                                  case "+" : 
                                    op_code = Code.add;
                                    break;
                                  case "-" : 
                                    op_code = Code.sub;
                                    break;
                                  case "*" : 
                                    op_code = Code.prod;
                                    break;
                                  case "/" : 
                                    op_code = Code.div;
                                    break;
                                  case "%" : 
                                    op_code = Code.mod;
                                    break;
                                  default : 
                                    throw new SemanticError("Invalid arithmetical operator");
                                }

                                Integer value = null;
                                if(allConst) {
                                  Integer val1 = (Integer) arith_val1.getValue();
                                  Integer val2 = (Integer) arith_val2.getValue();

                                  switch(op.getOperator()){
                                    case "+" : 
                                      value = val1 + val2;
                                      break;
                                    case "-" : 
                                      value = val1 - val2;
                                      break;
                                    case "*" : 
                                      value = val1 * val2;
                                      break;
                                    case "/" : 
                                      if(val2 == 0){
                                        throw new SemanticError("Cannot divide by zero");
                                      }
                                      value = val1 / val2;
                                      break;
                                    case "%" : 
                                      value = val1 % val2;
                                      break;
                                  }
                                }

                                Type type_number = symbolsTable.get("number");
                                
                                String var_id = backend.addTempVar( 0, type_number.getSize(), type_number.getSubType());

                                c3a_g.generateC3aInstr(
                                  op_code,
                                  arith_val1.getVarId(),
                                  arith_val2.getVarId(),
                                  var_id
                                );

                                if(allConst){
                                  sym = new SymbolArithOperation(var_id, value);
                                }
                                else{
                                  sym = new SymbolArithOperation(var_id);
                                }
                                
                                RESULT = sym;
                              }catch(SymbolsTableError e){

                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARITHMETICAL_OPERATION ::= op_arithmetical_b lparen ARITHMETICAL_OPERATION rparen 
            {
              SymbolArithOperation RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolArithOperation arith_op = (SymbolArithOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                SymbolArithOperation sym = arith_op;
                                if(op.equals("-")){
                                  Type type_number = symbolsTable.get("number");
                                  String var_id = backend.addTempVar(0, type_number.getSize(),  type_number.getSubType());

                                  if(arith_op.getIsConst()){
                                    Integer value = - arith_op.getValue().intValue();
                                    sym = new SymbolArithOperation(arith_op.getVarId(), value);
                                  }else{
                                    sym = new SymbolArithOperation(var_id);
                                  }

                                  c3a_g.generateC3aInstr(
                                    Code.neg,
                                    arith_op.getVarId(),
                                    null,
                                    var_id
                                  );
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARITHMETICAL_OPERATION ::= lparen ARITHMETICAL_OPERATION rparen 
            {
              SymbolArithOperation RESULT =null;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolArithOperation arith_op = (SymbolArithOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = arith_op;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NUMBER_VALUE ::= number 
            {
              SymbolNumberVal RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Integer value = Integer.valueOf(n_val);
                              RESULT = new SymbolNumberVal(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NUMBER_VALUE ::= lparen NUMBER_VALUE rparen 
            {
              SymbolNumberVal RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolNumberVal n_val = (SymbolNumberVal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = n_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NUMBER_VALUE ::= op_arithmetical_b NUMBER_VALUE 
            {
              SymbolNumberVal RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolNumberVal n_val = (SymbolNumberVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolNumberVal sym = n_val;
                              if(op.equals("-")){
                                Integer value = - n_val.getValue().intValue();
                                sym = new SymbolNumberVal(value);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARITHMETICAL_VALUE ::= NUMBER_VALUE 
            {
              SymbolArithValue RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolNumberVal n_val = (SymbolNumberVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Integer value = n_val.getValue();

                              Type type_number = symbolsTable.get("number");
                              
                              String var_id = backend.addTempVar(0, type_number.getSize(),  type_number.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                Integer.toString(value),
                                null,
                                var_id
                              );

                              RESULT = new SymbolArithValue(var_id, value);
                            }catch(SymbolsTableError e){

                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARITHMETICAL_VALUE ::= ID_VALUE 
            {
              SymbolArithValue RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              TYPE main_var_type = id_val.getType();

                              if(main_var_type != TYPE.darg && main_var_type != TYPE.dconst && main_var_type != TYPE.dvar){
                                throw new SemanticError("Invalid arithmetic value type");
                              }

                              Type var_dtype = symbolsTable.get(id_val.getTypeName());

                              if(var_dtype.getSubType() != SUBJACENTTYPE.st_number){
                                throw new SemanticError("Invalid subjacent type");
                              }

                              SymbolArithValue sym;
                              String var_id = id_val.getId();

                              if(main_var_type == TYPE.dconst){
                                Integer value = (Integer) id_val.getValue();
                                sym = new SymbolArithValue(var_id, value);
                              }else{
                                sym = new SymbolArithValue(var_id);
                              }

                              RESULT = sym;
                            }catch(SymbolsTableError e){

                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARITHMETICAL_VALUE ::= ARITHMETICAL_OPERATION 
            {
              SymbolArithValue RESULT =null;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolArithOperation arith_op = (SymbolArithOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            SymbolArithValue sym;
                            if(arith_op.getIsConst()){
                              sym = new SymbolArithValue(arith_op.getVarId(), arith_op.getValue());
                            }else{
                              sym = new SymbolArithValue(arith_op.getVarId());
                            }

                            RESULT = sym;
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARITHMETICAL_VALUE ::= CALL_FUNCTION 
            {
              SymbolArithValue RESULT =null;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolCallFunction call_fn = (SymbolCallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                              Type dfn_type = symbolsTable.get(fn_type.getTypeName());
                              
                              if(dfn_type.getSubType() != SUBJACENTTYPE.st_number){
                                throw new SemanticError("Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getSubType() +". Expected :"+SUBJACENTTYPE.st_number);
                              }
                              
                              String var_id = backend.addTempVar( 0, fn_type.getSize(), dfn_type.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                "return "+call_fn.getFunctionId(),
                                null,
                                var_id
                              );                                

                              RESULT = new SymbolArithValue(var_id);
                            }catch(SymbolsTableError e){

                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARITHMETICAL_VALUE ::= op_arithmetical_b CALL_FUNCTION 
            {
              SymbolArithValue RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolCallFunction call_fn = (SymbolCallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            try{
                              Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                              Type dfn_type = symbolsTable.get(fn_type.getTypeName());
                              
                              if(dfn_type.getSubType() != SUBJACENTTYPE.st_number){
                                throw new SemanticError("Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getSubType() +". Expected :"+SUBJACENTTYPE.st_number);
                              }
                              
                              String var_id = backend.addTempVar( 0, fn_type.getSize(), dfn_type.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                "return "+call_fn.getFunctionId(),
                                null,
                                var_id
                              );                                

                              if(op.equals("-")){
                                c3a_g.generateC3aInstr(
                                  Code.neg,
                                  var_id,
                                  null,
                                  var_id
                                );
                              }

                              RESULT = new SymbolArithValue(var_id);
                            }catch(SymbolsTableError e){

                            }
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ID_VALUE ::= id 
            {
              SymbolIdVal RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type id_type = symbolsTable.get(id_val);
                                String var_id = id_type.getBackendId();
                                SymbolIdVal sym = new SymbolIdVal(var_id, id_type.getType(), id_type.getTypeName());
                                if(id_type.getType() == TYPE.dconst){
                                  sym = new SymbolIdVal(var_id, id_type.getType(), id_type.getTypeName(), id_type.getValue());
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){

                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ID_VALUE ::= lparen ID_VALUE rparen 
            {
              SymbolIdVal RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = id_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ID_VALUE ::= op_logical_not ID_VALUE 
            {
              SymbolIdVal RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                
                                SymbolIdVal sym;
                                // check if unary operator is type valid
                                SUBJACENTTYPE subType = symbolsTable.get(id_val.getTypeName()).getSubType();

                                if(subType != SUBJACENTTYPE.st_boolean) {
                                  throw new SemanticError("Invalid unary operator " + op + " for type " + subType);
                                }

                                Type type_boolean = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(0, type_boolean.getSize(),  type_boolean.getSubType());

                                c3a_g.generateC3aInstr(
                                  Code.not,
                                  id_val.getId(),
                                  null,
                                  var_id
                                );
                                
                                if(id_val.getType() == TYPE.dconst){
                                  Boolean value = !((Boolean) id_val.getValue()).booleanValue();
                                  sym = new SymbolIdVal(var_id, id_val.getType(), id_val.getTypeName(), value);
                                }else{
                                  sym = new SymbolIdVal(var_id, id_val.getType(), id_val.getTypeName());
                                }
                                
                                RESULT = sym;
                              }catch(SymbolsTableError e){

                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ID_VALUE ::= op_arithmetical_b ID_VALUE 
            {
              SymbolIdVal RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try {
                                SymbolIdVal sym = id_val;
                                // check if unary operator is type valid
                                SUBJACENTTYPE subType = symbolsTable.get(id_val.getTypeName()).getSubType();

                                if(subType != SUBJACENTTYPE.st_boolean) {
                                  throw new SemanticError("Invalid unary operator " + op + " for type " + subType);
                                }

                                if(op.equals("-")){
                                  Type type_number = symbolsTable.get("number");
                                  String var_id = backend.addTempVar(0, type_number.getSize(),  type_number.getSubType());

                                  c3a_g.generateC3aInstr(
                                    Code.neg,
                                    id_val.getId(),
                                    null,
                                    var_id
                                  );
                                  
                                  if(id_val.getType() == TYPE.dconst){
                                    Integer value = -((Integer) id_val.getValue()).intValue();
                                    sym = new SymbolIdVal(var_id, id_val.getType(), id_val.getTypeName(), value);
                                  }else{
                                    sym = new SymbolIdVal(var_id, id_val.getType(), id_val.getTypeName());
                                  }
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){

                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STRING_VALUE ::= string 
            {
              SymbolStringVal RESULT =null;
		Location string_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location string_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String string_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              RESULT = new SymbolStringVal(string_val);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRING_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STRING_VALUE ::= lparen STRING_VALUE rparen 
            {
              SymbolStringVal RESULT =null;
		Location string_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location string_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolStringVal string_val = (SymbolStringVal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = string_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRING_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALUE ::= ID_VALUE 
            {
              SymbolValue RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;
                              
                              String var_id = id_val.getId();

                              if(id_val.getType() == TYPE.dconst){
                                sym = new SymbolValue(var_id, id_val.getType(), id_val.getTypeName(), id_val.getValue());
                              }
                              else {
                                sym = new SymbolValue(var_id, id_val.getType(), id_val.getTypeName());
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALUE ::= STRING_VALUE 
            {
              SymbolValue RESULT =null;
		Location str_valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location str_valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolStringVal str_value = (SymbolStringVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                String value = str_value.getString().replace("\"", "");
                                Type type_string = symbolsTable.get("string");

                                if (value.length() > 1000){
                                  throw new SemanticError("String must be shorter than 1000 characters.");
                                }
                                
                                // string size in bytes
                                int stringSize = value.length() * type_string.getSize();
                                
                                SymbolValue sym = new SymbolValue(value, stringSize);

                                RESULT = sym;
                              }catch(SymbolsTableError e){

                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VALUE ::= BOOLEAN_VALUE 
            {
              SymbolValue RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBoolVal bool_val = (SymbolBoolVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Boolean value = bool_val.getValue();
                                Type type_bool = symbolsTable.get("boolean");

                                String var_id = backend.addTempVar(0, type_bool.getSize(), type_bool.getSubType());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  value.toString(),
                                  null,
                                  var_id
                                );                                 

                                RESULT = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean, value);
                              }catch(SymbolsTableError e){

                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VALUE ::= NUMBER_VALUE 
            {
              SymbolValue RESULT =null;
		Location n_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location n_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolNumberVal n_val = (SymbolNumberVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Integer value = n_val.getValue();

                                Type type_number = symbolsTable.get("number");
                                
                                String var_id = backend.addTempVar(0, type_number.getSize(), type_number.getSubType());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  Integer.toString(value),
                                  null,
                                  var_id
                                );

                                RESULT = new SymbolValue(var_id, SUBJACENTTYPE.st_number, value);
                              }catch(SymbolsTableError e){

                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VALUE ::= VALUE_COMPARISON 
            {
              SymbolValue RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValueComparison comp_val = (SymbolValueComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;
                              String id = comp_val.getVarId(); 

                              if(comp_val.getIsConst()){
                                Boolean value = comp_val.getValue();
                                sym = new SymbolValue(id, SUBJACENTTYPE.st_boolean, value);
                              }else{
                                sym = new SymbolValue(id, SUBJACENTTYPE.st_boolean); 
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VALUE ::= op_logical_not VALUE_COMPARISON 
            {
              SymbolValue RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValueComparison comp_val = (SymbolValueComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                SymbolValue sym;

                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(0,type_bool.getSize(), type_bool.getSubType());

                                c3a_g.generateC3aInstr(
                                  Code.not,
                                  comp_val.getVarId(),
                                  null,
                                  var_id
                                );

                                if(comp_val.getIsConst()){
                                  Boolean value = ! comp_val.getValue().booleanValue(); 
                                  sym = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean, value);
                                }else{
                                  sym = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean); 
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){

                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALUE ::= ARITHMETICAL_OPERATION 
            {
              SymbolValue RESULT =null;
		Location arith_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location arith_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolArithOperation arith_op = (SymbolArithOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;
                              String var_id = arith_op.getVarId();
                              if(arith_op.getIsConst()){
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_number, arith_op.getValue());
                              }else{
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_number);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALUE ::= BOOLEAN_OPERATION 
            {
              SymbolValue RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;
                              String var_id = new String(bool_op.getVarId());
                              if(bool_op.getIsConst()){
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean, bool_op.getValue());
                              }else{
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALUE ::= CALL_FUNCTION 
            {
              SymbolValue RESULT =null;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolCallFunction call_fn = (SymbolCallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                                Type dfn_type = symbolsTable.get(fn_type.getTypeName());
                                
                                if(dfn_type.getSubType() == SUBJACENTTYPE.st_null){
                                  throw new SemanticError("Function call : "+call_fn.getFunctionId() + " does not return any value");
                                }
                                
                                String var_id = backend.addTempVar( 0, fn_type.getSize(), dfn_type.getSubType());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  "return "+call_fn.getFunctionId(),
                                  null,
                                  var_id
                                );                                

                                RESULT = new SymbolValue(var_id, TYPE.dfun, fn_type.getTypeName());
                              }catch(SymbolsTableError e){

                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALUE ::= instr_in lparen rparen 
            {
              SymbolValue RESULT =null;
		
                              try{
                                Type number_type = symbolsTable.get("number");
                                String var_id = backend.addTempVar( 0, number_type.getSize(), number_type.getSubType());

                                c3a_g.generateC3aInstr(
                                  Code.input,
                                  null,
                                  null,
                                  var_id
                                );

                                RESULT = new SymbolValue(var_id, number_type.getSubType());
                              }catch(SymbolsTableError e){

                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BOOLEAN_OPERATION ::= BOOLEAN_OP_VALUE op_logical BOOLEAN_OP_VALUE 
            {
              SymbolBoolOp RESULT =null;
		Location bool_val1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bool_val1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolBoolOpValue bool_val1 = (SymbolBoolOpValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bool_val2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_val2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBoolOpValue bool_val2 = (SymbolBoolOpValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                SymbolBoolOp sym;
                                Code op_code;

                                switch(op){
                                  case "&&":
                                    op_code = Code.and;
                                    break;
                                  case "||":
                                    op_code = Code.or;
                                    break;
                                  default : 
                                    throw new SemanticError("Invalid boolean operator");
                                }

                                boolean allConst = bool_val1.getIsConst() && bool_val2.getIsConst();
                                Boolean value = null;

                                if(allConst){
                                  Boolean val1 = (Boolean) bool_val1.getValue();
                                  Boolean val2 = (Boolean) bool_val2.getValue();
                                  switch(op){
                                  case "&&":
                                    value = val1 && val2;
                                    break;
                                  case "||":
                                    value = val1 || val2; 
                                    break;
                                  }
                                }

                                Type type_bool = symbolsTable.get("boolean"); 
                                String var_id = backend.addTempVar( 0, type_bool.getSize(), type_bool.getSubType());
                                
                                String val1_id = bool_val1.getVarId();
                                String val2_id = bool_val2.getVarId();
                                c3a_g.generateC3aInstr(
                                  op_code,
                                  val1_id,
                                  val2_id,
                                  var_id
                                );                         
                                
                                if(allConst){
                                  sym = new SymbolBoolOp(var_id, value);
                                }else{
                                  sym = new SymbolBoolOp(var_id);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BOOLEAN_OPERATION ::= lparen BOOLEAN_OPERATION rparen 
            {
              SymbolBoolOp RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = bool_op;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BOOLEAN_OPERATION ::= op_logical_not lparen BOOLEAN_OPERATION rparen 
            {
              SymbolBoolOp RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                SymbolBoolOp sym;
                                Type type_boolean = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(0, type_boolean.getSize(),  type_boolean.getSubType());

                                c3a_g.generateC3aInstr(
                                  Code.neg,
                                  bool_op.getVarId(),
                                  null,
                                  var_id
                                );

                                if(bool_op.getIsConst()){
                                  Boolean value = ! bool_op.getValue().booleanValue();
                                  sym = new SymbolBoolOp(bool_op.getVarId(), value);
                                }else{
                                  sym = new SymbolBoolOp(var_id);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BOOLEAN_OP_VALUE ::= BOOLEAN_VALUE 
            {
              SymbolBoolOpValue RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBoolVal bool_val = (SymbolBoolVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Boolean value = bool_val.getValue();
                                Type type_boolean = symbolsTable.get("boolean");
                                
                                String var_id = backend.addTempVar(0, type_boolean.getSize(),  type_boolean.getSubType());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  value.toString(),
                                  null,
                                  var_id
                                );

                                RESULT = new SymbolBoolOpValue(var_id, value);
                              }catch(SymbolsTableError e){

                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BOOLEAN_OP_VALUE ::= ID_VALUE 
            {
              SymbolBoolOpValue RESULT =null;
		Location id_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location id_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                TYPE main_var_type = id_val.getType();
                                if(main_var_type != TYPE.darg && main_var_type != TYPE.dconst && main_var_type != TYPE.dvar){
                                  throw new SemanticError("Invalid arithmetic value type");
                                }

                                Type var_dtype = symbolsTable.get(id_val.getTypeName());

                                if(var_dtype.getSubType() != SUBJACENTTYPE.st_boolean){
                                  throw new SemanticError("Invalid subjacent type");
                                }

                                SymbolBoolOpValue sym;
                                String var_id = id_val.getId();

                                if(main_var_type == TYPE.dconst){
                                  Boolean value = (Boolean) id_val.getValue();
                                  sym = new SymbolBoolOpValue(var_id, value);
                                }else{
                                  sym = new SymbolBoolOpValue(var_id);
                                }

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BOOLEAN_OP_VALUE ::= BOOLEAN_OPERATION 
            {
              SymbolBoolOpValue RESULT =null;
		Location bool_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolBoolOpValue sym;
                              if(bool_op.getIsConst()){
                                sym = new SymbolBoolOpValue(bool_op.getVarId(), bool_op.getValue());
                              }else{
                                sym = new SymbolBoolOpValue(bool_op.getVarId());
                              }
                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BOOLEAN_OP_VALUE ::= VALUE_COMPARISON 
            {
              SymbolBoolOpValue RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValueComparison comp_val = (SymbolValueComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolBoolOpValue sym;
                              String id = new String(comp_val.getVarId()); 
                              if(comp_val.getIsConst()){
                                sym = new SymbolBoolOpValue(id, comp_val.getValue());
                              }else{
                                sym = new SymbolBoolOpValue(id); 
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BOOLEAN_OP_VALUE ::= op_logical_not VALUE_COMPARISON 
            {
              SymbolBoolOpValue RESULT =null;
		Location comp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValueComparison comp_val = (SymbolValueComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar(0,type_bool.getSize(), type_bool.getSubType());

                                c3a_g.generateC3aInstr(
                                  Code.not,
                                  comp_val.getVarId(),
                                  null,
                                  var_id
                                );

                                SymbolBoolOpValue sym;
                                if(comp_val.getIsConst()){
                                  Boolean value = ! comp_val.getValue().booleanValue();
                                  sym = new SymbolBoolOpValue(var_id, value);
                                }else{
                                  sym = new SymbolBoolOpValue(var_id); 
                                }
                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BOOLEAN_OP_VALUE ::= CALL_FUNCTION 
            {
              SymbolBoolOpValue RESULT =null;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolCallFunction call_fn = (SymbolCallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                                Type dfn_type = symbolsTable.get(fn_type.getTypeName());
                                
                                if(dfn_type.getSubType() != SUBJACENTTYPE.st_boolean){
                                  throw new SemanticError("Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getSubType() +". Expected :"+SUBJACENTTYPE.st_boolean);
                                }
                                
                                String var_id = backend.addTempVar( 0, fn_type.getSize(), dfn_type.getSubType());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  "return "+call_fn.getFunctionId(),
                                  null,
                                  var_id
                                );                                

                                RESULT = new SymbolBoolOpValue(var_id);
                              }catch(SymbolsTableError e){

                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BOOLEAN_OP_VALUE ::= op_logical_not CALL_FUNCTION 
            {
              SymbolBoolOpValue RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location call_fnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location call_fnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolCallFunction call_fn = (SymbolCallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                                Type dfn_type = symbolsTable.get(fn_type.getTypeName());
                                
                                if(dfn_type.getSubType() != SUBJACENTTYPE.st_number){
                                  throw new SemanticError("Invalid function call "+call_fn.getFunctionId() + " with return type "+ dfn_type.getSubType() +". Expected :"+SUBJACENTTYPE.st_number);
                                }
                                
                                String var_id = backend.addTempVar( 0, fn_type.getSize(), dfn_type.getSubType());

                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  "return "+call_fn.getFunctionId(),
                                  null,
                                  var_id
                                );                                

                                c3a_g.generateC3aInstr(
                                  Code.neg,
                                  var_id,
                                  null,
                                  var_id
                                );

                                RESULT = new SymbolBoolOpValue(var_id);
                              }catch(SymbolsTableError e){

                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BOOLEAN_VALUE ::= bool 
            {
              SymbolBoolVal RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bool_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = Boolean.valueOf(bool_val);
                              RESULT = new SymbolBoolVal(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BOOLEAN_VALUE ::= op_logical_not BOOLEAN_VALUE 
            {
              SymbolBoolVal RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolBoolVal bool_val = (SymbolBoolVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = ! bool_val.getValue().booleanValue();
                              RESULT = new SymbolBoolVal(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BOOLEAN_VALUE ::= lparen BOOLEAN_VALUE rparen 
            {
              SymbolBoolVal RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBoolVal bool_val = (SymbolBoolVal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = bool_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALUE_COMPARISON ::= lparen VALUE op_relational VALUE rparen 
            {
              SymbolValueComparison RESULT =null;
		Location val1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location val1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolValue val1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location val2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location val2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolValue val2 = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                SymbolValueComparison sym;

                                TYPE type1 = val1.getType();
                                SUBJACENTTYPE subType1;
                                
                                if(val1.getType() == TYPE.dnull){
                                  subType1 = val1.getSubType();
                                }else{
                                  if(type1 != TYPE.dvar && type1 != TYPE.dconst && type1 != TYPE.darg && type1 != TYPE.dfun) {
                                    throw new SemanticError("Value 1 of comparison wrong type");
                                  }
                                  Type dtype_type = symbolsTable.get(val1.getTypeName());
                                  subType1 = dtype_type.getSubType();
                                }
                                // SAME FOR VALUE2
                                TYPE type2 = val2.getType();
                                SUBJACENTTYPE subType2;

                                if(val2.getType() == TYPE.dnull){
                                  subType2 = val2.getSubType();
                                }else{
                                  if(type2 != TYPE.dvar && type2 != TYPE.dconst && type2 != TYPE.darg && type2 != TYPE.dfun) {
                                    throw new SemanticError("Value 2 of comparison wrong type");
                                  }
                                  Type dtype_type = symbolsTable.get(val2.getTypeName());
                                  subType2 = dtype_type.getSubType();
                                }

                                //Check same subtype
                                if(subType1 != subType2) {
                                  throw new SemanticError("Value 1 subtype is different from value 2");
                                }

                                Code op_code = Code.EQ;
                                switch(op){
                                  case "==":
                                    op_code = Code.EQ;
                                    break;
                                  case "!=":
                                    op_code = Code.NE;
                                    break;
                                  case "<": 
                                    if(subType1 != SUBJACENTTYPE.st_number) throw new SemanticError("This operator ("+op+") only works with integer subtypes");
                                    op_code = Code.LT;
                                    break;
                                  case "<=":
                                    if(subType1 != SUBJACENTTYPE.st_number) throw new SemanticError("This operator ("+op+") only works with integer subtypes");
                                    op_code = Code.LE;
                                    break;
                                  case ">": 
                                    if(subType1 != SUBJACENTTYPE.st_number) throw new SemanticError("This operator ("+op+") only works with integer subtypes");
                                    op_code = Code.GT;
                                    break;
                                  case ">=":
                                    if(subType1 != SUBJACENTTYPE.st_number) throw new SemanticError("This operator ("+op+") only works with integer subtypes");
                                    op_code = Code.GE;
                                    break;
                                }

                                boolean allConst = val1.getIsConst() && val2.getIsConst();
                                
                                Boolean val = null;
                                if(allConst){
                                  switch(op){
                                    case "==":
                                      if(subType1 == SUBJACENTTYPE.st_number){
                                        val = (Integer) val1.getValue() == (Integer) val2.getValue();
                                      }
                                      if(subType1 == SUBJACENTTYPE.st_string){
                                        val = ((String)val1.getValue()).equals((String) val2.getValue());
                                      }
                                      if(subType1 == SUBJACENTTYPE.st_boolean){
                                        val = (Boolean) val1.getValue() == (Boolean) val2.getValue();
                                      }
                                      break;
                                    case "!=":
                                      if(subType1 == SUBJACENTTYPE.st_number){
                                        val = (Integer) val1.getValue() != (Integer) val2.getValue();
                                      }
                                      if(subType1 == SUBJACENTTYPE.st_string){
                                        val = !((String)val1.getValue()).equals((String) val2.getValue());
                                      }
                                      if(subType1 == SUBJACENTTYPE.st_boolean){
                                        val = (Boolean) val1.getValue() != (Boolean) val2.getValue();
                                      }
                                      break;

                                    // only integer operators
                                    case "<": 
                                      val = (Integer) val1.getValue() < (Integer) val2.getValue();
                                      break;
                                    case "<=":
                                      val = (Integer) val1.getValue() <= (Integer) val2.getValue();
                                      break;
                                    case ">": 
                                      val = (Integer) val1.getValue() > (Integer) val2.getValue();
                                      break;
                                    case ">=":
                                      val = (Integer) val1.getValue() >= (Integer) val2.getValue();
                                      break;
                                  }
                                }

                                Type type_bool = symbolsTable.get("boolean");
                                String var_id = backend.addTempVar( 0, type_bool.getSize(), type_bool.getSubType());
                                
                                if(allConst){
                                  sym = new SymbolValueComparison(var_id, val);
                                }else{
                                  sym = new SymbolValueComparison(var_id);
                                }

                                c3a_g.generateC3aInstr(
                                  op_code,
                                  val1.getVarId(),
                                  val2.getVarId(),
                                  var_id
                                );

                                RESULT = sym;
                              }catch(SymbolsTableError e){
                                
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_COMPARISON",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALUE_COMPARISON ::= lparen VALUE_COMPARISON rparen 
            {
              SymbolValueComparison RESULT =null;
		Location cmp_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cmp_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolValueComparison cmp_val = (SymbolValueComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = cmp_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_COMPARISON",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COND ::= lparen BOOLEAN_OP_VALUE rparen 
            {
              SymbolCondition RESULT =null;
		Location bool_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bool_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolBoolOpValue bool_val = (SymbolBoolOpValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                String var_id = bool_val.getVarId();

                                String true_label = backend.addLabel();
                                String false_label = backend.addLabel();

                                labelTrueStack.push(true_label);
                                labelFalseStack.push(false_label);
                                
                                
                                c3a_g.generateC3aInstr(
                                  Code.jump_cond,
                                  var_id,
                                  "true",
                                  true_label
                                );

                                c3a_g.generateC3aInstr(
                                  Code.go_to,
                                  null,
                                  null,
                                  false_label
                                );

                                RESULT = new SymbolCondition();
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COND_T ::= 
            {
              SymbolConditionTrue RESULT =null;
		
                                String label = labelTrueStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new SymbolConditionTrue();   
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_T",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COND_F ::= 
            {
              SymbolConditionFalse RESULT =null;
		
                                String label = labelFalseStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new SymbolConditionFalse();   
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_F",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INSTRUCTION_IF ::= inst_if COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket ELIF ELSE 
            {
              SymbolInstructionIf RESULT =null;
		
                              RESULT = new SymbolInstructionIf();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_IF",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // M_END ::= EMPTY 
            {
              SymbolMEnd RESULT =null;
		
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolMEnd(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_END",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ELIF ::= M_END inst_elif COND_F COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket ELIF 
            {
              SymbolElif RESULT =null;
		Location mendxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xleft;
		Location mendxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).xright;
		SymbolMEnd mend = (SymbolMEnd)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolElif();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELIF ::= 
            {
              SymbolElif RESULT =null;
		
                              RESULT = new SymbolElif();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELSE ::= M_END inst_else lbracket BLOCK_IN COND_F INSTRUCTIONS BLOCK_OUT rbracket 
            {
              SymbolElse RESULT =null;
		Location mendxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location mendxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		SymbolMEnd mend = (SymbolMEnd)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolElse();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ELSE ::= COND_F 
            {
              SymbolElse RESULT =null;
		
                              RESULT = new SymbolElse();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // M_WHILE ::= EMPTY 
            {
              SymbolMWhile RESULT =null;
		 
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolMWhile(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_WHILE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTRUCTION_WHILE ::= inst_while M_WHILE COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket 
            {
              SymbolInstructionWhile RESULT =null;
		Location mwhilexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location mwhilexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		SymbolMWhile mwhile = (SymbolMWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                              String loop_label = mwhile.getLabel();
                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                loop_label
                              );

                              String end_label = labelFalseStack.pop();
                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                end_label
                              );

                              RESULT = new SymbolInstructionWhile();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_WHILE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CALL_FUNCTION ::= id lparen rparen 
            {
              SymbolCallFunction RESULT =null;
		Location fun_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fun_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                              try{
                                // Check if function and has params 
                                int num_params = symbolsTable.getNumParams(fun_id);
                                if(num_params > 0 ){
                                  throw new SemanticError("Missing parameters. Function " + fun_id + " has " + num_params + " parameters.");
                                }

                                Type fun_type = symbolsTable.get(fun_id);
                                String backId = fun_type.getBackendId();
                                c3a_g.generateC3aInstr(
                                  Code.call,
                                  null,
                                  null,
                                  backId
                                );

                                RESULT = new SymbolCallFunction(fun_id, backId);
                              }catch(SymbolsTableError e){
                                
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CALL_FUNCTION ::= CALL_BODY rparen 
            {
              SymbolCallFunction RESULT =null;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolCallBody body = (SymbolCallBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                int body_params = body.getNumParams();
                                String fun_id = body.getFunId();
                                int fun_params = symbolsTable.getNumParams(fun_id);

                                if(fun_params != body_params){
                                  throw new SemanticError("Incorrect number of parameters :"+ body_params + ".Function " + fun_id + " has " + fun_params + "params");
                                }

                                String fun_backId = body.getFunBackId();
                                c3a_g.generateC3aInstr(
                                  Code.call,
                                  null,
                                  null,
                                  fun_backId
                                );

                                RESULT = new SymbolCallFunction(fun_id, fun_backId);
                              }catch(SymbolsTableError e){

                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CALL_BODY ::= CALL_BODY separator VALUE 
            {
              SymbolCallBody RESULT =null;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolCallBody body = (SymbolCallBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                String fun_id = body.getFunId();
                                int num_params = body.getNumParams();
                                SUBJACENTTYPE subType;

                                if(value.getType() == TYPE.dnull){
                                  subType = value.getSubType();
                                }
                                else{
                                  if(value.getType() != TYPE.dvar && value.getType() != TYPE.dconst && value.getType() != TYPE.darg){
                                    throw new SemanticError(fun_id + ". Incorrect type for param "+ num_params);
                                  }
                                  Type value_type = symbolsTable.get(value.getTypeName());
                                  subType = value_type.getSubType();
                                }

                                //Check param type with function param type
                                Type paramType = symbolsTable.getParam(fun_id, num_params);
                                SUBJACENTTYPE paramSubType = symbolsTable.get(paramType.getTypeName()).getSubType();

                                if(paramSubType != subType){
                                  throw new SemanticError(fun_id + ". Incorrect type for param " + num_params + ". Expected " + subType + " but got " + paramSubType);
                                }

                                String fun_back_id = body.getFunBackId();
                                c3a_g.generateC3aInstr(
                                  Code.param,
                                  value.getVarId(),
                                  null,
                                  fun_back_id
                                );

                                RESULT = new SymbolCallBody(fun_id, fun_back_id, num_params+1);
                              }catch(SymbolsTableError e){
                                
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_BODY",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CALL_BODY ::= id lparen VALUE 
            {
              SymbolCallBody RESULT =null;
		Location fun_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fun_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                SUBJACENTTYPE subType;

                                if(value.getType() == TYPE.dnull){
                                  subType = value.getSubType();
                                }
                                else{
                                  if(value.getType() != TYPE.dvar && value.getType() != TYPE.dconst && value.getType() != TYPE.darg){
                                    throw new SemanticError(fun_id + ". Incorrect type for param 0");
                                  }
                                  Type value_type = symbolsTable.get(value.getTypeName());
                                  subType = value_type.getSubType();
                                }

                                //Check param type with function param type
                                Type paramType = symbolsTable.getParam(fun_id, 0);
                                SUBJACENTTYPE paramSubType = symbolsTable.get(paramType.getTypeName()).getSubType();

                                if(paramSubType != subType){
                                  throw new SemanticError(fun_id + ". Incorrect type for param 0. Expected " + subType + " but got " + paramSubType);
                                }

                                Type fun_type = symbolsTable.get(fun_id);
                                String fun_back_id = fun_type.getBackendId();

                                c3a_g.generateC3aInstr(
                                  Code.param,
                                  value.getVarId(),
                                  null,
                                  fun_back_id
                                );

                                RESULT = new SymbolCallBody(fun_id, fun_back_id, 0+1);
                              }catch(SymbolsTableError e){

                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_BODY",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INSTRUCTION_OUT ::= instr_out lparen VALUE rparen 
            {
              SymbolInstructionOut RESULT =null;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                String var_id = value.getVarId();
                                SUBJACENTTYPE subtype;

                                if(value.getType() == TYPE.dnull){
                                  subtype = value.getSubType();
                                }else{
                                  Type var_type = symbolsTable.get(value.getTypeName());
                                  subtype = var_type.getSubType();
                                }

                                if(value.getType() == TYPE.dnull && value.getSubType() == SUBJACENTTYPE.st_string){
                                  var_id = backend.addTempStrVar(0, value.getStringSize(), (String) value.getValue());
                                  c3a_g.generateC3aInstr(
                                    Code.output,
                                    subtype.toString(),
                                    (String) value.getValue(),
                                    var_id
                                  );
                                }else{
                                  c3a_g.generateC3aInstr(
                                    Code.output,
                                    subtype.toString(),
                                    null,
                                    var_id
                                  );
                                }
                                RESULT = new SymbolInstructionOut();
                              }catch(SymbolsTableError e){
                                
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OUT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DEFINE_FUNCTION ::= FUNCTION_INIT lbracket BLOCK_IN FUNCTION_INSTRUCTIONS FUNCTION_RETURN BLOCK_OUT rbracket 
            {
              SymbolDefFunction RESULT =null;
		Location fun_initxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location fun_initxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		SymbolFunInit fun_init = (SymbolFunInit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location fun_retxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fun_retxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		SymbolFunReturn fun_ret = (SymbolFunReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                              //check if fun type and return type are the same
                              if(fun_init.getSubType() != fun_ret.getSubType()) {
                                throw new SemanticError("Invalid return type. Expected : "+fun_init.getSubType()+", but got: "+fun_ret.getSubType());
                              }

                              // no return value
                              if(fun_init.getSubType() == SUBJACENTTYPE.st_null){
                                c3a_g.generateC3aInstr(
                                  Code.rtn,
                                  null,
                                  null,
                                  fun_init.getFunId()
                                );
                              }
                              // return value
                              else{

                                c3a_g.generateC3aInstr(
                                  Code.rtn,
                                  fun_ret.getVarId(),
                                  null,
                                  fun_init.getFunId()
                                );
                              }

                              RESULT = new SymbolDefFunction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINE_FUNCTION",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FUNCTION_INIT ::= inst_function id FUNCTION_PARAMS rparen two_points id 
            {
              SymbolFunInit RESULT =null;
		Location fun_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location fun_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location fun_paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location fun_paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		SymbolFunParams fun_params = (SymbolFunParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                // check return type
                                Type return_fun_type = symbolsTable.get(type_id);
                                if(return_fun_type.getType() != TYPE.dtype){
                                  throw new SemanticError("Function declaration : invalid type");
                                }

                                SUBJACENTTYPE subType = return_fun_type.getSubType();

                                String backId = backend.addProc(fun_id, 0,return_fun_type.getSize(), 0, subType);

                                Type fun_type = new Type(backId, TYPE.dfun, type_id);

                                symbolsTable.add(fun_id, fun_type);
                                
                                // add params if it has
                                ArrayList<Param> params = fun_params.getParams();
                                if(params != null){
                                  for(Param param : params){
                                    Type param_type = param.getType();
                                    SUBJACENTTYPE param_subType = symbolsTable.get(param.getType().getTypeName()).getSubType();
                                    String param_backId = backend.addVar(param.getVarId(), 0, param.getSize(), param_subType);
                                    param_type.setBackendId(param_backId);
                                    symbolsTable.addParam(fun_id, param_backId, param.getVarId(), param_type);
                                  }
                                }

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  backId
                                );

                                c3a_g.generateC3aInstr(
                                  Code.pmb,
                                  null,
                                  null,
                                  backId
                                );

                                RESULT = new SymbolFunInit(backId, subType);
                              }catch(SymbolsTableError e){
                                
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INIT",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FUNCTION_PARAMS ::= FUNCTION_W_PARAMS 
            {
              SymbolFunParams RESULT =null;
		Location paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		SymbolFunWParams params = (SymbolFunWParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              RESULT = new SymbolFunParams(params.getParams());
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_PARAMS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FUNCTION_PARAMS ::= lparen 
            {
              SymbolFunParams RESULT =null;
		
                              RESULT = new SymbolFunParams();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_PARAMS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FUNCTION_W_PARAMS ::= FUNCTION_W_PARAMS separator id two_points id 
            {
              SymbolFunWParams RESULT =null;
		Location prev_paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location prev_paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		SymbolFunWParams prev_params = (SymbolFunWParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                //check param type
                                Type type_type = symbolsTable.get(type_id);
                                if(type_type.getType() != TYPE.dtype){
                                  throw new Error("Invalid param type");
                                }

                                Type param_type = new Type(TYPE.darg, type_id);

                                Param param = new Param(id, param_type, type_type.getSize());

                                RESULT = new SymbolFunWParams(param, prev_params);
                              }catch(SymbolsTableError e){
                                
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_W_PARAMS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FUNCTION_W_PARAMS ::= lparen id two_points id 
            {
              SymbolFunWParams RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location type_idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location type_idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              try{
                                //check param type
                                Type type_type = symbolsTable.get(type_id);
                                if(type_type.getType() != TYPE.dtype){
                                  throw new SemanticError("Invalid param type");
                                }

                                Type param_type = new Type(TYPE.darg, type_id);

                                Param param = new Param(id, param_type, type_type.getSize());

                                RESULT = new SymbolFunWParams(param);
                              }catch(SymbolsTableError e){
                                
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_W_PARAMS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUNCTION_INSTRUCTIONS ::= INSTRUCTIONS 
            {
              SymbolFunInstructions RESULT =null;
		
                              RESULT = new SymbolFunInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INSTRUCTIONS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FUNCTION_INSTRUCTIONS ::= 
            {
              SymbolFunInstructions RESULT =null;
		
                              RESULT = new SymbolFunInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INSTRUCTIONS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUNCTION_RETURN ::= inst_return VALUE nextinstr 
            {
              SymbolFunReturn RESULT =null;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              try{
                                // is literall
                                SUBJACENTTYPE subType = null;
                                if(value.getType() == TYPE.dnull){
                                  subType = value.getSubType();
                                }

                                // is variable
                                if(value.getType() != TYPE.dnull){
                                  Type type_type = symbolsTable.get(value.getTypeName());
                                  subType = type_type.getSubType();
                                }

                                RESULT = new SymbolFunReturn(value.getVarId(), subType);
                              }catch(SymbolsTableError e){
                                
                              }
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_RETURN",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUNCTION_RETURN ::= EMPTY 
            {
              SymbolFunReturn RESULT =null;
		
                              RESULT = new SymbolFunReturn();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_RETURN",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EMPTY ::= 
            {
              SymbolEmpty RESULT =null;
		 RESULT = new SymbolEmpty(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EMPTY",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
