
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Sin;

import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import Symbols.*;
import SymbolsTable.*;
import SymbolsTable.Type.TYPE;
import SymbolsTable.Type.SUBJACENTTYPE;
import Lex.*;
import backend.*;
import java.util.Stack;
import java.util.ArrayList;
import backend.Instruction.Code;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\043\004\000\002\043\003\000\002\005\012" +
    "\000\002\004\002\000\002\006\003\000\002\006\003\000" +
    "\002\007\004\000\002\007\003\000\002\010\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\011\002\000\002\012\002" +
    "\000\002\013\005\000\002\013\010\000\002\014\003\000" +
    "\002\014\003\000\002\022\005\000\002\024\003\000\002" +
    "\024\003\000\002\025\005\000\002\025\006\000\002\025" +
    "\005\000\002\015\003\000\002\015\005\000\002\015\004" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\016\003\000\002\016\005\000\002\016\004\000\002" +
    "\016\004\000\002\017\003\000\002\017\005\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\004\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\006\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\004\000\002\020\003\000\002\020\004\000" +
    "\002\020\005\000\002\031\007\000\002\033\005\000\002" +
    "\035\002\000\002\034\002\000\002\036\014\000\002\032" +
    "\003\000\002\037\015\000\002\037\002\000\002\040\012" +
    "\000\002\040\003\000\002\041\003\000\002\042\013\000" +
    "\002\052\005\000\002\052\004\000\002\053\005\000\002" +
    "\053\005\000\002\023\006\000\002\044\011\000\002\045" +
    "\010\000\002\046\003\000\002\046\003\000\002\047\007" +
    "\000\002\047\006\000\002\050\003\000\002\050\002\000" +
    "\002\051\005\000\002\051\003\000\002\054\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\004\022\uffff\001\002\000\004\022\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\004\267\036\266\001\002\000\004\022\007\001" +
    "\002\000\004\002\ufffd\001\002\000\004\002\000\001\002" +
    "\000\004\031\014\001\002\000\016\004\ufff0\016\ufff0\021" +
    "\ufff0\023\ufff0\026\ufff0\032\ufff0\001\002\000\016\004\020" +
    "\016\016\021\024\023\uffab\026\023\032\uffab\001\002\000" +
    "\004\027\173\001\002\000\004\033\226\001\002\000\014" +
    "\015\216\024\212\027\125\034\215\035\uffa8\001\002\000" +
    "\004\033\211\001\002\000\004\033\210\001\002\000\004" +
    "\027\205\001\002\000\004\027\uffa8\001\002\000\006\023" +
    "\164\032\uffa8\001\002\000\016\004\ufff7\016\ufff7\021\ufff7" +
    "\023\ufff7\026\ufff7\032\ufff7\001\002\000\016\004\020\016" +
    "\016\021\024\023\uffac\026\023\032\uffac\001\002\000\004" +
    "\033\160\001\002\000\016\004\ufff4\016\ufff4\021\ufff4\023" +
    "\ufff4\026\ufff4\032\ufff4\001\002\000\016\004\ufff5\016\ufff5" +
    "\021\ufff5\023\ufff5\026\ufff5\032\ufff5\001\002\000\006\030" +
    "\034\034\035\001\002\000\012\010\uffb6\030\uffb6\033\uffb6" +
    "\034\uffb6\001\002\000\022\004\052\005\040\006\037\007" +
    "\047\012\046\014\054\025\060\027\055\001\002\000\012" +
    "\011\uffc9\030\uffd1\033\uffd1\034\uffd1\001\002\000\012\010" +
    "\uffda\030\uffda\033\uffda\034\uffda\001\002\000\016\010\uffe4" +
    "\013\uffe4\014\uffe4\030\uffe4\033\uffe4\034\uffe4\001\002\000" +
    "\014\010\uffd4\011\uffc8\030\uffd4\033\uffd4\034\uffd4\001\002" +
    "\000\006\030\uffb5\034\uffb5\001\002\000\012\010\uffd0\030" +
    "\uffd0\033\uffd0\034\uffd0\001\002\000\016\010\uffd5\013\uffe1" +
    "\014\uffe1\030\uffd5\033\uffd5\034\uffd5\001\002\000\004\011" +
    "\147\001\002\000\014\004\110\007\047\012\141\014\123" +
    "\027\142\001\002\000\014\010\uffc6\011\uffc6\030\uffc6\033" +
    "\uffc6\034\uffc6\001\002\000\006\013\130\014\131\001\002" +
    "\000\012\010\uffd7\030\uffd7\033\uffd7\034\uffd7\001\002\000" +
    "\022\010\uffde\011\uffde\013\uffde\014\uffde\027\125\030\uffde" +
    "\033\uffde\034\uffde\001\002\000\016\010\uffd2\013\uffdf\014" +
    "\uffdf\030\uffd2\033\uffd2\034\uffd2\001\002\000\014\004\110" +
    "\005\040\012\105\014\106\027\107\001\002\000\022\004" +
    "\052\005\040\006\037\007\047\012\046\014\054\025\060" +
    "\027\055\001\002\000\012\011\uffcb\030\uffd6\033\uffd6\034" +
    "\uffd6\001\002\000\016\011\uffca\013\uffe0\014\uffe0\030\uffd8" +
    "\033\uffd8\034\uffd8\001\002\000\004\027\061\001\002\000" +
    "\004\030\062\001\002\000\012\010\uffcf\030\uffcf\033\uffcf" +
    "\034\uffcf\001\002\000\010\010\uffd1\011\uffc9\030\102\001" +
    "\002\000\004\010\077\001\002\000\012\010\uffd5\013\uffe1" +
    "\014\uffe1\030\076\001\002\000\006\010\uffd7\030\075\001" +
    "\002\000\012\010\uffd2\013\uffdf\014\uffdf\030\074\001\002" +
    "\000\010\010\uffd6\011\uffcb\030\073\001\002\000\014\010" +
    "\uffd8\011\uffca\013\uffe0\014\uffe0\030\072\001\002\000\020" +
    "\010\uffdd\011\uffdd\013\uffdd\014\uffdd\030\uffdd\033\uffdd\034" +
    "\uffdd\001\002\000\014\010\uffc4\011\uffc4\030\uffc4\033\uffc4" +
    "\034\uffc4\001\002\000\016\010\uffe5\013\uffe5\014\uffe5\030" +
    "\uffe5\033\uffe5\034\uffe5\001\002\000\012\010\uffd9\030\uffd9" +
    "\033\uffd9\034\uffd9\001\002\000\016\010\uffe3\013\uffe3\014" +
    "\uffe3\030\uffe3\033\uffe3\034\uffe3\001\002\000\022\004\052" +
    "\005\040\006\037\007\047\012\046\014\054\025\060\027" +
    "\055\001\002\000\004\030\101\001\002\000\014\010\uffc3" +
    "\011\uffc3\030\uffc3\033\uffc3\034\uffc3\001\002\000\014\010" +
    "\uffcd\011\uffcd\030\uffcd\033\uffcd\034\uffcd\001\002\000\020" +
    "\010\uffdb\011\uffdb\013\uffdb\014\uffdb\030\uffdb\033\uffdb\034" +
    "\uffdb\001\002\000\016\010\uffe2\013\uffe2\014\uffe2\030\uffe2" +
    "\033\uffe2\034\uffe2\001\002\000\012\004\110\012\105\014" +
    "\123\027\124\001\002\000\014\004\110\005\040\012\105" +
    "\014\106\027\117\001\002\000\014\004\110\005\040\012" +
    "\105\014\054\027\114\001\002\000\020\010\uffde\011\uffde" +
    "\013\uffde\014\uffde\030\uffde\033\uffde\034\uffde\001\002\000" +
    "\010\013\uffe0\014\uffe0\030\072\001\002\000\010\013\uffdf" +
    "\014\uffdf\030\116\001\002\000\010\013\uffe1\014\uffe1\030" +
    "\076\001\002\000\014\004\110\005\040\012\105\014\054" +
    "\027\114\001\002\000\010\013\uffdf\014\uffdf\030\074\001" +
    "\002\000\016\010\uffe6\013\uffe6\014\uffe6\030\uffe6\033\uffe6" +
    "\034\uffe6\001\002\000\014\004\110\005\040\012\105\014" +
    "\106\027\117\001\002\000\004\030\072\001\002\000\004" +
    "\030\076\001\002\000\020\010\uffdc\011\uffdc\013\uffdc\014" +
    "\uffdc\030\uffdc\033\uffdc\034\uffdc\001\002\000\012\004\110" +
    "\012\105\014\123\027\124\001\002\000\012\004\110\012" +
    "\105\014\123\027\124\001\002\000\024\004\052\005\040" +
    "\006\037\007\047\012\046\014\054\025\060\027\055\030" +
    "\127\001\002\000\006\030\uffb4\034\uffb4\001\002\000\012" +
    "\010\uffb7\030\uffb7\033\uffb7\034\uffb7\001\002\000\014\004" +
    "\uffe8\005\uffe8\012\uffe8\014\uffe8\027\uffe8\001\002\000\014" +
    "\004\uffe9\005\uffe9\012\uffe9\014\uffe9\027\uffe9\001\002\000" +
    "\014\004\110\005\040\012\105\014\054\027\114\001\002" +
    "\000\016\010\uffe0\013\uffe0\014\uffe0\030\uffe0\033\uffe0\034" +
    "\uffe0\001\002\000\016\010\uffdf\013\uffdf\014\uffdf\030\uffdf" +
    "\033\uffdf\034\uffdf\001\002\000\016\010\uffe7\013\130\014" +
    "\131\030\uffe7\033\uffe7\034\uffe7\001\002\000\016\010\uffe1" +
    "\013\uffe1\014\uffe1\030\uffe1\033\uffe1\034\uffe1\001\002\000" +
    "\014\010\uffc5\011\uffc5\030\uffc5\033\uffc5\034\uffc5\001\002" +
    "\000\014\010\uffd3\011\uffc7\030\uffd3\033\uffd3\034\uffd3\001" +
    "\002\000\014\004\110\007\047\012\141\014\123\027\145" +
    "\001\002\000\022\004\052\005\040\006\037\007\047\012" +
    "\046\014\054\025\060\027\055\001\002\000\010\010\uffd1" +
    "\011\uffc9\030\144\001\002\000\014\010\uffcc\011\uffcc\030" +
    "\uffcc\033\uffcc\034\uffcc\001\002\000\014\004\110\007\047" +
    "\012\141\014\123\027\145\001\002\000\004\030\073\001" +
    "\002\000\014\004\110\007\047\012\151\014\123\027\155" +
    "\001\002\000\014\010\uffce\011\uffce\030\uffce\033\uffce\034" +
    "\uffce\001\002\000\014\004\110\007\047\012\141\014\123" +
    "\027\142\001\002\000\014\010\uffca\011\uffca\030\uffca\033" +
    "\uffca\034\uffca\001\002\000\014\010\uffcb\011\uffcb\030\uffcb" +
    "\033\uffcb\034\uffcb\001\002\000\014\010\uffc9\011\uffc9\030" +
    "\uffc9\033\uffc9\034\uffc9\001\002\000\022\004\052\005\040" +
    "\006\037\007\047\012\046\014\054\025\060\027\055\001" +
    "\002\000\014\010\uffc8\011\uffc8\030\uffc8\033\uffc8\034\uffc8" +
    "\001\002\000\014\010\uffc7\011\uffc7\030\uffc7\033\uffc7\034" +
    "\uffc7\001\002\000\016\004\ufff3\016\ufff3\021\ufff3\023\ufff3" +
    "\026\ufff3\032\ufff3\001\002\000\016\004\ufff8\016\ufff8\021" +
    "\ufff8\023\ufff8\026\ufff8\032\ufff8\001\002\000\004\032\uffef" +
    "\001\002\000\004\032\uffa9\001\002\000\022\004\052\005" +
    "\040\006\037\007\047\012\046\014\054\025\060\027\055" +
    "\001\002\000\004\033\166\001\002\000\004\032\uffaa\001" +
    "\002\000\004\032\170\001\002\000\004\022\uffb2\001\002" +
    "\000\004\027\173\001\002\000\004\027\uffb9\001\002\000" +
    "\014\004\110\007\047\012\151\014\123\027\155\001\002" +
    "\000\004\031\175\001\002\000\012\004\ufff0\016\ufff0\021" +
    "\ufff0\026\ufff0\001\002\000\012\004\uffc1\016\uffc1\021\uffc1" +
    "\026\uffc1\001\002\000\012\004\020\016\016\021\024\026" +
    "\023\001\002\000\014\004\020\016\016\021\024\026\023" +
    "\032\uffef\001\002\000\004\032\202\001\002\000\016\004" +
    "\uffb8\016\uffb8\021\uffb8\023\uffb8\026\uffb8\032\uffb8\001\002" +
    "\000\006\011\147\030\204\001\002\000\004\031\uffc2\001" +
    "\002\000\022\004\052\005\040\006\037\007\047\012\046" +
    "\014\054\025\060\027\055\001\002\000\004\030\207\001" +
    "\002\000\004\033\uffb3\001\002\000\016\004\ufff1\016\ufff1" +
    "\021\ufff1\023\ufff1\026\ufff1\032\ufff1\001\002\000\016\004" +
    "\ufff6\016\ufff6\021\ufff6\023\ufff6\026\ufff6\032\ufff6\001\002" +
    "\000\004\035\uffec\001\002\000\004\035\222\001\002\000" +
    "\004\035\uffeb\001\002\000\004\004\221\001\002\000\022" +
    "\004\052\005\040\006\037\007\047\012\046\014\054\025" +
    "\060\027\055\001\002\000\004\033\uffea\001\002\000\004" +
    "\033\uffee\001\002\000\010\024\212\034\215\035\uffa8\001" +
    "\002\000\004\004\223\001\002\000\004\015\224\001\002" +
    "\000\022\004\052\005\040\006\037\007\047\012\046\014" +
    "\054\025\060\027\055\001\002\000\004\033\uffed\001\002" +
    "\000\016\004\ufff2\016\ufff2\021\ufff2\023\ufff2\026\ufff2\032" +
    "\ufff2\001\002\000\004\031\230\001\002\000\012\004\ufff0" +
    "\016\ufff0\021\ufff0\026\ufff0\001\002\000\012\004\uffc1\016" +
    "\uffc1\021\uffc1\026\uffc1\001\002\000\012\004\020\016\016" +
    "\021\024\026\023\001\002\000\014\004\020\016\016\021" +
    "\024\026\023\032\uffef\001\002\000\004\032\235\001\002" +
    "\000\022\004\uffbc\016\uffbc\017\uffa8\020\uffbc\021\uffbc\023" +
    "\uffbc\026\uffbc\032\uffbc\001\002\000\020\004\uffc0\016\uffc0" +
    "\020\uffa8\021\uffc0\023\uffc0\026\uffc0\032\uffc0\001\002\000" +
    "\006\017\uffbe\020\uffbe\001\002\000\004\017\241\001\002" +
    "\000\004\027\uffc0\001\002\000\004\027\173\001\002\000" +
    "\004\031\244\001\002\000\012\004\ufff0\016\ufff0\021\ufff0" +
    "\026\ufff0\001\002\000\012\004\uffc1\016\uffc1\021\uffc1\026" +
    "\uffc1\001\002\000\012\004\020\016\016\021\024\026\023" +
    "\001\002\000\014\004\020\016\016\021\024\026\023\032" +
    "\uffef\001\002\000\004\032\251\001\002\000\022\004\uffbc" +
    "\016\uffbc\017\uffa8\020\uffbc\021\uffbc\023\uffbc\026\uffbc\032" +
    "\uffbc\001\002\000\020\004\uffbd\016\uffbd\020\uffbd\021\uffbd" +
    "\023\uffbd\026\uffbd\032\uffbd\001\002\000\016\004\uffbf\016" +
    "\uffbf\021\uffbf\023\uffbf\026\uffbf\032\uffbf\001\002\000\016" +
    "\004\uffba\016\uffba\021\uffba\023\uffba\026\uffba\032\uffba\001" +
    "\002\000\004\020\256\001\002\000\004\031\257\001\002" +
    "\000\012\004\ufff0\016\ufff0\021\ufff0\026\ufff0\001\002\000" +
    "\012\004\uffc0\016\uffc0\021\uffc0\026\uffc0\001\002\000\012" +
    "\004\020\016\016\021\024\026\023\001\002\000\014\004" +
    "\020\016\016\021\024\026\023\032\uffef\001\002\000\004" +
    "\032\264\001\002\000\016\004\uffbb\016\uffbb\021\uffbb\023" +
    "\uffbb\026\uffbb\032\uffbb\001\002\000\004\002\ufffe\001\002" +
    "\000\004\027\ufffb\001\002\000\004\027\272\001\002\000" +
    "\004\030\302\001\002\000\006\030\uffb0\034\276\001\002" +
    "\000\006\004\273\030\uffaf\001\002\000\004\035\274\001" +
    "\002\000\004\004\275\001\002\000\006\030\uffad\034\uffad" +
    "\001\002\000\004\004\277\001\002\000\004\035\300\001" +
    "\002\000\004\004\301\001\002\000\006\030\uffae\034\uffae" +
    "\001\002\000\004\035\303\001\002\000\004\004\304\001" +
    "\002\000\004\031\uffb1\001\002\000\004\027\306\001\002" +
    "\000\004\030\307\001\002\000\004\031\310\001\002\000" +
    "\014\004\020\016\016\021\024\026\023\032\uffa8\001\002" +
    "\000\004\032\ufff9\001\002\000\014\004\020\016\016\021" +
    "\024\026\023\032\ufffa\001\002\000\004\032\314\001\002" +
    "\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\006\002\004\003\003\001\001\000\012\005" +
    "\010\043\011\044\007\045\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\010\043" +
    "\264\044\007\045\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\014\001\001\000" +
    "\026\007\026\010\025\013\020\022\027\023\016\036\031" +
    "\042\030\050\024\052\021\053\032\001\001\000\004\033" +
    "\226\001\001\000\002\001\001\000\006\014\212\054\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\170\054\171\001\001\000\006\051\161" +
    "\054\162\001\001\000\002\001\001\000\022\010\160\013" +
    "\020\022\027\023\016\036\031\042\030\052\021\053\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\015\043" +
    "\016\056\017\050\020\055\021\041\025\052\026\047\027" +
    "\035\030\044\031\040\052\042\053\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\121\020\136\031\137\001" +
    "\001\000\002\001\001\000\004\024\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\103\016\102\001\001\000\032\015\064\016\070\017\065" +
    "\020\067\021\063\025\066\026\047\027\062\030\044\031" +
    "\040\052\042\053\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\015" +
    "\043\016\056\017\050\020\055\021\077\025\052\026\047" +
    "\027\035\030\044\031\040\052\042\053\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\121\001\001\000" +
    "\006\015\103\016\102\001\001\000\012\015\112\016\110" +
    "\025\111\026\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\112" +
    "\016\110\025\114\026\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\120\016\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\102\001\001\000\004\016\117\001\001\000\032\015\043" +
    "\016\056\017\050\020\055\021\125\025\052\026\047\027" +
    "\035\030\044\031\040\052\042\053\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\135\016\132\025\133\026\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\121\020\136\001\001\000\032\015\043\016" +
    "\070\017\050\020\067\021\063\025\052\026\047\027\142" +
    "\030\044\031\040\052\042\053\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\117\020\145\001\001" +
    "\000\002\001\001\000\014\016\151\020\152\027\153\030" +
    "\147\031\155\001\001\000\002\001\001\000\010\016\121" +
    "\020\136\031\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\015\043\016\070\017\050" +
    "\020\067\021\063\025\052\026\047\027\062\030\044\031" +
    "\040\052\042\053\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\166\001\001\000\002\001\001\000\032\015\043\016\056" +
    "\017\050\020\055\021\164\025\052\026\047\027\035\030" +
    "\044\031\040\052\042\053\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\173\001\001\000\002\001\001\000\014\016\151" +
    "\020\152\027\153\030\202\031\155\001\001\000\002\001" +
    "\001\000\004\011\175\001\001\000\004\035\176\001\001" +
    "\000\024\007\177\010\025\013\020\022\027\023\016\036" +
    "\031\042\030\052\021\053\032\001\001\000\024\010\160" +
    "\012\200\013\020\022\027\023\016\036\031\042\030\052" +
    "\021\053\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\015\043\016" +
    "\056\017\050\020\055\021\205\025\052\026\047\027\035" +
    "\030\044\031\040\052\042\053\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\217\001\001\000\032\015\043\016\056\017\050" +
    "\020\055\021\216\025\052\026\047\027\035\030\044\031" +
    "\040\052\042\053\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\212\054\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\015\043\016\056\017\050" +
    "\020\055\021\224\025\052\026\047\027\035\030\044\031" +
    "\040\052\042\053\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\230\001\001\000" +
    "\004\035\231\001\001\000\024\007\232\010\025\013\020" +
    "\022\027\023\016\036\031\042\030\052\021\053\032\001" +
    "\001\000\024\010\160\012\233\013\020\022\027\023\016" +
    "\036\031\042\030\052\021\053\032\001\001\000\002\001" +
    "\001\000\010\032\237\037\235\054\236\001\001\000\012" +
    "\032\254\034\253\040\252\054\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\241\001\001\000\004" +
    "\033\242\001\001\000\002\001\001\000\004\011\244\001" +
    "\001\000\004\035\245\001\001\000\024\007\246\010\025" +
    "\013\020\022\027\023\016\036\031\042\030\052\021\053" +
    "\032\001\001\000\024\010\160\012\247\013\020\022\027" +
    "\023\016\036\031\042\030\052\021\053\032\001\001\000" +
    "\002\001\001\000\010\032\237\037\251\054\236\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\257\001\001" +
    "\000\004\034\260\001\001\000\024\007\261\010\025\013" +
    "\020\022\027\023\016\036\031\042\030\052\021\053\032" +
    "\001\001\000\024\010\160\012\262\013\020\022\027\023" +
    "\016\036\031\042\030\052\021\053\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\304\001\001\000\006\046\267\047\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\312\007\311\010\025\013\020\022\027\023\016\036\031" +
    "\042\030\052\021\053\032\054\310\001\001\000\002\001" +
    "\001\000\022\010\160\013\020\022\027\023\016\036\031" +
    "\042\030\052\021\053\032\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private SymbolsTable symbolsTable;
  private Backend backend;
  private LexerCup scanner;
  private C3a_generator c3a_g;
  private AssemblerGenerator assembler;

  private Stack<String> labelTrueStack;
  private Stack<String> labelFalseStack;

  public Parser(LexerCup scanner, SymbolFactory sf){
    super(scanner);
    this.scanner = scanner;
    this.symbolsTable = new SymbolsTable();
    this.backend = new Backend();
    this.c3a_g = new C3a_generator(backend);
    this.assembler = new AssemblerGenerator(symbolsTable, backend, c3a_g);
    this.labelTrueStack = new Stack<String>();
    this.labelFalseStack = new Stack<String>();
  }

  public void syntax_error(Symbol s) {
      report_error(
        "Syntax Error : " + s.value + " (" + (s.left+1) + ":" + (s.right+1) + ")\n", null
      );
  }

  public void unrecovered_syntax_error(Symbol s){
    try {
      scanner.closeTokensFile((s.left+1), (s.right+1));

      report_fatal_error(
        "Unrecovered Syntax Error : " + s.value + " (" + (s.left+1) + ":" + (s.right+1) + ")", null
      );
    } catch (Exception e) {
			e.printStackTrace();
		};
  }

  private void initTypes() {
    //init NUMBER type
    Type number_type = new Type(TYPE.dtype, SUBJACENTTYPE.st_number, 4, Integer.MIN_VALUE, Integer.MIN_VALUE);
    symbolsTable.add("number", number_type);
    
    // init String type
    Type str_type = new Type(TYPE.dtype, SUBJACENTTYPE.st_string, 2, 0, 0);
    symbolsTable.add("string", str_type);
    
    //init BOOLEAN type
    Type bool_type = new Type(TYPE.dtype,SUBJACENTTYPE.st_boolean,2,0,1);
    symbolsTable.add("boolean",bool_type);

    //init VOID type
    Type void_type = new Type(TYPE.dtype, SUBJACENTTYPE.st_null, 0, 0, 0);
    symbolsTable.add("void", void_type);
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= STARTS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStarts start_val = (SymbolStarts)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // STARTS ::= INIT DECLARE_FUNCTIONS 
            {
              SymbolStarts RESULT =null;
		
                              backend.storeTables();

                              //NOT OPTIMIZED CODE
                              c3a_g.savec3aInFile(false);
                              assembler.generateAssembler(false);
                              
                              //OPTIMIZED CODE
                              c3a_g.optimize();
                              c3a_g.savec3aInFile(true);
                              assembler.generateAssembler(true);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STARTS",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= 
            {
              SymbolInit RESULT =null;
		
                              initTypes();
                              RESULT = new SymbolInit();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARE_FUNCTIONS ::= DEFINE_FUNCTION DECLARE_FUNCTIONS 
            {
              SymbolDeclareFunctions RESULT =null;
		
                              RESULT = new SymbolDeclareFunctions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTIONS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARE_FUNCTIONS ::= MAIN 
            {
              SymbolDeclareFunctions RESULT =null;
		
                              RESULT = new SymbolDeclareFunctions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTIONS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= inst_function inst_main M_MAIN lparen rparen lbracket MAIN_INSTRUCTIONS rbracket 
            {
              SymbolMain RESULT =null;
		
                              RESULT = new SymbolMain();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // M_MAIN ::= 
            {
              SymbolMMain RESULT =null;
		
                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                "main"
                              );

                              backend.addMain();

                              RESULT = new SymbolMMain();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_MAIN",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAIN_INSTRUCTIONS ::= INSTRUCTIONS 
            {
              SymbolMainInstr RESULT =null;
		
                              RESULT = new SymbolMainInstr();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_INSTRUCTIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAIN_INSTRUCTIONS ::= EMPTY 
            {
              SymbolMainInstr RESULT =null;
		
                              RESULT = new SymbolMainInstr();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_INSTRUCTIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              SymbolInstructions RESULT =null;
		
                              RESULT = new SymbolInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTIONS ::= INSTRUCTION 
            {
              SymbolInstructions RESULT =null;
		
                              RESULT = new SymbolInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= DECLARATIONS nextinstr 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= INSTRUCTION_IF 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= INSTRUCTION_WHILE 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= OPERATOR_ASSIG nextinstr 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= INSTRUCTION_OUT nextinstr 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= CALL_FUNCTION nextinstr 
            {
              SymbolInstruction RESULT =null;
		
                              RESULT = new SymbolInstruction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOCK_IN ::= 
            {
              SymbolBlockIn RESULT =null;
		
                              symbolsTable.enterBlock();
                              RESULT = new SymbolBlockIn();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_IN",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOCK_OUT ::= 
            {
              SymbolBlockOut RESULT =null;
		
                              symbolsTable.leaveBlock();
                              RESULT = new SymbolBlockOut();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_OUT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARATIONS ::= id separator DECLARATIONS 
            {
              SymbolDeclarations RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int declarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDeclarations declarations = (SymbolDeclarations)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Type type = declarations.getType();
                              String backId;

                              if(type.getSubType() == SUBJACENTTYPE.st_string){
                                String value = declarations.getValue();
                                backId = backend.addStrVar(var_id, 0,type.getSize(), value);
                              }else{
                                backId = backend.addVar(var_id, 0, type.getSize(), type.getSubType());
                              }
                              
                              type.setBackendId(backId);

                              symbolsTable.add(var_id, type);
                          
                              c3a_g.generateC3aInstr(
                                Code.copy,
                                declarations.getVarId(),
                                null,
                                backId
                              );

                              RESULT = declarations;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARATIONS ::= id CONSTANT two_points id op_assig VALUE 
            {
              SymbolDeclarations RESULT =null;
		int id_varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int id_varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id_var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolConstant constant = (SymbolConstant)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int type_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int type_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              boolean isConst = constant != null ? constant.getIsConst() : false;

                              Type type = symbolsTable.get(type_id);

                              if(type.getType() != TYPE.dtype){
                                throw new Error("Type not valid");
                              }

                              if(type.getSubType() != SUBJACENTTYPE.st_boolean
                                && type.getSubType() != SUBJACENTTYPE.st_number
                                && type.getSubType() != SUBJACENTTYPE.st_string ){
                                  throw new Error("Invalid subjacent type");
                              }

                              //IF LITERALL (type = null) CHECK SUBJACENT TYPE
                              if(value.getType() == TYPE.dnull && type.getSubType() != value.getSubType()){
                                throw new Error("Value and type must have same subjacent type");
                              }
                              
                              if(value.getType() != TYPE.dnull && !value.getTypeName().equals(type_id)){
                                throw new Error("Value must have the same type");
                              }

                              Type var_type;

                              if(isConst){
                                var_type = new Type(TYPE.dconst, type_id, value.getValue());
                              }
                              else{
                                var_type = new Type(TYPE.dvar, type_id); 
                              }

                              int size = type.getSize();
                              if(value.getIsString()){
                                size = value.getStringSize();
                              }

                              String var_id;
                              if(type.getSubType() == SUBJACENTTYPE.st_string){
                                String str_value = (String) value.getValue();
                                var_id = backend.addStrVar(id_var, 0, type.getSize(), str_value);
                              }else{
                                var_id = backend.addVar(id_var, 0,type.getSize(), type.getSubType());
                              }

                              var_type.setBackendId(var_id);

                              String val_id = value.getVarId();
                              symbolsTable.add(id_var, var_type);

                              SymbolDeclarations symDcls;
                              if(value.getIsString()){
                                symDcls = new SymbolDeclarations(val_id, var_type, (String) value.getValue());
                              }else{
                                symDcls = new SymbolDeclarations(val_id, var_type);
                              }

                              if(type.getSubType() != SUBJACENTTYPE.st_string){
                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  val_id,
                                  null,
                                  var_id
                                );
                              }

                              RESULT = symDcls;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONSTANT ::= dconst 
            {
              SymbolConstant RESULT =null;
		
                              RESULT = new SymbolConstant(true);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONSTANT ::= EMPTY 
            {
              SymbolConstant RESULT =null;
		
                              RESULT = new SymbolConstant(false);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERATOR_ASSIG ::= id op_assig VALUE 
            {
              SymbolOperatorAssignation RESULT =null;
		int var_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String var_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Type varType = symbolsTable.get(var_id);
                              String type_id = varType.getTypeName();

                              if(varType.getType() == TYPE.dconst){
                                throw new Error("Cant assign value to constant");
                              }

                              //IF LITERALL (type = null) CHECK SUBJACENT TYPE
                              if(value.getType() == TYPE.dnull && varType.getSubType() == value.getSubType()){
                                throw new Error("Value and type must have same subjacent type");
                              }
                              
                              if(value.getType() != TYPE.dnull && value.getTypeName() != type_id){
                                throw new Error("Value must have the same type");
                              }

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                value.getVarId(),
                                null,
                                varType.getBackendId()
                              );

                              RESULT = new SymbolOperatorAssignation();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR_ASSIG",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARITH_OP ::= op_arithmetical_b 
            {
              SymbolArithOperator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArithOperator(op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARITH_OP ::= op_arithmetical_c 
            {
              SymbolArithOperator RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArithOperator(op); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITH_OP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARITHMETICAL_OPERATION ::= ARITHMETICAL_VALUE ARITH_OP ARITHMETICAL_VALUE 
            {
              SymbolArithOperation RESULT =null;
		int arith_val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arith_val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolArithValue arith_val1 = (SymbolArithValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolArithOperator op = (SymbolArithOperator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arith_val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arith_val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArithValue arith_val2 = (SymbolArithValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolArithOperation sym;
                              boolean allConst = arith_val1.getIsConst() && arith_val2.getIsConst();

                              Code op_code;
                              
                              switch(op.getOperator()){
                                case "+" : 
                                  op_code = Code.add;
                                  break;
                                case "-" : 
                                  op_code = Code.sub;
                                  break;
                                case "*" : 
                                  op_code = Code.prod;
                                  break;
                                case "/" : 
                                  op_code = Code.div;
                                  break;
                                case "%" : 
                                  op_code = Code.mod;
                                  break;
                                default : 
                                  throw new Error("Invalid arithmetical operator");
                              }

                              Integer value = null;
                              if(allConst) {
                                Integer val1 = (Integer) arith_val1.getValue();
                                Integer val2 = (Integer) arith_val2.getValue();

                                switch(op.getOperator()){
                                  case "+" : 
                                    value = val1 + val2;
                                    break;
                                  case "-" : 
                                    value = val1 - val2;
                                    break;
                                  case "*" : 
                                    value = val1 * val2;
                                    break;
                                  case "/" : 
                                    if(val2 == 0){
                                      throw new Error("Cannot divide by zero");
                                    }
                                    value = val1 / val2;
                                    break;
                                  case "%" : 
                                    value = val1 % val2;
                                    break;
                                }
                              }

                              Type type_number = symbolsTable.get("number");
                              
                              String var_id = backend.addTempVar( 0, type_number.getSize(), type_number.getSubType());

                              c3a_g.generateC3aInstr(
                                op_code,
                                arith_val1.getVarId(),
                                arith_val2.getVarId(),
                                var_id
                              );

                              if(allConst){
                                sym = new SymbolArithOperation(var_id, value);
                              }
                              else{
                                sym = new SymbolArithOperation(var_id);
                              }
                              
                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARITHMETICAL_OPERATION ::= op_arithmetical_b lparen ARITHMETICAL_OPERATION rparen 
            {
              SymbolArithOperation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int arith_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arith_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolArithOperation arith_op = (SymbolArithOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              SymbolArithOperation sym = arith_op;
                              if(op.equals("-")){
                                Type type_number = symbolsTable.get("number");
                                String var_id = backend.addTempVar(0, type_number.getSize(),  type_number.getSubType());

                                if(arith_op.getIsConst()){
                                  Integer value = - arith_op.getValue().intValue();
                                  sym = new SymbolArithOperation(arith_op.getVarId(), value);
                                }else{
                                  sym = new SymbolArithOperation(var_id);
                                }

                                c3a_g.generateC3aInstr(
                                  Code.neg,
                                  arith_op.getVarId(),
                                  null,
                                  var_id
                                );
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARITHMETICAL_OPERATION ::= lparen ARITHMETICAL_OPERATION rparen 
            {
              SymbolArithOperation RESULT =null;
		int arith_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arith_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolArithOperation arith_op = (SymbolArithOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = arith_op;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_OPERATION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NUMBER_VALUE ::= number 
            {
              SymbolNumberVal RESULT =null;
		int n_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Integer value = Integer.valueOf(n_val);
                              RESULT = new SymbolNumberVal(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NUMBER_VALUE ::= lparen NUMBER_VALUE rparen 
            {
              SymbolNumberVal RESULT =null;
		int n_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolNumberVal n_val = (SymbolNumberVal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = n_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NUMBER_VALUE ::= op_arithmetical_b NUMBER_VALUE 
            {
              SymbolNumberVal RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int n_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolNumberVal n_val = (SymbolNumberVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolNumberVal sym = n_val;
                              if(op.equals("-")){
                                Integer value = - n_val.getValue().intValue();
                                sym = new SymbolNumberVal(value);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUMBER_VALUE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARITHMETICAL_VALUE ::= NUMBER_VALUE 
            {
              SymbolArithValue RESULT =null;
		int n_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolNumberVal n_val = (SymbolNumberVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            Integer value = n_val.getValue();

                            Type type_number = symbolsTable.get("number");
                            
                            String var_id = backend.addTempVar(0, type_number.getSize(),  type_number.getSubType());

                            c3a_g.generateC3aInstr(
                              Code.copy,
                              Integer.toString(value),
                              null,
                              var_id
                            );

                            RESULT = new SymbolArithValue(var_id, value);
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARITHMETICAL_VALUE ::= ID_VALUE 
            {
              SymbolArithValue RESULT =null;
		int id_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                            TYPE main_var_type = id_val.getType();

                            if(main_var_type != TYPE.darg && main_var_type != TYPE.dconst && main_var_type != TYPE.dvar){
                              throw new Error("Invalid arithmetic value type");
                            }

                            Type var_dtype = symbolsTable.get(id_val.getTypeName());

                            if(var_dtype.getSubType() != SUBJACENTTYPE.st_number){
                              throw new Error("Invalid subjacent type");
                            }

                            SymbolArithValue sym;
                            String var_id = id_val.getId();

                            if(main_var_type == TYPE.dconst){
                              Integer value = (Integer) id_val.getValue();
                              sym = new SymbolArithValue(var_id, value);
                            }else{
                              sym = new SymbolArithValue(var_id);
                            }

                            RESULT = sym;
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARITHMETICAL_VALUE ::= ARITHMETICAL_OPERATION 
            {
              SymbolArithValue RESULT =null;
		int arith_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arith_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArithOperation arith_op = (SymbolArithOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            SymbolArithValue sym;
                            if(arith_op.getIsConst()){
                              sym = new SymbolArithValue(arith_op.getVarId(), arith_op.getValue());
                            }else{
                              sym = new SymbolArithValue(arith_op.getVarId());
                            }

                            RESULT = sym;
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICAL_VALUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ID_VALUE ::= id 
            {
              SymbolIdVal RESULT =null;
		int id_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Type id_type = symbolsTable.get(id_val);
                              String var_id = id_type.getBackendId();
                              SymbolIdVal sym = new SymbolIdVal(var_id, id_type.getType(), id_type.getTypeName());
                              if(id_type.getType() == TYPE.dconst){
                                sym = new SymbolIdVal(var_id, id_type.getType(), id_type.getTypeName(), id_type.getValue());
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ID_VALUE ::= lparen ID_VALUE rparen 
            {
              SymbolIdVal RESULT =null;
		int id_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = id_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ID_VALUE ::= op_logical_not ID_VALUE 
            {
              SymbolIdVal RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int id_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolIdVal sym;
                              // check if unary operator is type valid
                              SUBJACENTTYPE subType = symbolsTable.get(id_val.getTypeName()).getSubType();

                              if(subType != SUBJACENTTYPE.st_boolean) {
                                throw new Error("Invalid unary operator " + op + " for type " + subType);
                              }

                              Type type_boolean = symbolsTable.get("boolean");
                              String var_id = backend.addTempVar(0, type_boolean.getSize(),  type_boolean.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.not,
                                id_val.getId(),
                                null,
                                var_id
                              );
                              
                              if(id_val.getType() == TYPE.dconst){
                                Boolean value = !((Boolean) id_val.getValue()).booleanValue();
                                sym = new SymbolIdVal(var_id, id_val.getType(), id_val.getTypeName(), value);
                              }else{
                                sym = new SymbolIdVal(var_id, id_val.getType(), id_val.getTypeName());
                              }
                              
                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ID_VALUE ::= op_arithmetical_b ID_VALUE 
            {
              SymbolIdVal RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int id_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolIdVal sym = id_val;
                              // check if unary operator is type valid
                              SUBJACENTTYPE subType = symbolsTable.get(id_val.getTypeName()).getSubType();

                              if(subType != SUBJACENTTYPE.st_boolean) {
                                throw new Error("Invalid unary operator " + op + " for type " + subType);
                              }

                              if(op.equals("-")){
                                Type type_number = symbolsTable.get("number");
                                String var_id = backend.addTempVar(0, type_number.getSize(),  type_number.getSubType());

                                c3a_g.generateC3aInstr(
                                  Code.neg,
                                  id_val.getId(),
                                  null,
                                  var_id
                                );
                                
                                if(id_val.getType() == TYPE.dconst){
                                  Integer value = -((Integer) id_val.getValue()).intValue();
                                  sym = new SymbolIdVal(var_id, id_val.getType(), id_val.getTypeName(), value);
                                }else{
                                  sym = new SymbolIdVal(var_id, id_val.getType(), id_val.getTypeName());
                                }
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID_VALUE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STRING_VALUE ::= string 
            {
              SymbolStringVal RESULT =null;
		int string_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int string_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String string_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              RESULT = new SymbolStringVal(string_val);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRING_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STRING_VALUE ::= lparen STRING_VALUE rparen 
            {
              SymbolStringVal RESULT =null;
		int string_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int string_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolStringVal string_val = (SymbolStringVal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = string_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRING_VALUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALUE ::= ID_VALUE 
            {
              SymbolValue RESULT =null;
		int id_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;
                              
                              String var_id = id_val.getId();

                              if(id_val.getType() == TYPE.dconst){
                                sym = new SymbolValue(var_id, id_val.getType(), id_val.getTypeName(), id_val.getValue());
                              }
                              else {
                                sym = new SymbolValue(var_id, id_val.getType(), id_val.getTypeName());
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALUE ::= STRING_VALUE 
            {
              SymbolValue RESULT =null;
		int str_valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int str_valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolStringVal str_value = (SymbolStringVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              String value = str_value.getString().replace("\"", "");
                              Type type_string = symbolsTable.get("string");

                              if (value.length() > 1000){
                                throw new Error("String must be shorter than 1000 characters.");
                              }
                              
                              // string size in bytes
                              int stringSize = value.length() * type_string.getSize();
                              
                              SymbolValue sym = new SymbolValue(value, stringSize);

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALUE ::= BOOLEAN_VALUE 
            {
              SymbolValue RESULT =null;
		int bool_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBoolVal bool_val = (SymbolBoolVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = bool_val.getValue();
                              Type type_bool = symbolsTable.get("boolean");

                              String var_id = backend.addTempVar(0, type_bool.getSize(), type_bool.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                value.toString(),
                                null,
                                var_id
                              );                                 

                              RESULT = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean, value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALUE ::= NUMBER_VALUE 
            {
              SymbolValue RESULT =null;
		int n_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolNumberVal n_val = (SymbolNumberVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Integer value = n_val.getValue();

                              Type type_number = symbolsTable.get("number");
                              
                              String var_id = backend.addTempVar(0, type_number.getSize(), type_number.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                Integer.toString(value),
                                null,
                                var_id
                              );

                              RESULT = new SymbolValue(var_id, SUBJACENTTYPE.st_number, value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VALUE ::= VALUE_COMPARISON 
            {
              SymbolValue RESULT =null;
		int comp_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comp_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValueComparison comp_val = (SymbolValueComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;
                              String id = comp_val.getVarId(); 

                              if(comp_val.getIsConst()){
                                Boolean value = comp_val.getValue();
                                sym = new SymbolValue(id, SUBJACENTTYPE.st_boolean, value);
                              }else{
                                sym = new SymbolValue(id, SUBJACENTTYPE.st_boolean); 
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VALUE ::= op_logical_not VALUE_COMPARISON 
            {
              SymbolValue RESULT =null;
		int comp_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comp_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValueComparison comp_val = (SymbolValueComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;

                              Type type_bool = symbolsTable.get("boolean");
                              String var_id = backend.addTempVar(0,type_bool.getSize(), type_bool.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.not,
                                comp_val.getVarId(),
                                null,
                                var_id
                              );

                              if(comp_val.getIsConst()){
                                Boolean value = ! comp_val.getValue().booleanValue(); 
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean, value);
                              }else{
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean); 
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VALUE ::= ARITHMETICAL_OPERATION 
            {
              SymbolValue RESULT =null;
		int arith_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arith_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArithOperation arith_op = (SymbolArithOperation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;
                              String var_id = arith_op.getVarId();
                              if(arith_op.getIsConst()){
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_number, arith_op.getValue());
                              }else{
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_number);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VALUE ::= BOOLEAN_OPERATION 
            {
              SymbolValue RESULT =null;
		int bool_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolValue sym;
                              String var_id = new String(bool_op.getVarId());
                              if(bool_op.getIsConst()){
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean, bool_op.getValue());
                              }else{
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALUE ::= CALL_FUNCTION 
            {
              SymbolValue RESULT =null;
		int call_fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int call_fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCallFunction call_fn = (SymbolCallFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                              Type dfn_type = symbolsTable.get(fn_type.getTypeName());
                              
                              if(dfn_type.getSubType() == SUBJACENTTYPE.st_null){
                                throw new Error("Function call : "+call_fn.getFunctionId() + " does not return any value");
                              }
                              
                              String var_id = backend.addTempVar( 0, fn_type.getSize(), dfn_type.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                "return "+call_fn.getFunctionId(),
                                null,
                                var_id
                              );                                

                              RESULT = new SymbolValue(var_id, TYPE.dfun, fn_type.getTypeName());
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALUE ::= instr_in lparen rparen 
            {
              SymbolValue RESULT =null;
		
                              Type number_type = symbolsTable.get("number");
                              String var_id = backend.addTempVar( 0, number_type.getSize(), number_type.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.input,
                                null,
                                null,
                                var_id
                              );

                              RESULT = new SymbolValue(var_id, number_type.getSubType());
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BOOLEAN_OPERATION ::= BOOLEAN_OP_VALUE op_logical BOOLEAN_OP_VALUE 
            {
              SymbolBoolOp RESULT =null;
		int bool_val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bool_val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolBoolOpValue bool_val1 = (SymbolBoolOpValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bool_val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBoolOpValue bool_val2 = (SymbolBoolOpValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolBoolOp sym;
                              Code op_code;

                              switch(op){
                                case "&&":
                                  op_code = Code.and;
                                  break;
                                case "||":
                                  op_code = Code.or;
                                  break;
                                default : 
                                  throw new Error("Invalid boolean operator");
                              }

                              boolean allConst = bool_val1.getIsConst() && bool_val2.getIsConst();
                              Boolean value = null;

                              if(allConst){
                                Boolean val1 = (Boolean) bool_val1.getValue();
                                Boolean val2 = (Boolean) bool_val2.getValue();
                                switch(op){
                                case "&&":
                                  value = val1 && val2;
                                  break;
                                case "||":
                                  value = val1 || val2; 
                                  break;
                                }
                              }

                              Type type_bool = symbolsTable.get("boolean"); 
                              String var_id = backend.addTempVar( 0, type_bool.getSize(), type_bool.getSubType());
                              
                              String val1_id = bool_val1.getVarId();
                              String val2_id = bool_val2.getVarId();
                              c3a_g.generateC3aInstr(
                                op_code,
                                val1_id,
                                val2_id,
                                var_id
                              );                         
                              
                              if(allConst){
                                sym = new SymbolBoolOp(var_id, value);
                              }else{
                                sym = new SymbolBoolOp(var_id);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BOOLEAN_OPERATION ::= lparen BOOLEAN_OPERATION rparen 
            {
              SymbolBoolOp RESULT =null;
		int bool_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bool_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = bool_op;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BOOLEAN_OPERATION ::= op_logical_not lparen BOOLEAN_OPERATION rparen 
            {
              SymbolBoolOp RESULT =null;
		int bool_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bool_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              SymbolBoolOp sym;
                              Type type_boolean = symbolsTable.get("boolean");
                              String var_id = backend.addTempVar(0, type_boolean.getSize(),  type_boolean.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.neg,
                                bool_op.getVarId(),
                                null,
                                var_id
                              );

                              if(bool_op.getIsConst()){
                                Boolean value = ! bool_op.getValue().booleanValue();
                                sym = new SymbolBoolOp(bool_op.getVarId(), value);
                              }else{
                                sym = new SymbolBoolOp(var_id);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OPERATION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BOOLEAN_OP_VALUE ::= BOOLEAN_VALUE 
            {
              SymbolBoolOpValue RESULT =null;
		int bool_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBoolVal bool_val = (SymbolBoolVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = bool_val.getValue();
                              Type type_boolean = symbolsTable.get("boolean");
                              
                              String var_id = backend.addTempVar(0, type_boolean.getSize(),  type_boolean.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                value.toString(),
                                null,
                                var_id
                              );

                              RESULT = new SymbolBoolOpValue(var_id, value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BOOLEAN_OP_VALUE ::= ID_VALUE 
            {
              SymbolBoolOpValue RESULT =null;
		int id_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolIdVal id_val = (SymbolIdVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              TYPE main_var_type = id_val.getType();
                              if(main_var_type != TYPE.darg && main_var_type != TYPE.dconst && main_var_type != TYPE.dvar){
                                throw new Error("Invalid arithmetic value type");
                              }

                              Type var_dtype = symbolsTable.get(id_val.getTypeName());

                              if(var_dtype.getSubType() != SUBJACENTTYPE.st_boolean){
                                throw new Error("Invalid subjacent type");
                              }

                              SymbolBoolOpValue sym;
                              String var_id = id_val.getId();

                              if(main_var_type == TYPE.dconst){
                                Boolean value = (Boolean) id_val.getValue();
                                sym = new SymbolBoolOpValue(var_id, value);
                              }else{
                                sym = new SymbolBoolOpValue(var_id);
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BOOLEAN_OP_VALUE ::= BOOLEAN_OPERATION 
            {
              SymbolBoolOpValue RESULT =null;
		int bool_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBoolOp bool_op = (SymbolBoolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolBoolOpValue sym;
                              if(bool_op.getIsConst()){
                                sym = new SymbolBoolOpValue(bool_op.getVarId(), bool_op.getValue());
                              }else{
                                sym = new SymbolBoolOpValue(bool_op.getVarId());
                              }
                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BOOLEAN_OP_VALUE ::= VALUE_COMPARISON 
            {
              SymbolBoolOpValue RESULT =null;
		int comp_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comp_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValueComparison comp_val = (SymbolValueComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SymbolBoolOpValue sym;
                              String id = new String(comp_val.getVarId()); 
                              if(comp_val.getIsConst()){
                                sym = new SymbolBoolOpValue(id, comp_val.getValue());
                              }else{
                                sym = new SymbolBoolOpValue(id); 
                              }

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BOOLEAN_OP_VALUE ::= op_logical_not VALUE_COMPARISON 
            {
              SymbolBoolOpValue RESULT =null;
		int comp_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comp_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValueComparison comp_val = (SymbolValueComparison)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Type type_bool = symbolsTable.get("boolean");
                              String var_id = backend.addTempVar(0,type_bool.getSize(), type_bool.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.not,
                                comp_val.getVarId(),
                                null,
                                var_id
                              );

                              SymbolBoolOpValue sym;
                              if(comp_val.getIsConst()){
                                Boolean value = ! comp_val.getValue().booleanValue();
                                sym = new SymbolBoolOpValue(var_id, value);
                              }else{
                                sym = new SymbolBoolOpValue(var_id); 
                              }
                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_OP_VALUE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BOOLEAN_VALUE ::= bool 
            {
              SymbolBoolVal RESULT =null;
		int bool_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bool_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = Boolean.valueOf(bool_val);
                              RESULT = new SymbolBoolVal(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BOOLEAN_VALUE ::= op_logical_not BOOLEAN_VALUE 
            {
              SymbolBoolVal RESULT =null;
		int bool_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBoolVal bool_val = (SymbolBoolVal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              Boolean value = ! bool_val.getValue().booleanValue();
                              RESULT = new SymbolBoolVal(value);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BOOLEAN_VALUE ::= lparen BOOLEAN_VALUE rparen 
            {
              SymbolBoolVal RESULT =null;
		int bool_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bool_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBoolVal bool_val = (SymbolBoolVal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              RESULT = bool_val;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOLEAN_VALUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALUE_COMPARISON ::= lparen VALUE op_relational VALUE rparen 
            {
              SymbolValueComparison RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolValue val1 = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValue val2 = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              SymbolValueComparison sym;

                              TYPE type1 = val1.getType();
                              SUBJACENTTYPE subType1;
                              
                              if(val1.getType() == TYPE.dnull){
                                subType1 = val1.getSubType();
                              }else{
                                if(type1 != TYPE.dvar && type1 != TYPE.dconst && type1 != TYPE.darg && type1 != TYPE.dfun) {
                                  throw new Error("Value 1 of comparison wrong type");
                                }
                                Type dtype_type = symbolsTable.get(val1.getTypeName());
                                subType1 = dtype_type.getSubType();
                              }
                              // SAME FOR VALUE2
                              TYPE type2 = val2.getType();
                              SUBJACENTTYPE subType2;

                              if(val2.getType() == TYPE.dnull){
                                subType2 = val2.getSubType();
                              }else{
                                if(type2 != TYPE.dvar && type2 != TYPE.dconst && type2 != TYPE.darg && type2 != TYPE.dfun) {
                                  throw new Error("Value 2 of comparison wrong type");
                                }
                                Type dtype_type = symbolsTable.get(val2.getTypeName());
                                subType2 = dtype_type.getSubType();
                              }

                              //Check same subtype
                              if(subType1 != subType2) {
                                throw new Error("Value 1 subtype is different from value 2");
                              }

                              Code op_code = Code.EQ;
                              switch(op){
                                case "==":
                                  op_code = Code.EQ;
                                  break;
                                case "!=":
                                  op_code = Code.NE;
                                  break;
                                case "<": 
                                  if(subType1 != SUBJACENTTYPE.st_number) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.LT;
                                  break;
                                case "<=":
                                  if(subType1 != SUBJACENTTYPE.st_number) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.LE;
                                  break;
                                case ">": 
                                  if(subType1 != SUBJACENTTYPE.st_number) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.GT;
                                  break;
                                case ">=":
                                  if(subType1 != SUBJACENTTYPE.st_number) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.GE;
                                  break;
                              }

                              boolean allConst = val1.getIsConst() && val2.getIsConst();
                              
                              Boolean val = null;
                              if(allConst){
                                switch(op){
                                  case "==":
                                    if(subType1 == SUBJACENTTYPE.st_number){
                                       val = (Integer) val1.getValue() == (Integer) val2.getValue();
                                    }
                                    if(subType1 == SUBJACENTTYPE.st_string){
                                      val = ((String)val1.getValue()).equals((String) val2.getValue());
                                    }
                                    if(subType1 == SUBJACENTTYPE.st_boolean){
                                      val = (Boolean) val1.getValue() == (Boolean) val2.getValue();
                                    }
                                    break;
                                  case "!=":
                                    if(subType1 == SUBJACENTTYPE.st_number){
                                      val = (Integer) val1.getValue() != (Integer) val2.getValue();
                                    }
                                    if(subType1 == SUBJACENTTYPE.st_string){
                                      val = !((String)val1.getValue()).equals((String) val2.getValue());
                                    }
                                    if(subType1 == SUBJACENTTYPE.st_boolean){
                                      val = (Boolean) val1.getValue() != (Boolean) val2.getValue();
                                    }
                                    break;

                                  // only integer operators
                                  case "<": 
                                    val = (Integer) val1.getValue() < (Integer) val2.getValue();
                                    break;
                                  case "<=":
                                    val = (Integer) val1.getValue() <= (Integer) val2.getValue();
                                    break;
                                  case ">": 
                                    val = (Integer) val1.getValue() > (Integer) val2.getValue();
                                    break;
                                  case ">=":
                                    val = (Integer) val1.getValue() >= (Integer) val2.getValue();
                                    break;
                                }
                              }

                              Type type_bool = symbolsTable.get("boolean");
                              String var_id = backend.addTempVar( 0, type_bool.getSize(), type_bool.getSubType());
                              
                              if(allConst){
                                sym = new SymbolValueComparison(var_id, val);
                              }else{
                                sym = new SymbolValueComparison(var_id);
                              }

                              c3a_g.generateC3aInstr(
                                op_code,
                                val1.getVarId(),
                                val2.getVarId(),
                                var_id
                              );

                              RESULT = sym;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE_COMPARISON",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COND ::= lparen BOOLEAN_OP_VALUE rparen 
            {
              SymbolCondition RESULT =null;
		int bool_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bool_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBoolOpValue bool_val = (SymbolBoolOpValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                String var_id = bool_val.getVarId();

                                String true_label = backend.addLabel();
                                String false_label = backend.addLabel();

                                labelTrueStack.push(true_label);
                                labelFalseStack.push(false_label);
                                
                                
                                c3a_g.generateC3aInstr(
                                  Code.jump_cond,
                                  var_id,
                                  "true",
                                  true_label
                                );

                                c3a_g.generateC3aInstr(
                                  Code.go_to,
                                  null,
                                  null,
                                  false_label
                                );

                                RESULT = new SymbolCondition();
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COND_T ::= 
            {
              SymbolConditionTrue RESULT =null;
		
                                String label = labelTrueStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new SymbolConditionTrue();   
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_T",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COND_F ::= 
            {
              SymbolConditionFalse RESULT =null;
		
                                String label = labelFalseStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new SymbolConditionFalse();   
                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND_F",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INSTRUCTION_IF ::= inst_if COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket ELIF ELSE 
            {
              SymbolInstructionIf RESULT =null;
		
                              RESULT = new SymbolInstructionIf();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_IF",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // M_END ::= EMPTY 
            {
              SymbolMEnd RESULT =null;
		
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolMEnd(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_END",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELIF ::= M_END inst_elif COND_F COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket ELIF 
            {
              SymbolElif RESULT =null;
		int mendleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int mendright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		SymbolMEnd mend = (SymbolMEnd)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolElif();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ELIF ::= 
            {
              SymbolElif RESULT =null;
		
                              RESULT = new SymbolElif();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELIF",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ELSE ::= M_END inst_else lbracket BLOCK_IN COND_F INSTRUCTIONS BLOCK_OUT rbracket 
            {
              SymbolElse RESULT =null;
		int mendleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int mendright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymbolMEnd mend = (SymbolMEnd)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolElse();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELSE ::= COND_F 
            {
              SymbolElse RESULT =null;
		
                              RESULT = new SymbolElse();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // M_WHILE ::= EMPTY 
            {
              SymbolMWhile RESULT =null;
		 
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolMWhile(label);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_WHILE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INSTRUCTION_WHILE ::= inst_while M_WHILE COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket 
            {
              SymbolInstructionWhile RESULT =null;
		int mwhileleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int mwhileright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymbolMWhile mwhile = (SymbolMWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                              String loop_label = mwhile.getLabel();
                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                loop_label
                              );

                              String end_label = labelFalseStack.pop();
                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                end_label
                              );

                              RESULT = new SymbolInstructionWhile();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_WHILE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CALL_FUNCTION ::= id lparen rparen 
            {
              SymbolCallFunction RESULT =null;
		int fun_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fun_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                              // Check if function and has params 
                              int num_params = symbolsTable.getNumParams(fun_id);
                              if(num_params > 0 ){
                                throw new Error("Missing parameters. Function " + fun_id + " has " + num_params + " parameters.");
                              }

                              Type fun_type = symbolsTable.get(fun_id);
                              String backId = fun_type.getBackendId();
                              c3a_g.generateC3aInstr(
                                Code.call,
                                null,
                                null,
                                backId
                              );

                              RESULT = new SymbolCallFunction(fun_id, backId);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CALL_FUNCTION ::= CALL_BODY rparen 
            {
              SymbolCallFunction RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolCallBody body = (SymbolCallBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              int body_params = body.getNumParams();
                              String fun_id = body.getFunId();
                              int fun_params = symbolsTable.getNumParams(fun_id);

                              if(fun_params != body_params){
                                throw new Error("Incorrect number of parameters :"+ body_params + ".Function " + fun_id + " has " + fun_params + "params");
                              }

                              String fun_backId = body.getFunBackId();
                              c3a_g.generateC3aInstr(
                                Code.call,
                                null,
                                null,
                                fun_backId
                              );

                              RESULT = new SymbolCallFunction(fun_id, fun_backId);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CALL_BODY ::= CALL_BODY separator VALUE 
            {
              SymbolCallBody RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolCallBody body = (SymbolCallBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              String fun_id = body.getFunId();
                              int num_params = body.getNumParams();
                              SUBJACENTTYPE subType;

                              if(value.getType() == TYPE.dnull){
                                subType = value.getSubType();
                              }
                              else{
                                if(value.getType() != TYPE.dvar && value.getType() != TYPE.dconst && value.getType() != TYPE.darg){
                                  throw new Error(fun_id + ". Incorrect type for param "+ num_params);
                                }
                                Type value_type = symbolsTable.get(value.getTypeName());
                                subType = value_type.getSubType();
                              }

                              //Check param type with function param type
                              Type paramType = symbolsTable.getParam(fun_id, num_params);
                              SUBJACENTTYPE paramSubType = symbolsTable.get(paramType.getTypeName()).getSubType();

                              if(paramSubType != subType){
                                throw new Error(fun_id + ". Incorrect type for param " + num_params + ". Expected " + subType + " but got " + paramSubType);
                              }

                              String fun_back_id = body.getFunBackId();
                              c3a_g.generateC3aInstr(
                                Code.param,
                                value.getVarId(),
                                null,
                                fun_back_id
                              );

                              RESULT = new SymbolCallBody(fun_id, fun_back_id, num_params+1);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_BODY",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CALL_BODY ::= id lparen VALUE 
            {
              SymbolCallBody RESULT =null;
		int fun_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fun_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              SUBJACENTTYPE subType;

                              if(value.getType() == TYPE.dnull){
                                subType = value.getSubType();
                              }
                              else{
                                if(value.getType() != TYPE.dvar && value.getType() != TYPE.dconst && value.getType() != TYPE.darg){
                                  throw new Error(fun_id + ". Incorrect type for param 0");
                                }
                                Type value_type = symbolsTable.get(value.getTypeName());
                                subType = value_type.getSubType();
                              }

                              //Check param type with function param type
                              Type paramType = symbolsTable.getParam(fun_id, 0);
                              SUBJACENTTYPE paramSubType = symbolsTable.get(paramType.getTypeName()).getSubType();

                              if(paramSubType != subType){
                                throw new Error(fun_id + ". Incorrect type for param 0. Expected " + subType + " but got " + paramSubType);
                              }

                              Type fun_type = symbolsTable.get(fun_id);
                              String fun_back_id = fun_type.getBackendId();

                              c3a_g.generateC3aInstr(
                                Code.param,
                                value.getVarId(),
                                null,
                                fun_back_id
                              );

                              RESULT = new SymbolCallBody(fun_id, fun_back_id, 0+1);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_BODY",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTRUCTION_OUT ::= instr_out lparen VALUE rparen 
            {
              SymbolInstructionOut RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              String var_id = value.getVarId();
                              SUBJACENTTYPE subtype;

                              if(value.getType() == TYPE.dnull){
                                subtype = value.getSubType();
                              }else{
                                Type var_type = symbolsTable.get(value.getTypeName());
                                subtype = var_type.getSubType();
                              }

                              if(value.getType() == TYPE.dnull && value.getSubType() == SUBJACENTTYPE.st_string){
                                var_id = backend.addTempStrVar(0, value.getStringSize(), (String) value.getValue());
                                c3a_g.generateC3aInstr(
                                  Code.output,
                                  subtype.toString(),
                                  (String) value.getValue(),
                                  var_id
                                );
                              }else{
                                c3a_g.generateC3aInstr(
                                  Code.output,
                                  subtype.toString(),
                                  null,
                                  var_id
                                );
                              }
                              RESULT = new SymbolInstructionOut();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION_OUT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DEFINE_FUNCTION ::= FUNCTION_INIT lbracket BLOCK_IN FUNCTION_INSTRUCTIONS FUNCTION_RETURN BLOCK_OUT rbracket 
            {
              SymbolDefFunction RESULT =null;
		int fun_initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fun_initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		SymbolFunInit fun_init = (SymbolFunInit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fun_retleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fun_retright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolFunReturn fun_ret = (SymbolFunReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                              //check if fun type and return type are the same
                              if(fun_init.getSubType() != fun_ret.getSubType()) {
                                throw new Error("Invalid return type. Expected : "+fun_init.getSubType()+", but got: "+fun_ret.getSubType());
                              }

                              // no return value
                              if(fun_init.getSubType() == SUBJACENTTYPE.st_null){
                                c3a_g.generateC3aInstr(
                                  Code.rtn,
                                  null,
                                  null,
                                  fun_init.getFunId()
                                );
                              }
                              // return value
                              else{

                                c3a_g.generateC3aInstr(
                                  Code.rtn,
                                  fun_ret.getVarId(),
                                  null,
                                  fun_init.getFunId()
                                );
                              }

                              RESULT = new SymbolDefFunction();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINE_FUNCTION",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCTION_INIT ::= inst_function id FUNCTION_PARAMS rparen two_points id 
            {
              SymbolFunInit RESULT =null;
		int fun_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fun_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String fun_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fun_paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fun_paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolFunParams fun_params = (SymbolFunParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int type_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              // check return type
                              Type return_fun_type = symbolsTable.get(type_id);
                              if(return_fun_type.getType() != TYPE.dtype){
                                throw new Error("Function declaration : invalid type");
                              }

                              SUBJACENTTYPE subType = return_fun_type.getSubType();

                              String backId = backend.addProc(fun_id, 0,return_fun_type.getSize(), 0, subType);

                              Type fun_type = new Type(backId, TYPE.dfun, type_id);

                              symbolsTable.add(fun_id, fun_type);
                              
                              // add params if it has
                              ArrayList<Param> params = fun_params.getParams();
                              if(params != null){
                                for(Param param : params){
                                  Type param_type = param.getType();
                                  SUBJACENTTYPE param_subType = symbolsTable.get(param.getType().getTypeName()).getSubType();
                                  String param_backId = backend.addVar(param.getVarId(), 0, param.getSize(), param_subType);
                                  param_type.setBackendId(param_backId);
                                  symbolsTable.addParam(fun_id, param_backId, param.getVarId(), param_type);
                                }
                              }

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                backId
                              );

                              c3a_g.generateC3aInstr(
                                Code.pmb,
                                null,
                                null,
                                backId
                              );

                              RESULT = new SymbolFunInit(backId, subType);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INIT",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNCTION_PARAMS ::= FUNCTION_W_PARAMS 
            {
              SymbolFunParams RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFunWParams params = (SymbolFunWParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              RESULT = new SymbolFunParams(params.getParams());
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_PARAMS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNCTION_PARAMS ::= lparen 
            {
              SymbolFunParams RESULT =null;
		
                              RESULT = new SymbolFunParams();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_PARAMS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUNCTION_W_PARAMS ::= FUNCTION_W_PARAMS separator id two_points id 
            {
              SymbolFunWParams RESULT =null;
		int prev_paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int prev_paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolFunWParams prev_params = (SymbolFunWParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int type_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              //check param type
                              Type type_type = symbolsTable.get(type_id);
                              if(type_type.getType() != TYPE.dtype){
                                throw new Error("Invalid param type");
                              }

                              Type param_type = new Type(TYPE.darg, type_id);

                              Param param = new Param(id, param_type, type_type.getSize());

                              RESULT = new SymbolFunWParams(param, prev_params);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_W_PARAMS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FUNCTION_W_PARAMS ::= lparen id two_points id 
            {
              SymbolFunWParams RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int type_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int type_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                              //check param type
                              Type type_type = symbolsTable.get(type_id);
                              if(type_type.getType() != TYPE.dtype){
                                throw new Error("Invalid param type");
                              }

                              Type param_type = new Type(TYPE.darg, type_id);

                              Param param = new Param(id, param_type, type_type.getSize());

                              RESULT = new SymbolFunWParams(param);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_W_PARAMS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FUNCTION_INSTRUCTIONS ::= INSTRUCTIONS 
            {
              SymbolFunInstructions RESULT =null;
		
                              RESULT = new SymbolFunInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INSTRUCTIONS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FUNCTION_INSTRUCTIONS ::= 
            {
              SymbolFunInstructions RESULT =null;
		
                              RESULT = new SymbolFunInstructions();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_INSTRUCTIONS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FUNCTION_RETURN ::= inst_return VALUE nextinstr 
            {
              SymbolFunReturn RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValue value = (SymbolValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                              // is literall
                              SUBJACENTTYPE subType = null;
                              if(value.getType() == TYPE.dnull){
                                subType = value.getSubType();
                              }

                              // is variable
                              if(value.getType() != TYPE.dnull){
                                Type type_type = symbolsTable.get(value.getTypeName());
                                subType = type_type.getSubType();
                              }

                              RESULT = new SymbolFunReturn(value.getVarId(), subType);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_RETURN",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FUNCTION_RETURN ::= EMPTY 
            {
              SymbolFunReturn RESULT =null;
		
                              RESULT = new SymbolFunReturn();
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_RETURN",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EMPTY ::= 
            {
              SymbolEmpty RESULT =null;
		 RESULT = new SymbolEmpty(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EMPTY",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
