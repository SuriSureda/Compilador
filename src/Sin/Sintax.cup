package compilador;

// TODO : rbracket -> BLOCK_IN, lbracket -> BLOCK_OUT

import java_cup.runtime.Symbol;
import Symbols.*;
import SymbolsTable.*;
import backend.Instruction; //For op Code

class Parser;

parser code
{:
  private SymbolsTable symbolsTable;
  private Backend backend;
  private LexerCup scanner;
  private C3a_generator c3a_g;

  private Stack<Integer> labelTrueStack;
  private Stack<Integer> labelFalseStack;

  public Parser(LexerCup scanner){
    super(scanner)
    this.symbolsTable = new SymbolsTable();
    this.backend = new Backend();
    this.c3a_g = new C3a_generator(backend);
    this.labelTrueStack = new Stack<Integer>();
    this.labelFalseStack = new Stack<Integer>();
  }

  public void syntax_error(Symbol current_token) {
      report_error(
          "Syntax error at line " + (current_token.left+1) + ", column "
          + current_token.right, null
      );
  }

:};

/******Declaració de simbols terminals*********/
terminal        character, id, number, string, bool, Void, op_relational, op_logical, op_arithmetical, op_assig, inst_if, inst_elif, inst_else,
                inst_switch, inst_case, inst_break, inst_default, inst_while, inst_for, inst_function, inst_return, dconst, inst_call, 
                instr_in, instr_out,  lparen, rparen, lbracket, rbracket, nextinstr, separator, two_points, inst_main,id_main,
                spc_asgmul, spc_asgdec, spc_dec,spc_asgdiv,spc_asginc,spc_inc ;


/******Declaració de simbols no terminals*********/

non terminal  SymbolStarts                STARTS;
non terminal  SymbolInit                  INIT;
non terminal  SymbolCallMain              CALL_MAIN;
non terminal  SymbolInstructions          INSTRUCTIONS;
non terminal  SymbolInstruction           INSTRUCTION;
non terminal  SymbolDeclarations          DECLARATIONS;
non terminal  SymbolOperatorAssignation   OPERATOR_ASSIG;
non terminal  SymbolInstructionIn         INSTRUCTION_IN;
non terminal  SymbolInstructionOut        INSTRUCTION_OUT;
non terminal  SymbolConstant              CONSTANT;
non terminal  SymbolValue                 VALUE;
non terminal  SymbolInitArithOp           INITIALIZE_ARITHMETICAL_OP;
non terminal  SymbolArithmeticalOperator  ARITHMETICAL_OP;
non terminal  SymbolArithValue            ARITHMETICAL_VALUE;
non terminal  SymbolPosNeg                POS_NEG;
non terminal  SymbolBoolOp                BOOLEAN_OP;
non terminal  SymbolInitBoolOp            INITIALIZE_BOOLEAN_OP;
non terminal  SymbolBoolValue             BOOLEAN_VALUE;
non terminal  SymbolValueComparison       VALUE_COMPARISON;
non terminal  SymbolMEnd                  M_END;
non terminal  SymbolCondition             COND;
non terminal  SymbolConditionFalse        COND_FALSE;
non terminal  SymbolConditionTrue         COND_TRUE; 
non terminal  SymbolInstructionIf         INSTRUCTION_IF;
non terminal  SymbolElif                  ELIF;
non terminal  SymbolElse                  ELSE;
non terminal  SymbolInstructionWhile      INSTRUCTION_WHILE;
non terminal  SymbolInstructionFor        INSTRUCTION_FOR;
non terminal  SymbolInternalFor           INTERNAL_FOR;
non terminal  SymbolInstructionSwitch     INSTRUCTION_SWITCH;
non terminal  SymbolCases                 CASES;
non terminal  SymbolCaseDefault           CASE_DEFAULT;
non terminal  SymbolDefFunction           DEFINE_FUNCTION;
non terminal  SymbolCallFunction          CALL_FUNCTION;
non terminal  SymbolCallBody              CALL_BODY;
non terminal  SymbolFunctionBeg           FUNCTION_BEG;
non terminal  SymbolParameters            PARAMETERS;
non terminal  SymbolHasParameters         HAS_PARAMETERS;
non terminal  SymbolHasMoreParameters     HAS_MORE_PARAMETERS;
non terminal  SymbolFunctionBody          FNCTION_BODY;
non terminal  SymbolReturnType            RETURN_TYPE;

start with STARTS;

STARTS                      ::=  INIT CALL_MAIN;

INIT                        ::= {:
                              initTypes();
                              RESULT = new SymbolInit();
                            :};

CALL_MAIN                   ::= inst_main lparen id:id_main rparen nextinstr {:
                              Type type = symbolsTable.get(id_main);
                              
                              RESULT = new SymbolCallMain();
                            :};

INSTRUCTIONS                ::=   INSTRUCTIONS INSTRUCTION 
                            {:
                              RESULT = new SymbolInstructions();
                            :};
                            | INSTRUCTION 
                            {:
                              RESULT = new SymbolInstructions();
                            :};

INSTRUCTION                 ::=  DECLARATIONS 
                            {:
                              RESULT = new SymbolInstruction();
                            :}
                            | INSTRUCTION_IF 
                            {:
                              RESULT = new SymbolInstruction();
                            :}
                            | INSTRUCTION_WHILE
                            {:
                              RESULT = new SymbolInstruction();
                            :}
                            | INSTRUCTION_SWITCH
                            {:
                              RESULT = new SymbolInstruction();
                            :}
                            | INSTRUCTION_FOR
                            {:
                              RESULT = new SymbolInstruction();
                            :}
                            | OPERATOR_ASSIG
                            {:
                              RESULT = new SymbolInstruction();
                            :}
                            | INSTRUCTION_IN
                            {:
                              RESULT = new SymbolInstruction();
                            :}
                            | INSTRUCTION_OUT 
                            {:
                              RESULT = new SymbolInstruction();
                            :}
                            | DEFINE_FUNCTION;
                            {:
                              RESULT = new SymbolInstruction();
                            :};

DECLARATIONS                ::=  id:var_id separator DECLARATIONS:declarations
                            {:
                              Type type = declarations.getType();

                              int backId = backend.addVar(var_id,  0, backend.getLastProcedureId(), 0,type.getSize(), type.getSubType());

                              type.setBackendId(backId);

                              symbolsTable.add(var_id, type);

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                declarations.getVarId(),
                                null,
                                backId
                              )

                              RESULT = declarations;
                            :}
                            | id:id_var CONSTANT:const two_points id:type_id op_assig VALUE:value nextinstr  
                            {:
                              boolean isConst = const.getIsConst();

                              Type type = symbolsTable.get(type_id);

                              if(type.getType() != TYPE.dtype){
                                throw new Error("Type not valid")
                              }

                              if(type.getSubType() != SUBJACENTTYPE.st_boolean
                                && type.getSubType() != SUBJACENTTYPE.st_boolean
                                && type.getSubType() != SUBJACENTTYPE.st_boolean ){
                                  throw new Error("Invalid subjacent type")
                              }

                              //IF LITERALL (type = null) CHECK SUBJACENT TYPE
                              if(value.getType() == TYPE.dnull && type.getSubType() == value.getSubType()){
                                throw new Error("Value and type must have same subjacent type")
                              }
                              
                              if(value.getType() != TYPE.dnull && value.getNameType() != type_id){
                                throw new Error("Value must have the same type")
                              }

                              Type var_type;

                              if(isConst){
                                var_type = new Type(TYPE.dconst, type_id, value.getValue());
                              }
                              else{
                                var_type = new Type(TYPE.dvar, type_id); 
                              }

                              int size = type.getSize();
                              if(value.getIsString()){
                                size = value.getStringSize();
                              }

                              int var_id = backend.addVar(id_var, 0, backend.getActualProcedure(), 0, type.getSize(), type.getSubType());
                              var_type.setBackendId() = var_id;

                              String val_id = value.getVarId();
                              symbolsTable.put(id_var, var_type);
                              SymbolDeclarations symDcls = new SymbolDeclarations(val_id, var_type);

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                val_id,
                                null,
                                var_id
                              );
                               
                              RESULT = symDcls;
                            :};


CONSTANT                    ::=  dconst  
                            {:
                              RESULT = new SymbolConstant(true);
                            :}
                            |  
                            {:
                              RESULT = new SymbolConstant(false);
                            :};


OPERATOR_ASSIG              ::= id:var_id op_assig VALUE:value nextinstr 
                            {:
                              Type varType = symbolsTable.get(id_var);
                              if(varType.getType() == TYPE.dconst){
                                throw new Error("Cant assign value to constant")
                              }

                              //IF LITERALL (type = null) CHECK SUBJACENT TYPE
                              if(value.getType() == TYPE.dnull && typeDes.getSubType() == value.getSubType()){
                                throw new Error("Value and type must have same subjacent type")
                              }
                              
                              if(value.getType() != TYPE.dnull && value.getNameType() != type_id){
                                throw new Error("Value must have the same type")
                              }

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                value.getVarId(),
                                null,
                                varType.getBackendId()
                              );

                              RESULT = new SymbolOperatorAssignation();
                            :};    


INITIALIZE_ARITHMETICAL_OP  ::= lparen ARITHMETICAL_OP:arith_op rparen 
                            {:
                              SymbolInitArithOp sym; 
                              if(arith_op.getIsConst()){
                                sym = new SymbolInitArithOp(arith_op.getVarId(),arith_op.getValue());
                              }else{
                                sym = new SymbolInitArithOp(arith_op.getVarId());
                              }

                              RESULT = sym;
                            :};


ARITHMETICAL_OP             ::= ARITHMETICAL_OP:arith_op op_arithmetical:op ARITHMETICAL_VALUE:arith_val
                            {:
                              
                              SymbolArithmeticalOperator sym;
                              boolean allConst = arith_op.getIsConst() && arith_val.getIsConst();

                              Code op_code;
                              switch(op){
                                case "+" : 
                                  op_code = Code.add;
                                  break;
                                case "-" : 
                                  op_code = Code.sub;
                                  break;
                                case "*" : 
                                  op_code = Code.prod;
                                  break;
                                case "/" : 
                                  op_code = Code.div;
                                  break;
                                case "%" : 
                                  op_code = Code.mod;
                                  break;
                                default : 
                                  throw new Error("Invalid arithmetical operator");
                              }

                              Integer value;
                              if(allConst) {
                                Integer val1 = (Integer) aright_op.getValue();
                                Integer val2 = (Integer) arith_val.getValue();

                                switch(op){
                                  case "+" : 
                                    value = val1 + val2;
                                    break;
                                  case "-" : 
                                    value = val1 - val2;
                                    break;
                                  case "*" : 
                                    value = val1 * val2;
                                    break;
                                  case "/" : 
                                    if(val2 == 0){
                                      throw new Error("Cannot divide by zero");
                                    }
                                    value = val1 / val2;
                                    break;
                                  case "%" : 
                                    value = val1 % val2;
                                    break;
                                }
                              }

                              Type type_int = symbolsTable.get("int);
                              
                              int var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_int.getSize(), type_int.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.add,
                                val1.getVarId(),
                                val2.getVarId(),
                                var_id
                              );

                              if(allConst){
                                sym = new SymbolArithmeticalOperator(var_id, value)
                              }
                              else{
                                sym = new SymbolArithmeticalOperator(var_id)
                              }

                              RESULT = sym;

                            :};
                            | ARITHMETICAL_VALUE:arith_val1 op_arithmetical:op ARITHMETICAL_VALUE:arith_val2
                              SymbolArithmeticalOperator sym;
                              boolean allConst = arith_val1.getIsConst() && arith_val2.getIsConst();

                              Code op_code;
                              switch(op){
                                case "+" : 
                                  op_code = Code.add;
                                  break;
                                case "-" : 
                                  op_code = Code.sub;
                                  break;
                                case "*" : 
                                  op_code = Code.prod;
                                  break;
                                case "/" : 
                                  op_code = Code.div;
                                  break;
                                case "%" : 
                                  op_code = Code.mod;
                                  break;
                                default : 
                                  throw new Error("Invalid arithmetical operator");
                              }

                              Integer value;
                              if(allConst) {
                                Integer val1 = (Integer) arith_val1.getValue();
                                Integer val2 = (Integer) arith_val2.getValue();

                                switch(op){
                                  case "+" : 
                                    value = val1 + val2;
                                    break;
                                  case "-" : 
                                    value = val1 - val2;
                                    break;
                                  case "*" : 
                                    value = val1 * val2;
                                    break;
                                  case "/" : 
                                    if(val2 == 0){
                                      throw new Error("Cannot divide by zero");
                                    }
                                    value = val1 / val2;
                                    break;
                                  case "%" : 
                                    value = val1 % val2;
                                    break;
                                }
                              }

                              Type type_int = symbolsTable.get("int");
                              
                              int var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_int.getSize(), type_int.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.add,
                                val1.getVarId(),
                                val2.getVarId(),
                                var_id
                              );

                              if(allConst){
                                sym = new SymbolArithmeticalOperator(var_id, value);
                              }
                              else{
                                sym = new SymbolArithmeticalOperator(var_id);
                              }
                              
                              RESULT = sym;
                            {:

                            :};

 
ARITHMETICAL_VALUE          ::= lparen ARITHMETICAL_OP:arith_op rparen
                            {:
                              SymbolArithValue sym;
                              String var_id = new String(arith_op.getVarId());

                              if(arith_op.getIsConst()){
                                sym = new SymbolArithmeticalValue(var_id, arith_op.getValue());
                              }else{
                                sym = new SymbolArithmeticalValue(var_id);
                              }

                              RESULT = sym;

                            :}
                            | POS_NEG:neg number:n_val
                            {:
                              Integer value;
                              if(neg.isNegative()){
                                value = new Integer("-" + n_val);
                              }
                              else{
                                value = new Integer(n_val);
                              }

                              Type type_int = symbolsTable.get("int");
                              
                              int var_id = backend.addTempVar(0, backend.getActualProcedure(),  0, type_int.getSize(),  type_int.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                value,
                                null,
                                var_id
                              );

                              RESULT = new SymbolArithmeticalValue(var_id, value);
                            :}
                            | id:id_val
                            {:

                              Type var_type = symbolsTable.get(id_val);
                              TYPE main_var_type = var_type.getType();

                              if(main_var_type != TYPE.darg && main_var_type != TYPE.dconst && main_var_type != TYPE.dvar){
                                throw new Error("Invalid arithmetic value type")
                              }

                              Type var_dtype = symbolsTable.get(var_type.getTypeName());

                              if(var_dtype.getSubType() != SUBJACENTTYPE.st_integer){
                                throw new Error("Invalid subjacent type")
                              }

                              SymbolArithValue sym;
                              String var_id = new String(var_type.getBackendId());

                              if(main_var_type == TYPE.dconst){
                                Integer value = (Integer) var_type.getValue();¡
                                sym = new SymbolArithmeticalValue(var_id, value);
                              }else{
                                sym = new SymbolArithmeticalValue(var_id);
                              }

                              RESULT = sym;
                            
                            :} ;


POS_NEG                     ::= op_arithmetical:op
                            {:

                              if(!op.equals("+") && !op.equals("-")){
                                throw new Error("Sign operator not valid")
                              }

                              boolean isNegative = true;
                              
                              if(op.equals("+")){
                                isNegative = false;
                              }

                              RESULT = new SymbolPosNeg(isNegative);
                            :}
                            | 
                            {:
                              RESULT = new SymbolPosNeg(false);
                            :};


VALUE                       ::= INITIALIZE_ARITHMETICAL_OP:arith_op
                            {:
                              SymbolValue sym;
                              String var_id = new String(arith_op.getVarId());
                              if(arith_op.getIsConst()){
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_integer, arith_op.getValue())
                              }else{
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_integer);
                              }

                              RESULT = sym;
                            :}
                            | POS_NEG:neg number:n_val
                            {:
                              Integer value;

                              if(neg.isNegative()){
                                value = new Integer("-" + n_val);
                              }
                              else{
                                value = new Integer(n_val);
                              }

                              Type type_int = symbolsTable.get("int");
                              
                              int var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_int.getSize(), type_int.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                value,
                                null,
                                var_id
                              );

                              RESULT = new SymbolValue(var_id, SUBJACENTTYPE.st_integer, value);
                            :}
                            | string:str_val 
                            {:
                             //delete quotes
                              String value = new String(str_val.replace("\"", ""));
                              Type type_string = symbolsTable.get("string");
                              
                              // string size in bytes
                              int stringSize = value.length() * type_string.getSize();

                              if (value.lenght() > 999){
                                throw new Error("String must be shorter than 1000 characters.");
                              }

                              int var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, stringSize, type_string.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                str_val,
                                null,
                                var_id
                              );                          
                              
                              SymbolValue sym = new SymbolValue(var_id, SUBJACENTTYPE.st_string, value);
                              sym.setStringSize(stringSize);

                              RESULT = sym;
                            :}
                            | bool:bool_val
                            {:
                              Boolean value = new Boolean(bool_val);
                              Type type_bool = symbolsTable.get("boolean");
                              

                              int var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_bool.size(), type_bool.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                bool_val,
                                null,
                                var_id
                              );                                 

                              RESULT = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean, value);
                            :}
                            | id:id_val
                            {:
                              SymbolValue sym;
                              
                              Type val_type = symbolsTable.get(id_val);
                              String var_id = new String(val_type.getBackendId());

                              if(val_type.getType() == TYPE.dconst){
                                sym = new SymbolValue(var_id, val_type.getType(), val_type.getTypeName(), val_type.getValue());
                              }
                              else {
                                sym = new SymbolValue(var_id, val_type.getType(), val_type.getTypeName());
                              }

                              RESULT = sym;
                            :}
                            | INITIALIZE_BOOLEAN_OP:bool_op
                            {:
                              SymbolValue sym;
                              String var_id = new String(bool_op.getVarId());
                              if(bool_op.getIsConst()){
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean, bool_op.getValue())
                              }else{
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean);
                              }

                              RESULT = sym;
                            :}
                            | CALL_FUNCTION:call_fn
                            {:
                              Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                              Type dfn_type = symbolsTable.get(fn_type.getTypeName());
                              
                              int var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, fn_type.size(), dfn_type.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                call_fn.getBackendId(),
                                null,
                                var_id
                              );                                

                              RESULT = new SymbolValue(var_id, TYPE.dfun, fn_type.getTypeName());
                            :}
                            | instr_in lparen id rparen;

INITIALIZE_BOOLEAN_OP       ::= lparen BOOLEAN_OP:bool_op rparen 
                            {:
                              SymbolInitBoolOp sym; 
                              if(bool_op.getIsConst()){
                                sym = new SymbolInitBoolOp(bool_op.getVarId(),bool_op.getValue());
                              }else{
                                sym = new SymbolInitBoolOp(bool_op.getVarId());
                              }

                              RESULT = sym;
                            :};

BOOLEAN_OP                  ::= BOOLEAN_OP:bool_op op_logical:op BOOLEAN_VALUE:bool_val
                            {:
                              SymbolBoolOp sym;
                              Code op_code;

                              switch(op){
                                case "&&":
                                  op_code = Code.and;
                                  break;
                                case "||":
                                  op_code = Code.or;
                                  break;
                                default : 
                                  throw new Error("Invalid boolean operator");
                              }

                              boolean allConst = bool_op.getIsConst() && bool_val.getIsConst();
                              Boolean value;

                              if(allConst){
                                Boolean val1 = (Boolean) bool_op.getValue();
                                Boolean val2 = (Boolean) bool_val.getValue();
                                switch(op){
                                case "&&":
                                  value = val1 && val2;
                                  break;
                                case "||":
                                  value = val1 || val2; 
                                  break;
                              }

                              Type type_bool = symbolsTable.get("boolean"); 
                              int var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_bool.getSize(), type_bool.getSubType());
                              
                              int val1_id = bool_val.getVarId();
                              int val2_id = bool_op.getVarId();
                              c3a_g.generateC3aInstr(
                                op_code,
                                val1_id,
                                val2_id,
                                var_id
                              )                         
                              
                              if(allConst){
                                sym = new SymbolBoolOp(var_id, value);
                              }else{
                                sym = new SymbolBoolOp(var_id);
                              }

                              RESULT = sym;

                            :}
                            | BOOLEAN_VALUE:bool_val
                            {:
                              SymbolBoolOp sym;

                              String var_id = new String(bool_val.getVarId());
                              if(bool_val.getIsConst()){
                                sym = new SymbolBoolOp(var_id, bool_val.getValue());
                              }
                              else{
                                sym = new SymbolBoolOp(var_id);
                              }

                              RESULT = sym;
                              
                            :};

BOOLEAN_VALUE               ::= bool:bool_val  
                            {:
                              Boolean value = new Boolean(bool_val);
                              
                              Type type_bool = symbolsTable.get("boolean");
                              int var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_bool.getSize(), type_bool.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                bool_val,
                                null,
                                var_id
                              );

                              RESULT = new SymbolBoolValue(var_id, value);

                            :}
                            | id:id_var
                            {:
                              Type var_type = symbolsTable.get(id_var);
                              TYPE main_var_type = var_type.getType();

                              if(main_var_type != TYPE.dconst || main_var_type != TYPE.dvar || main_var_type != TYPE.darg){
                                throw new Error("");
                              }
                              
                              Type dtype_type = symbolsTable.get(var_type.nameType);
                              if(dtype_type.getSubType() != SUBJACENTTYPE.st_boolean){
                                throw new Error("Must be boolean variable or constant");
                              }

                              SymbolBoolValue sym;
                              String backId = new String(var_type.getBackendId());

                              if(id_var.getIsConst()){
                                sym = new SymbolBoolValue(backId, value);
                              }else{
                                sym = new SymbolBoolValue(backId);
                              }

                              RESULT = sym;
                            :}
                            | lparen BOOLEAN_OP:bool_op rparen
                            {:
                              SymbolBoolValue sym;
                              String id = new String(bool_op.getVarId()); 
                              if(bool_op.getIsConst()){
                                sym = new SymbolBoolValue(id, value);
                              }else{
                                sym = new SymbolBoolValue(id); 
                              }

                              RESULT = sym;
                              
                            :}
                            | VALUE_COMPARISON:comp_val
                            {:
                              SymbolBoolValue sym;
                              String id = new String(comp_val.getVarId()); 
                              if(comp_val.getIsConst()){
                                sym = new SymbolBoolValue(id, comp_val.getValue());
                              }else{
                                sym = new SymbolBoolValue(id); 
                              }

                              RESULT = sym;
                            :};

VALUE_COMPARISON            ::= lparen VALUE:val1 op_relational:op VALUE:val2 rparen ;
                            {:

                              SymbolValueComparison sym;

                              TYPE type1 = val1.getType();
                              SUBJACENTTYPE subType1;
                              
                              if(val1.getType() == TYPE.dnull){
                                subType1 = val1.getSubType();
                              }else{
                                if(type1 != TYPE.dvar && type1 != TYPE.dconst && type1 != TYPE.darg && type1 != TYPE.dfun) {
                                  throw Error("Value 1 of comparison wrong type");
                                }
                                Type dtype_type = symbolsTable.get(val1.getNameType());
                                subType1 = dtype_type.getSubType();
                              }
                              // SAME FOR VALUE2
                              TYPE type2 = val2.getType();
                              SUBJACENTTYPE subType2;

                              if(val2.getType() == TYPE.dnull){
                                subType2 = val2.getSubType();
                              }else{
                                if(type2 != TYPE.dvar && type2 != TYPE.dconst && type2 != TYPE.darg && type2 != TYPE.dfun) {
                                  throw Error("Value 2 of comparison wrong type");
                                }
                                Type dtype_type = symbolsTable.get(val2.getNameType());
                                subType2 = dtype_type.getSubType();
                              }

                              //Check same subtype
                              if(subType1 != subType2) {
                                throw Error("Value 1 subtype is different from value 2");
                              }

                              Code op_code;
                              switch(op){
                                case "=":
                                  op_code = Code.if_EQ;
                                  break;
                                case "!=":
                                  op_code = Code.if_NE;
                                  break;
                                case "<": 
                                  if(subtype1 != SUBJACENTTYPE.st_integer) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.if_LT;
                                  break;
                                case "<=":
                                  if(subtype1 != SUBJACENTTYPE.st_integer) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.if_LE;
                                  break;
                                case ">": 
                                  if(subtype1 != SUBJACENTTYPE.st_integer) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.if_GT;
                                  break;
                                case ">=":
                                  if(subtype1 != SUBJACENTTYPE.st_integer) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.if_GE;
                                  break;
                              }

                              boolean allConst = val1.getIsConst() && val2.getIsConst();
                              
                              Boolean value;
                              if(allConst){
                                switch(op){
                                  case "=":
                                    if(subtype1 == SUBJACENTTYPE.st_integer){
                                       val = (Integer) val1.getValue() == (Integer) val2.getValue();
                                    }
                                    if(subtype1 == SUBJACENTTYPE.st_string){
                                      val = (String) val1.getValue().equals((String) val2.getValue());
                                    }
                                    if(subtype1 == SUBJACENTTYPE.st_boolean){
                                      val = (Boolean) val1.getValue() == (Boolean) val2.getValue();
                                    }
                                    break;
                                  case "!=":
                                    if(subtype1 == SUBJACENTTYPE.st_integer){
                                      val = (Integer) val1.getValue() != (Integer) val2.getValue();
                                    }
                                    if(subtype1 == SUBJACENTTYPE.st_string){
                                      val = !(String) val1.getValue().equals((String) val2.getValue());
                                    }
                                    if(subtype1 == SUBJACENTTYPE.st_boolean){
                                      val = (Boolean) val1.getValue() != (Boolean) val2.getValue();
                                    }
                                    break;

                                  // only integer operators
                                  case "<": 
                                    val = (Integer) val1.getValue() < (Integer) val2.getValue();
                                    break;
                                  case "<=":
                                    val = (Integer) val1.getValue() <= (Integer) val2.getValue();
                                    break;
                                  case ">": 
                                    val = (Integer) val1.getValue() > (Integer) val2.getValue();
                                    break;
                                  case ">=":
                                    val = (Integer) val1.getValue() >= (Integer) val2.getValue();
                                    break;
                                }
                              }

                              Type type_bool = symbolsTable.get("boolean");
                              int var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_bool.getSize(), type_bool.getSubType());
                              
                              if(allConst){
                                sym = new SymbolValueComparison(var_id, value);
                              }else{
                                sym = new SymbolValueComparison(var_id);
                              }

                              RESULT = sym;
                            :}

COND                         ::=  INITIALIZE_BOOLEAN_OP:bool_op
                              {:
                                int var_id = bool_op.getVarId();

                                int true_label = backend.addLabel();
                                int false_label = backend.addLabel();

                                labelTrueStack.push(true_label);
                                labelFalseStack.push(false_label);
                                
                                c3a_g.generateC3aInstr(
                                  Code.if_EQ,
                                  var_id,
                                  "true", //TODO : revisar quin valor asignar aqui
                                  true_label
                                );

                                c3a_g.generateC3aInstr(
                                  Code.jmp,
                                  null,
                                  null,
                                  false_label
                                );

                                RESULT = new SymbolCondition();
                              :}

COND_T                        ::= 
                              {:
                                int label = labelTrueStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new SymbolConditionTrue();   
                              :}
                              
COND_F                        ::= 
                              {:
                                int label = labelFalseStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new SymbolConditionFalse();   
                              :}

INSTRUCTION_IF               ::= inst_if COND COND_T lbracket INSTRUCTIONS rbracket ELIF ELSE
                            {:
                              RESULT = new SymbolInstructionIf();
                            :};

M_END                       ::=
                            {:
                              int label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.jmp,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolMEnd(label);
                            :};

ELIF                        ::= M_END:mend inst_elif COND_F COND COND_T lbracket INSTRUCTIONS rbracket ELIF
                            {:
                              int label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolElif();
                            :}
                            | 
                            {:
                              RESULT = new SymbolElif();
                            :};

ELSE                        ::= M_END:mend inst_else COND_F lbracket INSTRUCTIONS rbracket
                            {:
                              int label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolElse();
                            :}
                            | COND_F
                            {:
                              RESULT = new SymbolElse();
                            :};
 
INSTRUCTION_WHILE            ::= inst_while lparen INITIALIZE_BOOLEAN_OP rparen lbracket INSTRUCTIONS rbracket;         // while(( x < 10)){}
                            {:
                            RESULT = new SymbolInstructionWhile();
                            :}

INSTRUCTION_FOR              ::= inst_for lparen INTERNAL_FOR rparen lbracket INSTRUCTIONS rbracket;
                            {:
                            RESULT = new SymbolInstructionFor();
                            :}
INTERNAL_FOR                 ::= OPERATOR_ASSIG nextinstr INITIALIZE_BOOLEAN_OP nextinstr ARITHMETICAL_OP 
                             | ;
                            {:
                            RESULT = new SymbolInternalFor();
                            :}


INSTRUCTION_SWITCH           ::= inst_switch lparen VALUE rparen lbracket CASES rbracket ;
                             {:
                             RESULT = new SymbolInstructionSwitch();
                             :}
CASES                        ::= inst_case VALUE two_points INSTRUCTIONS inst_break nextinstr CASES
                             | CASE_DEFAULT;
                             {:
                             RESULT = new SymbolCases();
                             :}

CASE_DEFAULT                 ::= inst_default INSTRUCTIONS inst_break nextinstr
                             | ;
                             {:
                             RESULT = new SymbolCaseDefault();
                             :}


CALL_FUNCTION               ::= inst_call lparen CALL_BODY rparen nextinstr;
                            {:
                            RESULT = new SymbolCallFunction();
                            :}

CALL_BODY                   ::= CALL_BODY separator VALUE
                            | id;
                            {:
                            RESULT = new SymbolCallBody();
                            :}


INSTRUCTION_OUT             ::= instr_out lparen VALUE rparen nextinstr;
                            {:
                            RESULT = new SymbolInstructionOut();
                            :}


DEFINE_FUNCTION             ::= FUNCTION_BEG id  rparen lbracket FUNCTION_BODY RETURN_TYPE  rbracket;
                            {:
                            RESULT = new SymbolDefFunction();
                            :}

FUNCTION_BEG                ::= inst_function id id lparen PARAMETERS rparen;
                            {:
                            RESULT = new SymbolFunctionBeg();
                            :}

PARAMETERS                  ::= HAS_PARAMETERS
                            | ;
                            {:
                            RESULT = new SymbolParameters();
                            :}

HAS_PARAMETERS              ::=  id id HAS_MORE_PARAMETERS ;
                            {:
                            RESULT = new SymbolHasParameters();
                            :}

HAS_MORE_PARAMETERS         ::= separator id id HAS_MORE_PARAMETERS
                            | ;
                            {:
                            RESULT = new SymbolHasParameters();
                            :}

FUNCTION_BODY               ::= INSTRUCTIONS
                            | ;
                            {:
                            RESULT = new SymbolFunctionBody();
                            :}

RETURN_TYPE                 ::= inst_return VALUE nextinstr
                            | ;
                            {:
                            RESULT = new SymbolReturnType();
                            :}