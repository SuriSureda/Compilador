package Sin;

import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import Symbols.*;
import SymbolsTable.*;
import SymbolsTable.Type.TYPE;
import SymbolsTable.Type.SUBJACENTTYPE;
import Lex.*;
import backend.*;
import java.util.Stack;
import java.util.List;
import backend.Instruction.Code;

class Parser;

parser code
{:
  private SymbolsTable symbolsTable;
  private Backend backend;
  private LexerCup scanner;
  private C3a_generator c3a_g;
  private AssemblerGenerator assembler;

  private Stack<String> labelTrueStack;
  private Stack<String> labelFalseStack;

  public Parser(LexerCup scanner, SymbolFactory sf){
    super(scanner);
    this.scanner = scanner;
    this.symbolsTable = new SymbolsTable();
    this.backend = new Backend();
    this.c3a_g = new C3a_generator(backend);
    this.assembler = new AssemblerGenerator(symbolsTable, backend, c3a_g);
    this.labelTrueStack = new Stack<String>();
    this.labelFalseStack = new Stack<String>();
  }

  public void syntax_error(Symbol s) {
      report_error(
        "Syntax Error : " + s.value + " (" + (s.left+1) + ":" + (s.right+1) + ")\n", null
      );
  }

  public void unrecovered_syntax_error(Symbol s){
    try {
      scanner.closeTokensFile((s.left+1), (s.right+1));

      report_fatal_error(
        "Unrecovered Syntax Error : " + s.value + " (" + (s.left+1) + ":" + (s.right+1) + ")", null
      );
    } catch (Exception e) {
			e.printStackTrace();
		};
  }

  private void initTypes() {
    //init INT type
    Type int_type = new Type(TYPE.dtype, SUBJACENTTYPE.st_integer, 4, Integer.MIN_VALUE, Integer.MIN_VALUE);
    symbolsTable.add("int", int_type);
    
    // init String type
    Type str_type = new Type(TYPE.dtype, SUBJACENTTYPE.st_string, 2, 0, 0);
    symbolsTable.add("string", str_type);
    
    //init BOOLEAN type
    Type bool_type = new Type(TYPE.dtype,SUBJACENTTYPE.st_boolean,2,0,1);
    symbolsTable.add("boolean",bool_type);
  }

:};

/******Declaració de simbols terminals*********/

terminal String id, number, string, bool,  op_relational, op_logical, op_arithmetical;
terminal        op_assig, inst_if, inst_elif, inst_else,
                inst_while, inst_function, inst_return, dconst, inst_call, 
                instr_in, instr_out, lparen, rparen, lbracket, rbracket, nextinstr, 
                separator, two_points, inst_main;

/*
  inst_switch, inst_case, inst_break, inst_default, inst_for, 
  character,spc_asgmul,Void, spc_asgdec, spc_dec,spc_asgdiv,spc_asginc,spc_inc,id_main 
*/


/******Declaració de simbols no terminals*********/

non terminal  SymbolStarts                STARTS;
non terminal  SymbolInit                  INIT;
non terminal  SymbolCallMain              CALL_MAIN;
non terminal  SymbolInstructions          INSTRUCTIONS;
non terminal  SymbolInstruction           INSTRUCTION;
non terminal  SymbolBlockIn               BLOCK_IN;
non terminal  SymbolBlockOut              BLOCK_OUT;
non terminal  SymbolDeclarations          DECLARATIONS;
non terminal  SymbolOperatorAssignation   OPERATOR_ASSIG;
non terminal  SymbolInstructionOut        INSTRUCTION_OUT;
non terminal  SymbolConstant              CONSTANT;
non terminal  SymbolValue                 VALUE;
non terminal  SymbolInitArithOp           INITIALIZE_ARITHMETICAL_OP;
non terminal  SymbolArithOp               ARITHMETICAL_OP;
non terminal  SymbolArithValue            ARITHMETICAL_VALUE;
non terminal  SymbolPosNeg                POS_NEG;
non terminal  SymbolBoolOp                BOOLEAN_OP;
non terminal  SymbolInitBoolOp            INITIALIZE_BOOLEAN_OP;
non terminal  SymbolBoolValue             BOOLEAN_VALUE;
non terminal  SymbolValueComparison       VALUE_COMPARISON;
non terminal  SymbolMEnd                  M_END;
non terminal  SymbolCondition             COND;
non terminal  SymbolConditionFalse        COND_F;
non terminal  SymbolConditionTrue         COND_T; 
non terminal  SymbolInstructionIf         INSTRUCTION_IF;
non terminal  SymbolElif                  ELIF;
non terminal  SymbolElse                  ELSE;
non terminal  SymbolMWhile                M_WHILE;
non terminal  SymbolInstructionWhile      INSTRUCTION_WHILE;
/*
non terminal  SymbolInstructionFor        INSTRUCTION_FOR;
non terminal  SymbolInternalFor           INTERNAL_FOR;
non terminal  SymbolInstructionSwitch     INSTRUCTION_SWITCH;
non terminal  SymbolCases                 CASES;
non terminal  SymbolCaseDefault           CASE_DEFAULT;
*/
non terminal  SymbolDefFunction           DEFINE_FUNCTION;

non terminal  SymbolFunHead               FUNCTION_HEAD;
non terminal  SymbolFunParams             FUNCTION_PARAMS;
non terminal  SymbolFunWParams            FUNCTION_W_PARAMS;
non terminal  SymbolFunBody               FUNCTION_BODY;
non terminal  SymbolFunReturn             FUNCTION_RETURN;

non terminal  SymbolCallFunction          CALL_FUNCTION;
non terminal  SymbolCallBody              CALL_BODY;
non terminal  SymbolEmpty                 EMPTY;
non terminal  SymbolDeclareFunctions      DECLARE_FUNCTIONS;

start with STARTS;

STARTS                      ::=  INIT DECLARE_FUNCTIONS
                            {:
                              backend.storeTables();

                              //NOT OPTIMIZED CODE
                              c3a_g.savec3aInFile(false);
                              assembler.generateAssembler(false);
                              
                              //OPTIMIZED CODE
                              c3a_g.optimize();
                              c3a_g.savec3aInFile(true);
                              assembler.generateAssembler(true);
                            :};

INIT                        ::= {:
                              initTypes();
                              RESULT = new SymbolInit();
                            :};

DECLARE_FUNCTIONS           ::= DEFINE_FUNCTION DECLARE_FUNCTIONS
                            {:
                              RESULT = new SymbolDeclareFunctions();
                            :}
                            | CALL_MAIN
                            {:
                              RESULT = new SymbolDeclareFunctions();
                            :};
                            

CALL_MAIN                   ::= inst_function inst_main lparen rparen lbracket INSTRUCTIONS rbracket {:
                              RESULT = new SymbolCallMain();
                            :};

INSTRUCTIONS                ::=   INSTRUCTIONS INSTRUCTION 
                            {:
                              RESULT = new SymbolInstructions();
                            :}
                            | INSTRUCTION 
                            {:
                              RESULT = new SymbolInstructions();
                            :};

INSTRUCTION                 ::=  DECLARATIONS 
                            {:
                              RESULT = new SymbolInstruction();
                            :}
                            | INSTRUCTION_IF 
                            {:
                              RESULT = new SymbolInstruction();
                            :}
                            | INSTRUCTION_WHILE
                            {:
                              RESULT = new SymbolInstruction();
                            :}
                            | OPERATOR_ASSIG
                            {:
                              RESULT = new SymbolInstruction();
                            :}
                            | INSTRUCTION_OUT 
                            {:
                              RESULT = new SymbolInstruction();
                            :}
                            | CALL_FUNCTION
                            {:
                              RESULT = new SymbolInstruction();
                            :}
                            /*
                            | INSTRUCTION_SWITCH
                            {:
                              RESULT = new SymbolInstruction();
                            :}
                            | INSTRUCTION_FOR
                            {:
                              RESULT = new SymbolInstruction();
                            :}*/
                            ;

BLOCK_IN                    ::=
                            {:
                              symbolsTable.enterBlock();
                              RESULT = new SymbolBlockIn();
                            :};

BLOCK_OUT                   ::=
                            {:
                              symbolsTable.leaveBlock();
                              RESULT = new SymbolBlockOut();
                            :};                            

DECLARATIONS                ::=  id:var_id separator DECLARATIONS:declarations
                            {:
                              Type type = declarations.getType();
                              String backId;

                              if(type.getSubType() == SUBJACENTTYPE.st_string){
                                String value = declarations.getValue();
                                backId = backend.addStrVar(var_id,  0, backend.getLastProcedureId(), 0,type.getSize(), value);
                              }else{
                                backId = backend.addVar(var_id,  0, backend.getLastProcedureId(), 0,type.getSize(), type.getSubType());
                              }
                              
                              type.setBackendId(backId);

                              symbolsTable.add(var_id, type);

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                declarations.getVarId(),
                                null,
                                backId
                              );

                              RESULT = declarations;
                            :}
                            | id:id_var CONSTANT:constant two_points id:type_id op_assig VALUE:value nextinstr  
                            {:
                              boolean isConst = constant != null ? constant.getIsConst() : false;

                              Type type = symbolsTable.get(type_id);

                              if(type.getType() != TYPE.dtype){
                                throw new Error("Type not valid");
                              }

                              if(type.getSubType() != SUBJACENTTYPE.st_boolean
                                && type.getSubType() != SUBJACENTTYPE.st_integer
                                && type.getSubType() != SUBJACENTTYPE.st_string ){
                                  throw new Error("Invalid subjacent type");
                              }

                              //IF LITERALL (type = null) CHECK SUBJACENT TYPE
                              if(value.getType() == TYPE.dnull && type.getSubType() != value.getSubType()){
                                throw new Error("Value and type must have same subjacent type");
                              }
                              
                              if(value.getType() != TYPE.dnull && value.getTypeName() != (String) type_id){
                                throw new Error("Value must have the same type");
                              }

                              Type var_type;

                              if(isConst){
                                var_type = new Type(TYPE.dconst, type_id, value.getValue());
                              }
                              else{
                                var_type = new Type(TYPE.dvar, type_id); 
                              }

                              int size = type.getSize();
                              if(value.getIsString()){
                                size = value.getStringSize();
                              }

                              String var_id;
                              if(type.getSubType() == SUBJACENTTYPE.st_string){
                                String str_value = (String) value.getValue();
                                var_id = backend.addStrVar(id_var,  0, backend.getLastProcedureId(), 0,type.getSize(), str_value);
                              }else{
                                var_id = backend.addVar(id_var,  0, backend.getLastProcedureId(), 0,type.getSize(), type.getSubType());
                              }

                              var_type.setBackendId(var_id);

                              String val_id = value.getVarId();
                              symbolsTable.add(id_var, var_type);

                              SymbolDeclarations symDcls;
                              if(value.getIsString()){
                                symDcls = new SymbolDeclarations(val_id, var_type, (String) value.getValue());
                              }else{
                                symDcls = new SymbolDeclarations(val_id, var_type);
                              }

                              if(type.getSubType() != SUBJACENTTYPE.st_string){
                                c3a_g.generateC3aInstr(
                                  Code.copy,
                                  val_id,
                                  null,
                                  var_id
                                );
                              }

                              RESULT = symDcls;
                            :};

CONSTANT                    ::=  dconst  
                            {:
                              RESULT = new SymbolConstant(true);
                            :}
                            |  
                            {:
                              RESULT = new SymbolConstant(false);
                            :};


OPERATOR_ASSIG              ::= id:var_id op_assig VALUE:value nextinstr 
                            {:
                              Type varType = symbolsTable.get(var_id);
                              String type_id = varType.getTypeName();

                              if(varType.getType() == TYPE.dconst){
                                throw new Error("Cant assign value to constant");
                              }

                              //IF LITERALL (type = null) CHECK SUBJACENT TYPE
                              if(value.getType() == TYPE.dnull && varType.getSubType() == value.getSubType()){
                                throw new Error("Value and type must have same subjacent type");
                              }
                              
                              if(value.getType() != TYPE.dnull && value.getTypeName() != type_id){
                                throw new Error("Value must have the same type");
                              }

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                value.getVarId(),
                                null,
                                varType.getBackendId()
                              );

                              RESULT = new SymbolOperatorAssignation();
                            :};    


INITIALIZE_ARITHMETICAL_OP  ::= lparen ARITHMETICAL_OP:arith_op rparen 
                            {:
                              SymbolInitArithOp sym; 
                              if(arith_op.getIsConst()){
                                sym = new SymbolInitArithOp(arith_op.getVarId(),arith_op.getValue());
                              }else{
                                sym = new SymbolInitArithOp(arith_op.getVarId());
                              }

                              RESULT = sym;
                            :};


ARITHMETICAL_OP             ::= ARITHMETICAL_OP:arith_op op_arithmetical:op ARITHMETICAL_VALUE:arith_val
                            {:
                              
                              SymbolArithOp sym;
                              boolean allConst = arith_op.getIsConst() && arith_val.getIsConst();

                              Code op_code;
                              switch(op){
                                case "+" : 
                                  op_code = Code.add;
                                  break;
                                case "-" : 
                                  op_code = Code.sub;
                                  break;
                                case "*" : 
                                  op_code = Code.prod;
                                  break;
                                case "/" : 
                                  op_code = Code.div;
                                  break;
                                case "%" : 
                                  op_code = Code.mod;
                                  break;
                                default : 
                                  throw new Error("Invalid arithmetical operator");
                              }

                              Integer value = null;
                              if(allConst) {
                                Integer val1 = (Integer) arith_op.getValue();
                                Integer val2 = (Integer) arith_val.getValue();

                                switch(op){
                                  case "+" : 
                                    value = val1 + val2;
                                    break;
                                  case "-" : 
                                    value = val1 - val2;
                                    break;
                                  case "*" : 
                                    value = val1 * val2;
                                    break;
                                  case "/" : 
                                    if(val2 == 0){
                                      throw new Error("Cannot divide by zero");
                                    }
                                    value = val1 / val2;
                                    break;
                                  case "%" : 
                                    value = val1 % val2;
                                    break;
                                }
                              }

                              Type type_int = symbolsTable.get("int");
                              
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_int.getSize(), type_int.getSubType());

                              c3a_g.generateC3aInstr(
                                op_code,
                                arith_op.getVarId(),
                                arith_val.getVarId(),
                                var_id
                              );

                              if(allConst){
                                sym = new SymbolArithOp(var_id, value);
                              }
                              else{
                                sym = new SymbolArithOp(var_id);
                              }

                              RESULT = sym;

                            :}
                            | ARITHMETICAL_VALUE:arith_val1 op_arithmetical:op ARITHMETICAL_VALUE:arith_val2
                              {:
                              SymbolArithOp sym;
                              boolean allConst = arith_val1.getIsConst() && arith_val2.getIsConst();

                              Code op_code;
                              
                              switch(op){
                                case "+" : 
                                  op_code = Code.add;
                                  break;
                                case "-" : 
                                  op_code = Code.sub;
                                  break;
                                case "*" : 
                                  op_code = Code.prod;
                                  break;
                                case "/" : 
                                  op_code = Code.div;
                                  break;
                                case "%" : 
                                  op_code = Code.mod;
                                  break;
                                default : 
                                  throw new Error("Invalid arithmetical operator");
                              }

                              Integer value = null;
                              if(allConst) {
                                Integer val1 = (Integer) arith_val1.getValue();
                                Integer val2 = (Integer) arith_val2.getValue();

                                switch(op){
                                  case "+" : 
                                    value = val1 + val2;
                                    break;
                                  case "-" : 
                                    value = val1 - val2;
                                    break;
                                  case "*" : 
                                    value = val1 * val2;
                                    break;
                                  case "/" : 
                                    if(val2 == 0){
                                      throw new Error("Cannot divide by zero");
                                    }
                                    value = val1 / val2;
                                    break;
                                  case "%" : 
                                    value = val1 % val2;
                                    break;
                                }
                              }

                              Type type_int = symbolsTable.get("int");
                              
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_int.getSize(), type_int.getSubType());

                              c3a_g.generateC3aInstr(
                                op_code,
                                arith_val1.getVarId(),
                                arith_val2.getVarId(),
                                var_id
                              );

                              if(allConst){
                                sym = new SymbolArithOp(var_id, value);
                              }
                              else{
                                sym = new SymbolArithOp(var_id);
                              }
                              
                              RESULT = sym;
                            

                            :};
 
ARITHMETICAL_VALUE          ::= lparen ARITHMETICAL_OP:arith_op rparen
                            {:
                              SymbolArithValue sym;
                              String var_id = new String(arith_op.getVarId());

                              if(arith_op.getIsConst()){
                                sym = new SymbolArithValue(var_id, arith_op.getValue());
                              }else{
                                sym = new SymbolArithValue(var_id);
                              }

                              RESULT = sym;

                            :}
                            | POS_NEG:neg number:n_val
                            {:
                              Integer value;
                              if(neg != null && neg.isNegative()){
                                value = Integer.valueOf("-" + n_val);
                              }
                              else{
                                value = Integer.valueOf(n_val);
                              }

                              Type type_int = symbolsTable.get("int");
                              
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(),  0, type_int.getSize(),  type_int.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                Integer.toString(value),
                                null,
                                var_id
                              );

                              RESULT = new SymbolArithValue(var_id, value);
                            :}
                            | id:id_val
                            {:

                              Type var_type = symbolsTable.get(id_val);
                              TYPE main_var_type = var_type.getType();

                              if(main_var_type != TYPE.darg && main_var_type != TYPE.dconst && main_var_type != TYPE.dvar){
                                throw new Error("Invalid arithmetic value type");
                              }

                              Type var_dtype = symbolsTable.get(var_type.getTypeName());

                              if(var_dtype.getSubType() != SUBJACENTTYPE.st_integer){
                                throw new Error("Invalid subjacent type");
                              }

                              SymbolArithValue sym;
                              String var_id = new String(var_type.getBackendId());

                              if(main_var_type == TYPE.dconst){
                                Integer value = (Integer) var_type.getValue();
                                sym = new SymbolArithValue(var_id, value);
                              }else{
                                sym = new SymbolArithValue(var_id);
                              }

                              RESULT = sym;
                            
                            :} ;


POS_NEG                     ::= op_arithmetical:op
                            {:

                              if(!op.equals("+") && !op.equals("-")){
                                throw new Error("Sign operator not valid");
                              }

                              boolean isNegative = true;
                              
                              if(op.equals("+")){
                                isNegative = false;
                              }

                              RESULT = new SymbolPosNeg(isNegative);
                            :}
                            | EMPTY
                            {:
                              RESULT = new SymbolPosNeg(false);
                            :};


VALUE                       ::= INITIALIZE_ARITHMETICAL_OP:arith_op
                            {:
                              SymbolValue sym;
                              String var_id = arith_op.getVarId();
                              if(arith_op.getIsConst()){
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_integer, arith_op.getValue());
                              }else{
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_integer);
                              }

                              RESULT = sym;
                            :}
                            | POS_NEG:neg number:n_val
                            {:
                              Integer value;

                              if(neg != null && neg.isNegative()){
                                value = Integer.valueOf("-" + n_val);
                              }
                              else{
                                value = Integer.valueOf(n_val);
                              }

                              Type type_int = symbolsTable.get("int");
                              
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_int.getSize(), type_int.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                Integer.toString(value),
                                null,
                                var_id
                              );

                              RESULT = new SymbolValue(var_id, SUBJACENTTYPE.st_integer, value);
                            :}
                            | string:value 
                            {:
                             //delete quotes
                              value = value.replace("\"", "");
                              Type type_string = symbolsTable.get("string");
                              
                              // string size in bytes
                              int stringSize = value.length() * type_string.getSize();

                              if (value.length() > 999){
                                throw new Error("String must be shorter than 1000 characters.");
                              }
                              
                              SymbolValue sym = new SymbolValue(value, stringSize);

                              RESULT = sym;
                            :}
                            | bool:bool_val
                            {:
                              Boolean value = Boolean.valueOf(bool_val);
                              Type type_bool = symbolsTable.get("boolean");

                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_bool.getSize(), type_bool.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                bool_val,
                                null,
                                var_id
                              );                                 

                              RESULT = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean, value);
                            :}
                            | id:id_val
                            {:
                              SymbolValue sym;
                              
                              Type val_type = symbolsTable.get(id_val);
                              String var_id = new String(val_type.getBackendId());

                              if(val_type.getType() == TYPE.dconst){
                                sym = new SymbolValue(var_id, val_type.getType(), val_type.getTypeName(), val_type.getValue());
                              }
                              else {
                                sym = new SymbolValue(var_id, val_type.getType(), val_type.getTypeName());
                              }

                              RESULT = sym;
                            :}
                            | INITIALIZE_BOOLEAN_OP:bool_op
                            {:
                              SymbolValue sym;
                              String var_id = new String(bool_op.getVarId());
                              if(bool_op.getIsConst()){
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean, bool_op.getValue());
                              }else{
                                sym = new SymbolValue(var_id, SUBJACENTTYPE.st_boolean);
                              }

                              RESULT = sym;
                            :}
                            | CALL_FUNCTION:call_fn
                            {:
                              Type fn_type = symbolsTable.get(call_fn.getFunctionId());
                              Type dfn_type = symbolsTable.get(fn_type.getTypeName());
                              
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, fn_type.getSize(), dfn_type.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                call_fn.getBackendId(),
                                null,
                                var_id
                              );                                

                              RESULT = new SymbolValue(var_id, TYPE.dfun, fn_type.getTypeName());
                            :}
                            | instr_in lparen id rparen
                            {:
                              Type int_type = symbolsTable.get("int");
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, int_type.getSize(), int_type.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.input,
                                null,
                                null,
                                var_id
                              );


                              RESULT = new SymbolValue(var_id, int_type.getSubType());
                            :}; 

INITIALIZE_BOOLEAN_OP       ::= lparen BOOLEAN_OP:bool_op rparen 
                            {:
                              SymbolInitBoolOp sym; 
                              if(bool_op.getIsConst()){
                                sym = new SymbolInitBoolOp(bool_op.getVarId(),bool_op.getValue());
                              }else{
                                sym = new SymbolInitBoolOp(bool_op.getVarId());
                              }

                              RESULT = sym;
                            :};

BOOLEAN_OP                  ::= BOOLEAN_OP:bool_op op_logical:op BOOLEAN_VALUE:bool_val
                            {:
                              SymbolBoolOp sym;
                              Code op_code;

                              switch(op){
                                case "&&":
                                  op_code = Code.and;
                                  break;
                                case "||":
                                  op_code = Code.or;
                                  break;
                                default : 
                                  throw new Error("Invalid boolean operator");
                              }

                              boolean allConst = bool_op.getIsConst() && bool_val.getIsConst();
                              Boolean value = null;

                              if(allConst){
                                Boolean val1 = (Boolean) bool_op.getValue();
                                Boolean val2 = (Boolean) bool_val.getValue();
                                switch(op){
                                case "&&":
                                  value = val1 && val2;
                                  break;
                                case "||":
                                  value = val1 || val2; 
                                  break;
                                }
                              }

                              Type type_bool = symbolsTable.get("boolean"); 
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_bool.getSize(), type_bool.getSubType());
                              
                              String val1_id = bool_val.getVarId();
                              String val2_id = bool_op.getVarId();
                              c3a_g.generateC3aInstr(
                                op_code,
                                val1_id,
                                val2_id,
                                var_id
                              );                         
                              
                              if(allConst){
                                sym = new SymbolBoolOp(var_id, value);
                              }else{
                                sym = new SymbolBoolOp(var_id);
                              }

                              RESULT = sym;

                            :}
                            | BOOLEAN_VALUE:bool_val
                            {:
                              SymbolBoolOp sym;

                              String var_id = new String(bool_val.getVarId());
                              if(bool_val.getIsConst()){
                                sym = new SymbolBoolOp(var_id, bool_val.getValue());
                              }
                              else{
                                sym = new SymbolBoolOp(var_id);
                              }

                              RESULT = sym;
                              
                            :};

BOOLEAN_VALUE               ::= bool:bool_val  
                            {:
                              Boolean value = Boolean.valueOf(bool_val);
                              
                              Type type_bool = symbolsTable.get("boolean");
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_bool.getSize(), type_bool.getSubType());

                              c3a_g.generateC3aInstr(
                                Code.copy,
                                bool_val,
                                null,
                                var_id
                              );

                              RESULT = new SymbolBoolValue(var_id, value);

                            :}
                            | id:id_var
                            {:
                              Type var_type = symbolsTable.get(id_var);
                              TYPE main_var_type = var_type.getType();

                              if(main_var_type != TYPE.dconst || main_var_type != TYPE.dvar || main_var_type != TYPE.darg){
                                throw new Error("");
                              }
                              
                              Type dtype_type = symbolsTable.get(var_type.getTypeName());
                              if(dtype_type.getSubType() != SUBJACENTTYPE.st_boolean){
                                throw new Error("Must be boolean variable or constant");
                              }

                              SymbolBoolValue sym;
                              String backId = new String(var_type.getBackendId());

                              if(TYPE.dconst == main_var_type){
                                Boolean value = (Boolean) var_type.getValue();
                                sym = new SymbolBoolValue(backId, value);
                              }else{
                                sym = new SymbolBoolValue(backId);
                              }

                              RESULT = sym;
                            :}
                            | lparen BOOLEAN_OP:bool_op rparen
                            {:
                              SymbolBoolValue sym;
                              String id = new String(bool_op.getVarId()); 
                              if(bool_op.getIsConst()){
                                Boolean value = (Boolean) bool_op.getValue();
                                sym = new SymbolBoolValue(id, value);
                              }else{
                                sym = new SymbolBoolValue(id); 
                              }

                              RESULT = sym;
                              
                            :}
                            | VALUE_COMPARISON:comp_val
                            {:
                              SymbolBoolValue sym;
                              String id = new String(comp_val.getVarId()); 
                              if(comp_val.getIsConst()){
                                sym = new SymbolBoolValue(id, comp_val.getValue());
                              }else{
                                sym = new SymbolBoolValue(id); 
                              }

                              RESULT = sym;
                            :};

VALUE_COMPARISON            ::= VALUE:val1 op_relational:op VALUE:val2 
                            {:

                              SymbolValueComparison sym;

                              TYPE type1 = val1.getType();
                              SUBJACENTTYPE subType1;
                              
                              if(val1.getType() == TYPE.dnull){
                                subType1 = val1.getSubType();
                              }else{
                                if(type1 != TYPE.dvar && type1 != TYPE.dconst && type1 != TYPE.darg && type1 != TYPE.dfun) {
                                  throw new Error("Value 1 of comparison wrong type");
                                }
                                Type dtype_type = symbolsTable.get(val1.getTypeName());
                                subType1 = dtype_type.getSubType();
                              }
                              // SAME FOR VALUE2
                              TYPE type2 = val2.getType();
                              SUBJACENTTYPE subType2;

                              if(val2.getType() == TYPE.dnull){
                                subType2 = val2.getSubType();
                              }else{
                                if(type2 != TYPE.dvar && type2 != TYPE.dconst && type2 != TYPE.darg && type2 != TYPE.dfun) {
                                  throw new Error("Value 2 of comparison wrong type");
                                }
                                Type dtype_type = symbolsTable.get(val2.getTypeName());
                                subType2 = dtype_type.getSubType();
                              }

                              //Check same subtype
                              if(subType1 != subType2) {
                                throw new Error("Value 1 subtype is different from value 2");
                              }

                              Code op_code = Code.EQ;
                              switch(op){
                                case "=":
                                  op_code = Code.EQ;
                                  break;
                                case "!=":
                                  op_code = Code.NE;
                                  break;
                                case "<": 
                                  if(subType1 != SUBJACENTTYPE.st_integer) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.LT;
                                  break;
                                case "<=":
                                  if(subType1 != SUBJACENTTYPE.st_integer) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.LE;
                                  break;
                                case ">": 
                                  if(subType1 != SUBJACENTTYPE.st_integer) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.GT;
                                  break;
                                case ">=":
                                  if(subType1 != SUBJACENTTYPE.st_integer) throw new Error("This operator ("+op+") only works with integer subtypes");
                                  op_code = Code.GE;
                                  break;
                              }

                              boolean allConst = val1.getIsConst() && val2.getIsConst();
                              
                              Boolean val = null;
                              if(allConst){
                                switch(op){
                                  case "=":
                                    if(subType1 == SUBJACENTTYPE.st_integer){
                                       val = (Integer) val1.getValue() == (Integer) val2.getValue();
                                    }
                                    if(subType1 == SUBJACENTTYPE.st_string){
                                      val = ((String)val1.getValue()).equals((String) val2.getValue());
                                    }
                                    if(subType1 == SUBJACENTTYPE.st_boolean){
                                      val = (Boolean) val1.getValue() == (Boolean) val2.getValue();
                                    }
                                    break;
                                  case "!=":
                                    if(subType1 == SUBJACENTTYPE.st_integer){
                                      val = (Integer) val1.getValue() != (Integer) val2.getValue();
                                    }
                                    if(subType1 == SUBJACENTTYPE.st_string){
                                      val = !((String)val1.getValue()).equals((String) val2.getValue());
                                    }
                                    if(subType1 == SUBJACENTTYPE.st_boolean){
                                      val = (Boolean) val1.getValue() != (Boolean) val2.getValue();
                                    }
                                    break;

                                  // only integer operators
                                  case "<": 
                                    val = (Integer) val1.getValue() < (Integer) val2.getValue();
                                    break;
                                  case "<=":
                                    val = (Integer) val1.getValue() <= (Integer) val2.getValue();
                                    break;
                                  case ">": 
                                    val = (Integer) val1.getValue() > (Integer) val2.getValue();
                                    break;
                                  case ">=":
                                    val = (Integer) val1.getValue() >= (Integer) val2.getValue();
                                    break;
                                }
                              }

                              Type type_bool = symbolsTable.get("boolean");
                              String var_id = backend.addTempVar(0, backend.getActualProcedure(), 0, type_bool.getSize(), type_bool.getSubType());
                              
                              if(allConst){
                                sym = new SymbolValueComparison(var_id, val);
                              }else{
                                sym = new SymbolValueComparison(var_id);
                              }

                              c3a_g.generateC3aInstr(
                                op_code,
                                val1.getVarId(),
                                val2.getVarId(),
                                var_id
                              );

                              RESULT = sym;
                            :};

COND                         ::=  INITIALIZE_BOOLEAN_OP:bool_op
                              {:
                                String var_id = bool_op.getVarId();

                                String true_label = backend.addLabel();
                                String false_label = backend.addLabel();

                                labelTrueStack.push(true_label);
                                labelFalseStack.push(false_label);
                                
                                
                                c3a_g.generateC3aInstr(
                                  Code.jump_cond,
                                  var_id,
                                  "true",
                                  true_label
                                );

                                c3a_g.generateC3aInstr(
                                  Code.go_to,
                                  null,
                                  null,
                                  false_label
                                );

                                RESULT = new SymbolCondition();
                              :};

COND_T                        ::= 
                              {:
                                String label = labelTrueStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new SymbolConditionTrue();   
                              :};
                              
COND_F                        ::= 
                              {:
                                String label = labelFalseStack.pop();

                                c3a_g.generateC3aInstr(
                                  Code.skip,
                                  null,
                                  null,
                                  label
                                );

                                RESULT = new SymbolConditionFalse();   
                              :};

INSTRUCTION_IF               ::= inst_if COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket ELIF ELSE
                            {:
                              RESULT = new SymbolInstructionIf();
                            :};

M_END                       ::= EMPTY
                            {:
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolMEnd(label);
                            :};

ELIF                        ::= M_END:mend inst_elif COND_F COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket ELIF
                            {:
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolElif();
                            :}
                            | 
                            {:
                              RESULT = new SymbolElif();
                            :};

ELSE                        ::= M_END:mend inst_else lbracket BLOCK_IN COND_F INSTRUCTIONS BLOCK_OUT rbracket
                            {:
                              String label = mend.getLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolElse();
                            :}
                            | COND_F
                            {:
                              RESULT = new SymbolElse();
                            :};

M_WHILE                     ::= EMPTY
                            {: 
                              String label = backend.addLabel();

                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                label
                              );

                              RESULT = new SymbolMWhile(label);
                            :};
                  
 
INSTRUCTION_WHILE            ::= inst_while M_WHILE:mwhile COND lbracket BLOCK_IN COND_T INSTRUCTIONS BLOCK_OUT rbracket         
                            {:
                              String loop_label = mwhile.getLabel();
                              c3a_g.generateC3aInstr(
                                Code.go_to,
                                null,
                                null,
                                loop_label
                              );

                              String end_label = labelFalseStack.pop();
                              c3a_g.generateC3aInstr(
                                Code.skip,
                                null,
                                null,
                                end_label
                              );

                              RESULT = new SymbolInstructionWhile();
                            :};

/*
INSTRUCTION_FOR              ::= inst_for lparen INTERNAL_FOR rparen lbracket INSTRUCTIONS rbracket
                            {:
                            RESULT = new SymbolInstructionFor();
                            :};

INTERNAL_FOR                 ::= OPERATOR_ASSIG nextinstr INITIALIZE_BOOLEAN_OP nextinstr ARITHMETICAL_OP 
                             | 
                            {:
                            RESULT = new SymbolInternalFor();
                            :};


INSTRUCTION_SWITCH           ::= inst_switch lparen VALUE rparen lbracket CASES rbracket 
                             {:
                             RESULT = new SymbolInstructionSwitch();
                             :};

CASES                        ::= inst_case VALUE two_points INSTRUCTIONS inst_break nextinstr CASES
                             | CASE_DEFAULT
                             {:
                             RESULT = new SymbolCases();
                             :};

CASE_DEFAULT                 ::= inst_default INSTRUCTIONS inst_break nextinstr
                             | 
                             {:
                             RESULT = new SymbolCaseDefault();
                             :};
*/

CALL_FUNCTION               ::= inst_call id:fun_id lparen rparen
                            {:
                              // Check if function and has params 
                              int num_params = symbolsTable.getNumParams(fun_id);
                              if(num_params > 0 ){
                                throw new Error("Missing parameters. Function " + fun_id + " has " + num_params + " parameters.");
                              }

                              Type fun_type = symbolsTable.get(fun_id);
                              String id = fun_type.getBackendId();
                              c3a_g.generateC3aInstr(
                                Code.call,
                                null,
                                null,
                                id
                              );

                              RESULT = new SymbolCallFunction();
                            :}
                            | inst_call CALL_BODY:body rparen
                            {:
                              int body_params = body.getNumParams();
                              String fun_id = body.getFunId();
                              int fun_params = symbolsTable.getNumParams(fun_id);

                              if(fun_params != body_params){
                                throw new Error("Incorrect number of parameters :"+ body_params + ".Function " + fun_id + " has " + fun_params + "params");
                              }

                              String fun_backId = body.getFunBackId();
                              c3a_g.generateC3aInstr(
                                Code.call,
                                null,
                                null,
                                fun_backId
                              );

                              RESULT = new SymbolCallFunction();
                            :};

CALL_BODY                   ::= CALL_BODY:body separator VALUE:value
                            {:
                              String fun_id = body.getFunId();
                              int num_params = body.getNumParams();
                              SUBJACENTTYPE subType;

                              if(value.getType() == TYPE.dnull){
                                subType = value.getSubType();
                              }
                              else{
                                if(value.getType() != TYPE.dvar && value.getType() != TYPE.dconst && value.getType() != TYPE.darg){
                                  throw new Error(fun_id + ". Incorrect type for param "+ num_params);
                                }
                                Type value_type = symbolsTable.get(value.getTypeName());
                                subType = value_type.getSubType();
                              }

                              //Check param type with function param type
                              SUBJACENTTYPE paramSubType = symbolsTable.getParam(fun_id, num_params).getSubType();

                              if(paramSubType != subType){
                                throw new Error(fun_id + ". Incorrect type for param " + num_params + ". Expected " + subType + " but got " + paramSubType);
                              }

                              String fun_back_id = body.getFunBackId();
                              c3a_g.generateC3aInstr(
                                Code.param,
                                value.getVarId(),
                                null,
                                fun_back_id
                              );

                              RESULT = new SymbolCallBody(fun_id, fun_back_id, num_params+1);
                            :}
                            | id:fun_id lparen VALUE:value
                            {:
                              SUBJACENTTYPE subType;

                              if(value.getType() == TYPE.dnull){
                                subType = value.getSubType();
                              }
                              else{
                                if(value.getType() != TYPE.dvar && value.getType() != TYPE.dconst && value.getType() != TYPE.darg){
                                  throw new Error(fun_id + ". Incorrect type for param 0");
                                }
                                Type value_type = symbolsTable.get(value.getTypeName());
                                subType = value_type.getSubType();
                              }

                              //Check param type with function param type
                              SUBJACENTTYPE paramSubType = symbolsTable.getParam(fun_id, 0).getSubType();

                              if(paramSubType != subType){
                                throw new Error(fun_id + ". Incorrect type for param 0. Expected " + subType + " but got " + paramSubType);
                              }

                              Type fun_type = symbolsTable.get(fun_id);
                              String fun_back_id = fun_type.getBackendId();

                              c3a_g.generateC3aInstr(
                                Code.param,
                                value.getVarId(),
                                null,
                                fun_back_id
                              );

                              RESULT = new SymbolCallBody(fun_id, fun_back_id, 0+1);
                            :};


INSTRUCTION_OUT             ::= instr_out lparen VALUE:value rparen nextinstr
                            {:
                              String var_id = value.getVarId();
                              String subtype_name;

                              if(value.getType() == TYPE.dnull){
                                subtype_name = value.getSubType().toString();
                              }else{
                                Type var_type = symbolsTable.get(value.getTypeName());
                                subtype_name = var_type.getSubType().toString();
                              }

                              if(value.getType() == TYPE.dnull && value.getSubType() == SUBJACENTTYPE.st_string){
                                var_id = backend.addTempStrVar(backend.getLastProcedureId(), 0,value.getStringSize(), (String) value.getValue());
                              }

                              c3a_g.generateC3aInstr(
                                Code.output,
                                subtype_name,
                                null,
                                var_id
                              );

                              RESULT = new SymbolInstructionOut();
                            :};


DEFINE_FUNCTION             ::= FUNCTION_HEAD lbracket BLOCK_IN FUNCTION_BODY FUNCTION_RETURN BLOCK_OUT rbracket;

FUNCTION_HEAD               ::= inst_function id:fun_id FUNCTION_PARAMS rparen two_points id:type_id;

FUNCTION_PARAMS             ::= FUNCTION_W_PARAMS
                            | lparen;

FUNCTION_W_PARAMS           ::= FUNCTION_W_PARAMS separator id:id two_points id:type_id
                            | lparen id:id two_points id:type_id ;

FUNCTION_BODY               ::= INSTRUCTIONS
                            | ;

FUNCTION_RETURN             ::= inst_return VALUE nextinstr
                            | ; 

EMPTY                       ::= {: RESULT = new SymbolEmpty(); :};